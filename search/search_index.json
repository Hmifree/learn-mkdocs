{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e2a\u4eba\u4ecb\u7ecd","text":"<p>\u81ea\u6211\u4ecb\u7ecd \u672c\u4eba\u662fSWPU\u7684\u4e00\u540d\u5b66\u751f\uff0c2022\u7ea7\uff0c\u5e0c\u671b\u81ea\u5df1\u4ee5\u540e\u53ef\u4ee5\u6210\u4e3a\u4e00\u540d\u5408\u683c\u7684\u540e\u7aef\u5f00\u53d1\u7a0b\u5e8f\u5458\u3002</p> <p>\u6211\u7684\u7f16\u7a0b\u8ba1\u5212\uff1a</p> <p>1.\u5173\u4e8eC\u8bed\u8a00\uff1aC/C++\u5728\u51e0\u5341\u5e74\u90fd\u4e00\u76f4\u4f4d\u4e8e\u524d\u4e09\u540d\uff0c\u6240\u4ee5\u8db3\u4ee5\u8bc1\u660e\u4ed6\u7684\u7ecf\u5178\u6027\u548c\u91cd\u8981\u6027\u3002C\u8bed\u8a00\u672c\u8eab\u662f\u8f83\u4e3a\u57fa\u7840\u7684\u8bed\u8a00\uff0c\u6240\u4ee5\u5f88\u5bf9\u4e8e\u65b0\u751f\u5165\u95e8\u975e\u5e38\u53cb\u597d\uff0c\u53ea\u9700\u8ba4\u771f\u542c\u5b66\u6821\u8001\u5e08\u8bb2\u8bfe+\u8bfe\u540e\u7ec3\u4e60\u5373\u53ef\u3002</p> <p>2.\u5173\u4e8e\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\uff1a\u8fd1\u5e74\u6765\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u6210\u4e3a\u4e86\u8fdb\u5165\u5927\u5382\u7684\u7b2c\u4e00\u5173\u7b14\u8bd5\uff0c\u60f3\u8981\u8fdb\u5165\u5927\u5382\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0c\u800c\u8fd9\u4e00\u5757\u7684\u77e5\u8bc6\u53c8\u662f\u6709\u4e00\u5b9a\u96be\u5ea6\u7684\uff0c\u6240\u4ee5\u9700\u8981\u6ce8\u91cd\u5b9e\u8df5\uff0c\u591a\u753b\u56fe\uff0c\u591a\u7ec3\u4e60\u3002</p> <p>3.\u5173\u4e8eLinux\u64cd\u4f5c\u7cfb\u7edf\u548c\u7f51\u7edc\u7f16\u7a0b\uff1a\u8fd9\u4e00\u5757\u7684\u77e5\u8bc6\u5728\u9ad8\u6821\u4e00\u822c\u5f88\u5c11\u6559\uff0c\u4f46\u662f\u53c8\u975e\u5e38\u7684\u91cd\u8981\uff0c\u5728\u6821\u62db\u7684\u9898\u76ee\u4e2d\u968f\u5904\u53ef\u89c1\uff0c\u6240\u4ee5\u5b66\u597d\u8fd9\u4e00\u90e8\u5206\u8981\u591a\u4e70\u4e66\u6765\u770b\uff0c\u6ce8\u91cd\u5b9e\u8df5\uff0c\u8fd8\u53ef\u4ee5\u5728MOOC\u4e0a\u5bfb\u627e\u89c6\u9891\u6765\u770b\u3002\u6ce8\u91cd\u7406\u8bba+\u5b9e\u8df5\u3002</p> <p>4.\u5b66\u4e60MYSQL\u6570\u636e\u5e93\uff0c\u4e5f\u662f\u5fc5\u5907\u7684\u6280\u80fd\u4e4b\u4e00\u3002</p> <p>5.\u5f00\u53d1\u505a\u9879\u76ee\u3002</p> <p>6.\u52aa\u529b\u5b66\u4e60\u82f1\u8bed,\u8fbe\u5230\u53ef\u4ee5\u9605\u8bfb\u6587\u732e\u7684\u80fd\u529b\uff0c\u4e0d\u7136\u5728\u5de5\u4f5c\u4e2d\u62d3\u5c55\u7684\u65f6\u5019\u5f88\u5403\u529b\u3002</p> <p>7.\u575a\u6301\u6572\u4ee3\u7801,\u4fd7\u8bdd\u8bf4\u719f\u80fd\u751f\u5de7\u3002</p> <p>\u76ee\u524d\u83b7\u5f97\u7684\u5956\u9879: </p>"},{"location":"C-C%2B%2B/AVL/","title":"AVL\u6811","text":""},{"location":"C-C%2B%2B/AVL/#avl_1","title":"\u4e00\u3001AVL\u6811","text":""},{"location":"C-C%2B%2B/AVL/#_1","title":"\uff08\u4e00\uff09\u6982\u5ff5","text":"<p>\u4e8c\u53c9\u641c\u7d22\u6811\u867d\u53ef\u4ee5\u7f29\u77ed\u67e5\u627e\u7684\u6548\u7387\uff0c\u4f46\u5982\u679c\u6570\u636e\u6709\u5e8f\u6216\u63a5\u8fd1\u6709\u5e8f\u4e8c\u53c9\u641c\u7d22\u6811\u5c06\u9000\u5316\u4e3a\u5355\u652f\u6811\uff0c\u67e5</p> <p>\u627e\u5143\u7d20\u76f8\u5f53\u4e8e\u5728\u987a\u5e8f\u8868\u4e2d\u641c\u7d22\u5143\u7d20\uff0c\u6548\u7387\u4f4e\u4e0b\u3002\u56e0\u6b64\uff0c\u4e24\u4f4d\u4fc4\u7f57\u65af\u7684\u6570\u5b66\u5bb6G.M.Adelson-Velskii \u548cE.M.Landis\u57281962\u5e74\u53d1\u660e\u4e86\u4e00\u79cd\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u7684\u65b9\u6cd5\uff1a\u5f53\u5411\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u63d2\u5165\u65b0\u7ed3\u70b9\u540e\uff0c\u5982\u679c\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de6\u53f3 \u5b50\u6811\u9ad8\u5ea6\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71(\u9700\u8981\u5bf9\u6811\u4e2d\u7684\u7ed3\u70b9\u8fdb\u884c\u8c03\u6574)\uff0c\u5373\u53ef\u964d\u4f4e\u6811\u7684\u9ad8\u5ea6\uff0c\u4ece\u800c\u51cf\u5c11\u5e73\u5747\u641c\u7d22\u957f\u5ea6\u3002</p> <p>\u4e00\u68f5AVL\u6811\u6216\u8005\u662f\u7a7a\u6811\uff0c\u6216\u8005\u662f\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff1a</p> <p>1.\u5b83\u7684\u5de6\u53f3\u5b50\u6811\u90fd\u662fAVL\u6811</p> <p>2.\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u4e4b\u5dee(\u7b80\u79f0\u5e73\u8861\u56e0\u5b50, \u5047\u5b9a\u53f3\u51cf\u5de6)\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71(-1/0/1)</p> <p>\u95ee: \u4e3a\u4ec0\u4e48\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u4e0d\u80fd\u53ea\u8bbe\u7f6e\u62100?</p> <p>\u7b54: \u5728\u53ea\u6709\u4e24\u4e2a\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u65e0\u6cd5\u4f7f\u5f97\u4e24\u68f5\u6811\u7684\u5b50\u6811\u5e73\u8861\u56e0\u5b50\u90fd\u4e3a0.</p> <p>\u8865: \u6811\u7684\u5e73\u8861\u56e0\u5b50\u4e0d\u662f\u5fc5\u987b\u8981\u7684\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\u6211\u4eec\u7528\u5e73\u8861\u56e0\u5b50\u6765\u63a7\u5236\u6811.</p>"},{"location":"C-C%2B%2B/AVL/#_2","title":"\uff08\u4e8c\uff09\u5b9a\u4e49","text":"<p>\u5982\u4e0b\u5b9a\u4e49\u4e00\u4e2aAVL\u6811\u8282\u70b9\u7684\u5b9a\u4e49\uff0c\u8fd9\u91cc\u6211\u4eec\u662f\u7528\u7684\u4e00\u4e2a\u4e09\u53c9\u6811\u3002</p> <pre><code>template&lt;class K, class V&gt;\nstruct AVLTreeNode {\n    AVLTreeNode&lt;K, V&gt;* _left;\n    AVLTreeNode&lt;K, V&gt;* _right;\n    AVLTreeNode&lt;K, V&gt;* _parent;\n    int bf;\n    pair&lt;K, V&gt; _kv;\n    AVLTreeNode(const pair&lt;K, V&gt; kv)\n        :_left(nullptr)\n        , _right(nullptr)\n        , _parent(nullptr)\n        , _bf(0)\n        , _kv(kv)\n    {}\n};\n</code></pre>"},{"location":"C-C%2B%2B/AVL/#avl_2","title":"\u4e8c\u3001AVL\u6811\u7684\u63d2\u5165","text":"<p>AVL\u6811\u5c31\u662f\u5728\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u57fa\u7840\u4e0a\u5f15\u5165\u4e86\u5e73\u8861\u56e0\u5b50\uff0c\u56e0\u6b64AVL\u6811\u4e5f\u53ef\u4ee5\u770b\u6210\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002\u90a3\u4e48 AVL\u6811\u7684\u63d2\u5165\u8fc7\u7a0b\u53ef\u4ee5\u5206\u4e3a\u4e24\u6b65\uff1a 1. \u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u5f0f\u63d2\u5165\u65b0\u8282\u70b9 2. \u8c03\u6574\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50</p> <pre><code>template&lt;class K, class V&gt; \nstruct AVLTree {\n    typedef AVLTreeNode&lt;K, V&gt; Node;\npublic:\n    bool Insert(const pair&lt;K, V&gt;&amp; kv) {\n        //1. \u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u5f0f\u63d2\u5165\u65b0\u8282\u70b9\n        //2. \u8c03\u6574\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\n\n    }\nprivate:\n    Node* _root = nullptr;\n};\n</code></pre>"},{"location":"C-C%2B%2B/AVL/#avl_3","title":"\uff08\u4e00\uff09\u5148\u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u89c4\u5219\u5c06\u8282\u70b9\u63d2\u5165\u5230AVL\u6811\u4e2d","text":"<pre><code>bool Insert(const pair&lt;K, V&gt;&amp; kv) {\n    //1. \u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u5f0f\u63d2\u5165\u65b0\u8282\u70b9\n    //2. \u8c03\u6574\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\n    if (_root == nullptr) {\n        _root = new Node(kv);\n        return true;\n    }\n    Node* parent = nullptr;\n    Node* cur = _root;\n    while (cur) {\n        if (cur-&gt;_kv.first &gt; kv.first) {\n            parent = cur;\n            cur = cur-&gt;_left;\n        }\n        else if (cur-&gt;_kv.first &lt; kv.first) {\n            parent = cur;\n            cur = cur-&gt;_right;\n        }\n        else {\n            return false;\n        }\n    }\n    cur = new Node(kv);\n    if (parent-&gt;_kv.first &gt; kv.first)\n        parent-&gt;_left = cur;\n    else\n        parent-&gt;_right = cur;\n    cur-&gt;_parent = parent;\n}\n</code></pre>"},{"location":"C-C%2B%2B/AVL/#_3","title":"\uff08\u4e8c\uff09\u8c03\u8282\u5e73\u8861\u56e0\u5b50","text":"<p>\u95ee: \u63d2\u5165\u8282\u70b9\u56de\u5f71\u54cd\u90a3\u4e9b\u5e73\u8861\u56e0\u5b50\u5462\uff1f</p> <p>\u7b54: \u65b0\u589e\u8282\u70b9\u7684\u90e8\u5206\u7956\u5148</p> <p>\u66f4\u65b0\u539f\u5219: cur\u66f4\u65b0\u5230root\u4f4d\u7f6e, \u7ed3\u675f\u3002</p> <p>cur\u662fp\u7684\u5de6\u8fb9,p-&gt;_bf--</p> <p>cur\u662fp\u7684\u53f3\u8fb9,p-&gt;_bf++</p> <p>1.\u66f4\u65b0\u540e,p-&gt;_bf == 0,p\u6240\u5728\u7684\u5b50\u6811\u9ad8\u5ea6\u4e0d\u53d8,\u4e0d\u4f1a\u5f71\u54cd\u7237\u7237\uff0c\u8bf4\u660e\u66f4\u65b0\u524d,p\u7684_bf\u662f1\u6216\u8005-1</p> <p>p\u5728\u77ee\u7684\u8282\u70b9\u90a3\u8fb9\u63d2\u5165\u4e86\u8282\u70b9,\u5de6\u53f3\u5747\u8861\u4e86,p\u7684\u9ad8\u5ea6\u4e0d\u53d8,\u4e0d\u4f1a\u5f71\u54cd\u7237\u7237.</p> <p>2.\u66f4\u65b0\u540e,p-&gt;_bf == 1 / -1,p\u6240\u5728\u7684\u5b50\u6811\u7684\u9ad8\u5ea6\u53d8\u4e86,\u4f1a\u5f71\u54cd\u7237\u7237,\u8bf4\u660e\u66f4\u65b0\u524d,p\u7684_bf\u662f0</p> <p>p\u7684\u6709\u4e00\u8fb9\u63d2\u5165,p\u53d8\u7684\u4e0d\u5747\u8861,\u4f46\u662f\u4e0d\u8fdd\u53cd\u89c4\u5219,p\u7684\u9ad8\u5ea6\u53d8\u4e86,\u4f1a\u5f71\u54cd\u7237\u7237.</p> <p>3.\u66f4\u65b0\u540ep-&gt;_bf == 2 / -2,\u8bf4\u660ep\u6240\u5728\u7684\u5b50\u6811\u8fdd\u53cd\u4e86\u5e73\u8861\u89c4\u5219,\u9700\u8981\u8fdb\u884c\u5904\u7406-&gt;\u65cb\u8f6c</p> <p>(\u8ba9p\u6240\u5728\u5b50\u6811\u9ad8\u5ea6\u56de\u5230\u63d2\u5165\u4e4b\u524d,\u4e0d\u4f1a\u5bf9\u4e0a\u5c42\u7684bf\u6709\u5f71\u54cd)</p> <pre><code>while (parent) {\n    if (cur == parent-&gt;_left)\n        parent-&gt;_bf--;\n    else\n        parent-&gt;_bf++;\n    if (parent-&gt;_bf == 0)\n        break;\n    else if (parent-&gt;_bf == 1 || parent-&gt;_bf == -1) {\n        cur = cur-&gt;_parent;\n        parent = parent-&gt;_parent;\n    }\n    else if (parent-&gt;_bf == 2 || parent-&gt;_bf == -2) {\n        // \u65cb\u8f6c\n\n    }\n    else\n        assert(false);\n}\n</code></pre>"},{"location":"C-C%2B%2B/AVL/#_4","title":"\uff08\u4e09\uff09\u65cb\u8f6c","text":"<p>1.\u5de6\u65cb\u8f6c\uff08\u5f53\u53f3\u8fb9\u4e00\u6761\u76f4\u7ebf\u4e14bf == 2\uff09</p> <pre><code>void RotateL(Node* parent) {\n    Node* subR = parent-&gt;_right; // parent\u7684\u53f3\u8282\u70b9\n    Node* subRL = subR-&gt;_left;   // parent\u7684\u53f3\u8282\u70b9\u7684\u5de6\u8282\u70b9\n    parent-&gt;_right = subRL;      \n    if (subRL) // \u5224\u65adsubRL\u4e0d\u4e3a\u7a7a\n        subRL-&gt;_parent = parent;\n    subR-&gt;_left = parent;\n    Node ppnode = parent-&gt;_parent; // parent\u7684\u7236\u4eb2\u8282\u70b9\u6765\u5224\u65adsubR\u7684\u7236\u4eb2\u8282\u70b9\n    parent-&gt;_parent = subR;\n    if (parent == _root) {\n        _root = subR;\n        subR-&gt;_parent = nullptr;\n    }\n    else {\n        if (parent == ppnode-&gt;_left)\n            ppnode-&gt;_left = subR;\n        else\n            ppnode-&gt;_right = subR;\n        subR-&gt;_parent = ppnode;\n    }\n    parent-&gt;_bf = 0;\n    subR-&gt;_bf = 0;\n}\n</code></pre> <p>2.\u53f3\u65cb\u8f6c\uff08\u7c7b\u4f3c\u5de6\u65cb\u8f6c,\u5de6\u8fb9\u4e00\u6761\u76f4\u7ebf\u4e14bf=-2\uff09</p> <pre><code>void RotateR(Node* parent) {\n    Node* subL = parent-&gt;_left;//parent\u7684\u5de6\u8282\u70b9\n    Node* subLR = subL-&gt;_right;//parent\u7684\u5de6\u8282\u70b9\u7684\u53f3\u8282\u70b9\n    parent-&gt;_left = subLR;\n    if (subLR)\n        subLR-&gt;_parent = parent;\n    subL-&gt;_right = parent;\n    Node* ppnode = parent-&gt;_parent; //parent\u7684\u7236\u4eb2\u8282\u70b9\u6765\u5224\u65adsubL\u7684\u7236\u4eb2\u8282\u70b9 \n    parent-&gt;_parent = subL;\n    if (parent == _root) { // \u5224\u65adsubL\u662f\u5426\u66f4\u65b0\u4e3a\u6839\u8282\u70b9\n        _root = subL;\n        subL-&gt;_parent = nullptr;\n    }\n    else {\n        if (ppnode-&gt;_left == parent)\n            ppnode-&gt;_left = subL;\n        else\n            ppnode-&gt;_right = subL;\n        subL-&gt;_parent = ppnode;\n    }\n    parent-&gt;_bf = 0;\n    subL-&gt;_bf = 0;\n}\n</code></pre> <p>3.\u5de6\u53f3\u65cb\u8f6c\uff08\u5148\u5f80\u5de6\u8d70\uff0c\u518d\u5f80\u53f3\u8d70\u3002\u4e00\u4e2abf\u4e3a-2\uff0c\u4e00\u4e2abf\u4e3a1\u3002\u5148\u5de6\u65cb\uff0c\u518d\u53f3\u65cb\uff0c\u96be\u70b9\u5728\u4e8e\u8c03\u8282\u5e73\u8861\u56e0\u5b50\uff08\u5173\u952e\u5728\u4e8e\u753b\u56fe\uff09\uff09</p> <pre><code>void RotateLR(Node* parent) {\n    Node* subL = parent-&gt;_left;\n    Node* subLR = subL-&gt;_right;\n    int bf = subLR-&gt;_bf;\n    RotateL(parent-&gt;_left);\n    RotateR(parent);\n    if (bf == -1) {\n        subLR-&gt;_bf = 0;\n        subL-&gt;_bf = 0;\n        parent-&gt;_bf = 1;\n    }\n    else if (bf == 1) {\n        subLR-&gt;_bf = 0;\n        subL-&gt;_bf = -1;\n        parent-&gt;_bf = 0;\n    }\n    else if (bf == 0) {\n        subLR-&gt;_bf = 0;\n        subL-&gt;_bf = 0;\n        parent-&gt;_bf = 0;\n    }\n    else\n        assert(false);\n}\n</code></pre> <p>4.\u53f3\u5de6\u65cb\u8f6c\uff08\u5148\u5f80\u53f3\u8d70\uff0c\u518d\u5f80\u5de6\u8d70\u3002\u4e00\u4e2abf\u4e3a2\uff0c\u4e00\u4e2abf\u4e3a-1\u3002\u5148\u53f3\u65cb\uff0c\u518d\u5de6\u65cb\uff0c\u96be\u70b9\u5728\u4e8e\u8c03\u8282\u5e73\u8861\u56e0\u5b50\uff08\u5173\u952e\u5728\u4e8e\u753b\u56fe\uff09\uff09</p> <pre><code>void RotateRL(Node* parent) {\n    Node* subR = parent-&gt;_right;\n    Node* subRL = subR-&gt;_left;\n    int bf = subRL-&gt;_bf;\n    RotateR(parent-&gt;_right);\n    RotateL(parent);\n    if (bf == -1) {\n        subRL-&gt;_bf = 0;\n        subR-&gt;_bf = 1;\n        parent-&gt;_bf = 0;\n    }\n    else if (bf == 1) {\n        subRL-&gt;_bf = 0;\n        subR-&gt;_bf = 0;\n        parent-&gt;_bf = -1;\n    }\n    else if (bf == 0) { // \u53ea\u67093\u4e2a\u8282\u70b9\u7684\u60c5\u51b5\n        subRL-&gt;_bf = 0;\n        subR-&gt;_bf = 0;\n        parent-&gt;_bf = 0;\n    }\n    else\n        assert(false);\n}\n</code></pre> <p>\u65cb\u8f6c\u4ee3\u7801\uff1a</p> <pre><code>if (parent-&gt;_bf == 2 &amp;&amp; cur-&gt;_bf == 1)\n    RotateL(parent);\nelse if (parent-&gt;_bf == -2 &amp;&amp; cur-&gt;_bf == -1)\n    RotateR(parent);\nelse if (parent-&gt;_bf == -2 &amp;&amp; cur-&gt;_bf == 1)\n    RotateLR(parent);\nelse\n    RotateRL(parent);\nbreak;\n</code></pre> <p>5.\u9a8c\u8bc1\u662f\u5426\u4e3aAVL\u6811:</p> <pre><code>bool _IsBalance(Node* root, int&amp; height) {\n    if (root == nullptr) {\n        height = 0;\n        return true;\n    }\n    int LeftHeight = 0, RightHeight = 0;\n    if (!_IsBalance(root-&gt;_left, LeftHeight) ||\n        !_IsBalance(root-&gt;_right, RightHeight)) {\n        return false;\n    }\n    if (abs(LeftHeight - RightHeight) &gt;= 2) {\n        cout &lt;&lt; root-&gt;_kv.first &lt;&lt; \"\u4e0d\u5e73\u8861\" &lt;&lt; endl;\n        return false;\n    }\n    if (RightHeight - LeftHeight != root-&gt;_bf) {\n        cout &lt;&lt; root-&gt;_kv.first &lt;&lt; \"\u5e73\u8861\u82f1\u5b50\u5f02\u5e38\" &lt;&lt; endl;\n        return false;\n    }\n    height = max(LeftHeight, RightHeight) + 1;\n    return true;\n}\n\nbool IsBalance() {\n    int height = 0;\n    return _IsBalance(_root, height);\n}\n</code></pre> <p>\u4ee3\u7801\u6c47\u603b\uff1a</p> <pre><code>#pragma once\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;assert.h&gt;\nusing namespace std;\ntemplate&lt;class K, class V&gt;\nstruct AVLTreeNode {\n    AVLTreeNode&lt;K, V&gt;* _left;\n    AVLTreeNode&lt;K, V&gt;* _right;\n    AVLTreeNode&lt;K, V&gt;* _parent;\n    int _bf;\n    pair&lt;K, V&gt; _kv;\n    AVLTreeNode(const pair&lt;K, V&gt; kv)\n        :_left(nullptr)\n        , _right(nullptr)\n        , _parent(nullptr)\n        , _bf(0)\n        , _kv(kv)\n    {}\n};\n\ntemplate&lt;class K, class V&gt; \nstruct AVLTree {\n    typedef AVLTreeNode&lt;K, V&gt; Node;\npublic:\n    bool Insert(const pair&lt;K, V&gt;&amp; kv) {\n        //1. \u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u5f0f\u63d2\u5165\u65b0\u8282\u70b9\n        //2. \u8c03\u6574\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\n        if (_root == nullptr) {\n            _root = new Node(kv);\n            return true;\n        }\n        Node* parent = nullptr;\n        Node* cur = _root;\n        while (cur) {\n            if (cur-&gt;_kv.first &gt; kv.first) {\n                parent = cur;\n                cur = cur-&gt;_left;\n            }\n            else if (cur-&gt;_kv.first &lt; kv.first) {\n                parent = cur;\n                cur = cur-&gt;_right;\n            }\n            else {\n                return false;\n            }\n        }\n        cur = new Node(kv);\n        if (parent-&gt;_kv.first &gt; kv.first)\n            parent-&gt;_left = cur;\n        else\n            parent-&gt;_right = cur;\n        cur-&gt;_parent = parent;\n        while (parent) {\n            if (cur == parent-&gt;_left)\n                parent-&gt;_bf--;\n            else\n                parent-&gt;_bf++;\n            if (parent-&gt;_bf == 0)\n                break;\n            else if (parent-&gt;_bf == 1 || parent-&gt;_bf == -1) {\n                cur = cur-&gt;_parent;\n                parent = parent-&gt;_parent;\n            }\n            else if (parent-&gt;_bf == 2 || parent-&gt;_bf == -2) {\n                // \u65cb\u8f6c\n                if (parent-&gt;_bf == 2 &amp;&amp; cur-&gt;_bf == 1)\n                    RotateL(parent);\n                else if (parent-&gt;_bf == -2 &amp;&amp; cur-&gt;_bf == -1)\n                    RotateR(parent);\n                else if (parent-&gt;_bf == -2 &amp;&amp; cur-&gt;_bf == 1)\n                    RotateLR(parent);\n                else\n                    RotateRL(parent);\n                break;\n            }\n            else\n                assert(false);\n        }\n    }\n    void RotateL(Node* parent) {\n        Node* subR = parent-&gt;_right; // parent\u7684\u53f3\u8282\u70b9\n        Node* subRL = subR-&gt;_left;   // parent\u7684\u53f3\u8282\u70b9\u7684\u5de6\u8282\u70b9\n        parent-&gt;_right = subRL;      \n        if (subRL) // \u5224\u65adsubRL\u4e0d\u4e3a\u7a7a\n            subRL-&gt;_parent = parent;\n        subR-&gt;_left = parent;\n        Node* ppnode = parent-&gt;_parent; // parent\u7684\u7236\u4eb2\u8282\u70b9\u6765\u5224\u65adsubR\u7684\u7236\u4eb2\u8282\u70b9\n        parent-&gt;_parent = subR;\n        if (parent == _root) {\n            _root = subR;\n            subR-&gt;_parent = nullptr;\n        }\n        else {\n            if (parent == ppnode-&gt;_left)\n                ppnode-&gt;_left = subR;\n            else\n                ppnode-&gt;_right = subR;\n            subR-&gt;_parent = ppnode;\n        }\n        parent-&gt;_bf = 0;\n        subR-&gt;_bf = 0;\n    }\n\n    void RotateR(Node* parent) {\n        Node* subL = parent-&gt;_left;//parent\u7684\u5de6\u8282\u70b9\n        Node* subLR = subL-&gt;_right;//parent\u7684\u5de6\u8282\u70b9\u7684\u53f3\u8282\u70b9\n        parent-&gt;_left = subLR;\n        if (subLR)\n            subLR-&gt;_parent = parent;\n        subL-&gt;_right = parent;\n        Node* ppnode = parent-&gt;_parent; //parent\u7684\u7236\u4eb2\u8282\u70b9\u6765\u5224\u65adsubL\u7684\u7236\u4eb2\u8282\u70b9 \n        parent-&gt;_parent = subL;\n        if (parent == _root) { // \u5224\u65adsubL\u662f\u5426\u66f4\u65b0\u4e3a\u6839\u8282\u70b9\n            _root = subL;\n            subL-&gt;_parent = nullptr;\n        }\n        else {\n            if (ppnode-&gt;_left == parent)\n                ppnode-&gt;_left = subL;\n            else\n                ppnode-&gt;_right = subL;\n            subL-&gt;_parent = ppnode;\n        }\n        parent-&gt;_bf = 0;\n        subL-&gt;_bf = 0;\n    }\n\n    void RotateLR(Node* parent) {\n        Node* subL = parent-&gt;_left;\n        Node* subLR = subL-&gt;_right;\n        int bf = subLR-&gt;_bf;\n        RotateL(parent-&gt;_left);\n        RotateR(parent);\n        if (bf == -1) {\n            subLR-&gt;_bf = 0;\n            subL-&gt;_bf = 0;\n            parent-&gt;_bf = 1;\n        }\n        else if (bf == 1) {\n            subLR-&gt;_bf = 0;\n            subL-&gt;_bf = -1;\n            parent-&gt;_bf = 0;\n        }\n        else if (bf == 0) {\n            subLR-&gt;_bf = 0;\n            subL-&gt;_bf = 0;\n            parent-&gt;_bf = 0;\n        }\n        else\n            assert(false);\n    }\n\n    void RotateRL(Node* parent) {\n        Node* subR = parent-&gt;_right;\n        Node* subRL = subR-&gt;_left;\n        int bf = subRL-&gt;_bf;\n        RotateR(parent-&gt;_right);\n        RotateL(parent);\n        if (bf == -1) {\n            subRL-&gt;_bf = 0;\n            subR-&gt;_bf = 1;\n            parent-&gt;_bf = 0;\n        }\n        else if (bf == 1) {\n            subRL-&gt;_bf = 0;\n            subR-&gt;_bf = 0;\n            parent-&gt;_bf = -1;\n        }\n        else if (bf == 0) { // \u53ea\u67093\u4e2a\u8282\u70b9\u7684\u60c5\u51b5\n            subRL-&gt;_bf = 0;\n            subR-&gt;_bf = 0;\n            parent-&gt;_bf = 0;\n        }\n        else\n            assert(false);\n    }\n\n    bool _IsBalance(Node* root, int&amp; height) {\n        if (root == nullptr) {\n            height = 0;\n            return true;\n        }\n        int LeftHeight = 0, RightHeight = 0;\n        if (!_IsBalance(root-&gt;_left, LeftHeight) ||\n            !_IsBalance(root-&gt;_right, RightHeight)) {\n            return false;\n        }\n        if (abs(LeftHeight - RightHeight) &gt;= 2) {\n            cout &lt;&lt; root-&gt;_kv.first &lt;&lt; \"\u4e0d\u5e73\u8861\" &lt;&lt; endl;\n            return false;\n        }\n        if (RightHeight - LeftHeight != root-&gt;_bf) {\n            cout &lt;&lt; root-&gt;_kv.first &lt;&lt; \"\u5e73\u8861\u82f1\u5b50\u5f02\u5e38\" &lt;&lt; endl;\n            return false;\n        }\n        height = max(LeftHeight, RightHeight) + 1;\n        return true;\n    }\n\n    bool IsBalance() {\n        int height = 0;\n        return _IsBalance(_root, height);\n    }\nprivate:\n    Node* _root = nullptr;\n};\n\nvoid TestAVLTree()\n{\n    const int N = 1000000;\n    vector&lt;int&gt; v;\n    v.reserve(N);\n    srand(time(0));\n\n    for (size_t i = 0; i &lt; N; i++)\n    {\n        v.push_back(rand() + i);\n        //cout &lt;&lt; v.back() &lt;&lt; endl;\n    }\n\n    AVLTree&lt;int, int&gt; t;\n    for (auto e : v)\n    {\n        t.Insert(make_pair(e, e));\n        //cout &lt;&lt; \"Insert:\" &lt;&lt; e &lt;&lt; \"-&gt;\" &lt;&lt; t.IsBalance() &lt;&lt; endl;\n    }\n    cout &lt;&lt; t.IsBalance() &lt;&lt; endl;\n}\n</code></pre>"},{"location":"C-C%2B%2B/Smart%20pointers/","title":"\u667a\u80fd\u6307\u9488","text":"<p>\u667a\u80fd\u6307\u9488\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\u6a21\u7248,\u9632\u6b62\u5185\u5b58\u6cc4\u6f0f</p> <pre><code>template&lt;class T&gt;\nclass SmartPtr\n{\npublic:\n    // RAII\n    SmartPtr(T* ptr)\n        :_ptr(ptr)\n    {}\n\n    ~SmartPtr()\n    {\n        cout &lt;&lt; \"delete:\" &lt;&lt; _ptr &lt;&lt; endl;\n\n        delete _ptr;\n    }\n\n    // \u50cf\u6307\u9488\u4e00\u6837\n    T&amp; operator*()\n    {\n        return *_ptr;\n    }\n\n    T* operator-&gt;()\n    {\n        return _ptr;\n    }\n\nprivate:\n    T* _ptr;\n};\n</code></pre> <p>\u4e0b\u9762\u518d\u6765\u8bf4\u667a\u80fd\u667a\u80fd\u7684\u62f7\u8d1d\u95ee\u9898</p> <p>vector/list ...\u5229\u7528\u8d44\u6e90\u5b58\u50a8\u7ba1\u7406\u6570\u636e\uff0c\u8d44\u6e90\u90fd\u662f\u81ea\u5df1\u7684\u3002\u62f7\u8d1d\u65f6\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u5404\u81ea\u4e00\u4efd\u8d44\u6e90\uff0c\u5404\u7ba1\u5404\u7684\uff0c\u6240\u4ee5\u6df1\u62f7\u8d1d\u3002</p> <p>\u667a\u80fd\u6307\u9488/\u8fed\u4ee3\u5668... \u672c\u8d28\u8d44\u6e90\u4e0d\u662f\u81ea\u5df1\u7684\uff0c\u4ee3\u4e3a\u6301\u6709\uff0c\u65b9\u4fbf\u8bbf\u95ee\u4fee\u6539\u6570\u636e\u3002\u4ed6\u4eec\u62f7\u8d1d\u7684\u65f6\u5019\u671f\u671b\u7684\u6307\u5411\u540c\u4e00\u4e2a\u8d44\u6e90\uff0c\u6240\u4ee5\u6d45\u62f7\u8d1d\u3002(\u5b9e\u9645\u4e0a\u662f\u8d4b\u503c + \u7f6e\u7a7a)</p> <p>auto_ptr\u7ba1\u7406\u6743\u8f6c\u79fb,\u88ab\u62f7\u8d1d\u5bf9\u8c61\u628a\u8d44\u6e90\u7ba1\u7406\u6743\u8f6c\u79fb\u7ed9\u62f7\u8d1d\u5bf9\u8c61,\u5bfc\u81f4\u88ab\u62f7\u8d1d\u5bf9\u8c61\u60ac\u7a7a\uff0c\u6ce8\u610f\u62f7\u8d1d\u8fc7\u540e\u4e0d\u80fd\u8bbf\u95ee\u88ab\u62f7\u8d1d\u5bf9\u8c61\uff0c\u5426\u5219\u5c31\u51fa\u73b0\u7a7a\u6307\u9488\u4e86\u3002\u5f88\u591a\u516c\u53f8\u7981\u6b62\u4f7f\u7528\u5b83\uff0c\u56e0\u4e3a\u5f88\u5751\u3002</p> <pre><code>template&lt;class T&gt;\nclass auto_ptr\n{\npublic:\n    // RAII\n    auto_ptr(T* ptr)\n        :_ptr(ptr)\n    {}\n\n    // ap2(ap1)\n    auto_ptr(auto_ptr&lt;T&gt;&amp; ap)\n    {\n        _ptr = ap._ptr;\n        ap._ptr = nullptr;\n    }\n\n    ~auto_ptr()\n    {\n        cout &lt;&lt; \"delete:\" &lt;&lt; _ptr &lt;&lt; endl;\n\n        delete _ptr;\n    }\n\n    // \u50cf\u6307\u9488\u4e00\u6837\n    T&amp; operator*()\n    {\n        return *_ptr;\n    }\n\n    T* operator-&gt;()\n    {\n        return _ptr;\n    }\n\nprivate:\n    T* _ptr;\n};\n</code></pre> <p>unique_ptr\u7981\u6b62\u62f7\u8d1d\u3001\u7981\u6b62\u8d4b\u503c</p> <pre><code>template&lt;class T&gt;\nclass unique_ptr\n{\npublic:\n    // RAII\n    unique_ptr(T* ptr)\n        :_ptr(ptr)\n    {}\n\n    // ap2(ap1)\n    unique_ptr(const unique_ptr&lt;T&gt;&amp; ap) = delete;\n    unique_ptr&lt;T&gt;&amp; operator=(const unique_ptr&lt;T&gt;&amp; ap) = delete;\n\n    ~unique_ptr()\n    {\n        cout &lt;&lt; \"delete:\" &lt;&lt; _ptr &lt;&lt; endl;\n\n        delete _ptr;\n    }\n\n    // \u50cf\u6307\u9488\u4e00\u6837\n    T&amp; operator*()\n    {\n        return *_ptr;\n    }\n\n    T* operator-&gt;()\n    {\n        return _ptr;\n    }\n\nprivate:\n    T* _ptr;\n};\n</code></pre> <p>shared_ptr,\u8fd0\u7528\u5f15\u7528\u8ba1\u6570\u7684\u65b9\u5f0f\u6765\u7ba1\u7406\u3002\u90a3\u4e48\u5982\u4f55\u5f15\u7528\u8ba1\u6570\u5462\uff1f\u5b9e\u9645\u4e0a\u662f\u521b\u5efa\u4e00\u4e2a\u6307\u9488\u6765\u8ba1\u6570\u3002\u4f46\u662f\u4f1a\u51fa\u73b0\u5faa\u73af\u5f15\u7528\u7684\u95ee\u9898(\u89e3\u51b3\u529e\u6cd5\u662f\u5728\u94fe\u8868\u91cc\u9762\u7528weak_ptr)\u3002</p> <pre><code>template&lt;class T&gt;\nclass shared_ptr\n{\npublic:\n    // RAII\n    shared_ptr(T* ptr = nullptr)\n        :_ptr(ptr)\n        , _pcount(new int(1))\n    {}\n\n    // sp2(sp1)\n    shared_ptr(const shared_ptr&lt;T&gt;&amp; sp)\n    {\n        _ptr = sp._ptr;\n        _pcount = sp._pcount;\n\n        // \u62f7\u8d1d\u65f6++\u8ba1\u6570\n        ++(*_pcount);\n    }\n\n    // sp1 = sp4\n    // sp4 = sp4;\n    // sp1 = sp2;\n    shared_ptr&lt;T&gt;&amp; operator=(const shared_ptr&lt;T&gt;&amp; sp)\n    {\n        //if (this != &amp;sp)\n        if (_ptr != sp._ptr)\n        {\n            release();\n\n            _ptr = sp._ptr;\n            _pcount = sp._pcount;\n\n            // \u62f7\u8d1d\u65f6++\u8ba1\u6570\n            ++(*_pcount);\n        }\n\n        return *this;\n    }\n\n    void release()\n    {\n        // \u8bf4\u660e\u6700\u540e\u4e00\u4e2a\u7ba1\u7406\u5bf9\u8c61\u6790\u6784\u4e86\uff0c\u53ef\u4ee5\u91ca\u653e\u8d44\u6e90\u4e86\n        if (--(*_pcount) == 0)\n        {\n            cout &lt;&lt; \"delete:\" &lt;&lt; _ptr &lt;&lt; endl;\n            delete _ptr;\n            delete _pcount;\n        }\n    }\n\n    ~shared_ptr()\n    {\n        // \u6790\u6784\u65f6\uff0c--\u8ba1\u6570\uff0c\u8ba1\u6570\u51cf\u52300\uff0c\n        release();\n    }\n\n    int use_count()\n    {\n        return *_pcount;\n    }\n\n    // \u50cf\u6307\u9488\u4e00\u6837\n    T&amp; operator*()\n    {\n        return *_ptr;\n    }\n\n    T* operator-&gt;()\n    {\n        return _ptr;\n    }\n\n    T* get() const\n    {\n        return _ptr;\n    }\nprivate:\n    T* _ptr;\n    int* _pcount;\n};\n</code></pre> <p>weak_ptr</p> <pre><code>// \u4e0d\u652f\u6301RAII\uff0c\u4e0d\u53c2\u4e0e\u8d44\u6e90\u7ba1\u7406\ntemplate&lt;class T&gt;\nclass weak_ptr\n{\npublic:\n    // RAII\n    weak_ptr()\n        :_ptr(nullptr)\n    {}\n\n    weak_ptr(const shared_ptr&lt;T&gt;&amp; sp)\n    {\n        _ptr = sp.get();\n    }\n\n    weak_ptr&lt;T&gt;&amp; operator=(const shared_ptr&lt;T&gt;&amp; sp)\n    {\n        _ptr = sp.get();\n        return *this;\n    }\n\n    // \u50cf\u6307\u9488\u4e00\u6837\n    T&amp; operator*()\n    {\n        return *_ptr;\n    }\n\n    T* operator-&gt;()\n    {\n        return _ptr;\n    }\n\nprivate:\n    T* _ptr;\n};\n</code></pre>"},{"location":"C-C%2B%2B/Special%20category%20design/","title":"\u7279\u6b8a\u7c7b\u8bbe\u8ba1","text":""},{"location":"C-C%2B%2B/Special%20category%20design/#_2","title":"\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u4e0d\u80fd\u88ab\u62f7\u8d1d","text":"<p>\u62f7\u8d1d\u53ea\u4f1a\u653e\u751f\u5728\u4e24\u4e2a\u573a\u666f\u4e2d\uff1a\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4ee5\u53ca\u8d4b\u503c\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u56e0\u6b64\u60f3\u8981\u8ba9\u4e00\u4e2a\u7c7b\u7981\u6b62\u62f7\u8d1d\uff0c \u53ea\u9700\u8ba9\u8be5\u7c7b\u4e0d\u80fd\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4ee5\u53ca\u8d4b\u503c\u8fd0\u7b97\u7b26\u91cd\u8f7d\u5373\u53ef\u3002</p> <ul> <li>C++98</li> </ul> <p>\u5c06\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e0e\u8d4b\u503c\u8fd0\u7b97\u7b26\u91cd\u8f7d\u53ea\u58f0\u660e\u4e0d\u5b9a\u4e49\uff0c\u5e76\u4e14\u5c06\u5176\u8bbf\u95ee\u6743\u9650\u8bbe\u7f6e\u4e3a\u79c1\u6709\u5373\u53ef\u3002</p> <pre><code>class CopyBan\n{\n \u00a0 \u00a0// ...\n \u00a0 \u00a0\nprivate:\n \u00a0 \u00a0CopyBan(const CopyBan&amp;);\n \u00a0 \u00a0CopyBan&amp; operator=(const CopyBan&amp;);\n \u00a0 \u00a0//...\n};\n</code></pre> <p>\u539f\u56e0\uff1a</p> <ol> <li>\u8bbe\u7f6e\u6210\u79c1\u6709\uff1a\u5982\u679c\u53ea\u58f0\u660e\u6ca1\u6709\u8bbe\u7f6e\u6210private\uff0c\u7528\u6237\u81ea\u5df1\u5982\u679c\u5728\u7c7b\u5916\u5b9a\u4e49\u4e86\uff0c\u5c31\u53ef\u4ee5\u4e0d \u80fd\u7981\u6b62\u62f7\u8d1d\u4e86</li> <li> <p>\u53ea\u58f0\u660e\u4e0d\u5b9a\u4e49\uff1a\u4e0d\u5b9a\u4e49\u662f\u56e0\u4e3a\u8be5\u51fd\u6570\u6839\u672c\u4e0d\u4f1a\u8c03\u7528\uff0c\u5b9a\u4e49\u4e86\u5176\u5b9e\u4e5f\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\uff0c\u4e0d\u5199 \u53cd\u800c\u8fd8\u7b80\u5355\uff0c\u800c\u4e14\u5982\u679c\u5b9a\u4e49\u4e86\u5c31\u4e0d\u4f1a\u9632\u6b62\u6210\u5458\u51fd\u6570\u5185\u90e8\u62f7\u8d1d\u4e86\u3002</p> </li> <li> <p>C++11</p> </li> </ol> <p>C++11\u6269\u5c55delete\u7684\u7528\u6cd5\uff0cdelete\u9664\u4e86\u91ca\u653enew\u7533\u8bf7\u7684\u8d44\u6e90\u5916\uff0c\u5982\u679c\u5728\u9ed8\u8ba4\u6210\u5458\u51fd\u6570\u540e\u8ddf\u4e0a =delete\uff0c\u8868\u793a\u8ba9\u7f16\u8bd1\u5668\u5220\u9664\u6389\u8be5\u9ed8\u8ba4\u6210\u5458\u51fd\u6570\u3002</p> <pre><code>class CopyBan\n{\n \u00a0 \u00a0// ...\n \u00a0 \u00a0CopyBan(const CopyBan&amp;)=delete;\n \u00a0 \u00a0CopyBan&amp; operator=(const CopyBan&amp;)=delete;\n \u00a0 \u00a0//...\n};\n</code></pre>"},{"location":"C-C%2B%2B/Special%20category%20design/#_3","title":"\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u53ea\u80fd\u5728\u5806\u4e0a\u521b\u5efa\u5bf9\u8c61","text":"<p>\u5b9e\u73b0\u65b9\u5f0f\uff1a</p> <ol> <li>\u5c06\u7c7b\u7684\u6784\u9020\u51fd\u6570\u79c1\u6709\uff0c\u62f7\u8d1d\u6784\u9020\u58f0\u660e\u6210\u79c1\u6709\u3002\u9632\u6b62\u522b\u4eba\u8c03\u7528\u62f7\u8d1d\u5728\u6808\u4e0a\u751f\u6210\u5bf9\u8c61\u3002</li> <li>\u63d0\u4f9b\u4e00\u4e2a\u9759\u6001\u7684\u6210\u5458\u51fd\u6570\uff0c\u5728\u8be5\u9759\u6001\u6210\u5458\u51fd\u6570\u4e2d\u5b8c\u6210\u5806\u5bf9\u8c61\u7684\u521b\u5efa</li> </ol> <pre><code>// 1.\nclass HeapOnly {\npublic:\n    template&lt;class... Args&gt;\n    static HeapOnly* CreateObj(Args&amp;&amp;... args) {\n        return new HeapOnly(args...);\n    }\n\n    HeapOnly(const HeapOnly&amp;) = delete;\n\n    HeapOnly&amp; operator=(const HeapOnly&amp;) = delete;\nprivate:\n    HeapOnly()\n    {}\n\n    HeapOnly(int x, int y)\n        :_x(x)\n        ,_y(y)\n    {}\n\n    int _x;\n    int _y;\n};\n\n// 2.\nclass HeapOnly {\npublic:\n    HeapOnly()\n    {}\n\n    HeapOnly(int x, int y)\n        :_x(x)\n        , _y(y)\n    {}\n\n    void Destroy() {\n        delete this;\n    }\nprivate:\n    ~HeapOnly()\n    {\n        ;\n    }\n\n    int _x;\n    int _y;\n};\n\n</code></pre>"},{"location":"C-C%2B%2B/Special%20category%20design/#_4","title":"\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u53ea\u80fd\u5728\u6808\u4e0a\u521b\u5efa\u5bf9\u8c61","text":"<pre><code>class StackOnly {\npublic:\n    template&lt;class... Args&gt;\n    static StackOnly CreateObj(Args&amp;&amp;... args) {\n        return StackOnly(args...);\n    }\n\n    //StackOnly(const StackOnly&amp;) = delete;\n\n    void* operator new(size_t size) = delete;\n\n    void operator delete(void*) = delete;\n\n    StackOnly&amp; operator=(const StackOnly&amp;) = delete;\nprivate:\n    StackOnly()\n    {}\n\n    StackOnly(int x, int y)\n        :_x(x)\n        , _y(y)\n    {}\n\n    int _x;\n    int _y;\n};\n</code></pre>"},{"location":"C-C%2B%2B/Special%20category%20design/#_5","title":"\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u4e0d\u80fd\u88ab\u7ee7\u627f","text":"<ul> <li>C++98\u65b9\u5f0f</li> </ul> <pre><code>// C++98\u4e2d\u6784\u9020\u51fd\u6570\u79c1\u6709\u5316\uff0c\u6d3e\u751f\u7c7b\u4e2d\u8c03\u4e0d\u5230\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u5219\u65e0\u6cd5\u7ee7\u627f\nclass NonInherit\n{\npublic:\n static NonInherit GetInstance()\n {\n return NonInherit();\n }\nprivate:\n NonInherit()\n {}\n};\n</code></pre> <ul> <li>C++11\u65b9\u6cd5 final\u5173\u952e\u5b57\uff0cfinal\u4fee\u9970\u7c7b\uff0c\u8868\u793a\u8be5\u7c7b\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002</li> </ul> <pre><code>class A \u00a0final\n{\n \u00a0 \u00a0// ....\n};\n</code></pre>"},{"location":"C-C%2B%2B/Special%20category%20design/#_6","title":"\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u53ea\u80fd\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61(\u5355\u4f8b\u6a21\u5f0f)","text":"<p>\u997f\u6c49:\u4e00\u5f00\u59cb(main\u4e4b\u524d)\u5c31\u521b\u5efa\u51fa\u5bf9\u8c61 \u95ee\u9898: 1. \u5982\u679c\u5355\u4f8b\u5bf9\u8c61\u6570\u636e\u8f83\u591a,\u6784\u9020\u521d\u59cb\u5316\u6210\u672c\u8f83\u9ad8,\u90a3\u4e48\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u542f\u52a8\u7684\u901f\u5ea6,\u8fdf\u8fdf\u8fdb\u4e0d\u4e86main\u51fd\u6570 2. \u591a\u4e2a\u5355\u4f8b\u7c7b\u6709\u521d\u59cb\u5316\u542f\u52a8\u4f9d\u8d56\u5173\u7cfb,\u997f\u6c49\u65e0\u6cd5\u63a7\u5236\u3002\u5047\u8bbeA\u548cB\u4e24\u4e2a\u5355\u4f8b\uff0c\u5047\u8bbe\u8981\u6c42A\u5148\u521d\u59cb\u5316\uff0cB\u518d\u521d\u59cb\u5316\uff0c\u997f\u6c49\u65e0\u6cd5\u4fdd\u8bc1</p> <pre><code>class Singleton\n{\npublic:\n    static Singleton* GetInstance()\n    {\n        return &amp;_sint;\n    }\n\n    void Print() {\n        cout &lt;&lt; _x &lt;&lt; \" \" &lt;&lt; _y &lt;&lt; \" \";\n        for (auto&amp; e : _vstr)\n            cout &lt;&lt; e &lt;&lt; \" \";\n    }\n\n    void Addstr(string s) {\n        _vstr.push_back(s);\n    }\n    Singleton(const Singleton&amp;) = delete;\n    Singleton&amp; operator=(const Singleton&amp;) = delete;\nprivate:\n    Singleton(int x = 0, int y = 0, vector&lt;string&gt; vstr = { \"hello\", \"world\" })\n        :_x(x)\n        , _y(y)\n        , _vstr(vstr)\n    {}\n    int _x;\n    int _y;\n    vector&lt;string&gt; _vstr;\n    static Singleton _sint;\n};\nSingleton Singleton::_sint(1, 1, { \"\u56db\u5ddd\",\"\u5317\u4eac\" });\n</code></pre> <p>\u61d2\u6c49</p> <pre><code>class Singleton\n{\npublic:\n    static Singleton* GetInstance()\n    {\n        if (_psint == nullptr)\n            _psint = new Singleton;\n        return _psint;\n    }\n\n    void Print() {\n        cout &lt;&lt; _x &lt;&lt; \" \" &lt;&lt; _y &lt;&lt; \" \";\n        for (auto&amp; e : _vstr)\n            cout &lt;&lt; e &lt;&lt; \" \";\n    }\n\n    static void DelSingleton() {\n        if (_psint) {\n            delete _psint;\n            _psint = nullptr;\n        }\n    }\n\n    void Addstr(string s) {\n        _vstr.push_back(s);\n    }\n    Singleton(const Singleton&amp;) = delete;\n    Singleton&amp; operator=(const Singleton&amp;) = delete;\n\n\nprivate:\n    Singleton(int x = 0, int y = 0, vector&lt;string&gt; vstr = { \"hello\", \"world\" })\n        :_x(x)\n        , _y(y)\n        , _vstr(vstr)\n    {}\n\n    ~Singleton()\n    {\n        cout &lt;&lt; \"~Singleton()\" &lt;&lt; endl;\n    }\n    int _x;\n    int _y;\n    vector&lt;string&gt; _vstr;\n    static Singleton* _psint;\n\n    class GC {\n    public:\n        ~GC() {\n            Singleton::DelSingleton();\n        }\n    };\n    static GC gc;\n};\nSingleton* Singleton::_psint = nullptr;\nSingleton::GC Singleton::gc;\n</code></pre>"},{"location":"C-C%2B%2B/Template%20advanced/","title":"\u6a21\u7248\u8fdb\u9636","text":""},{"location":"C-C%2B%2B/Template%20advanced/#_2","title":"\u975e\u7c7b\u578b\u6a21\u677f\u53c2\u6570","text":"<p>\u6a21\u677f\u53c2\u6570\u5206\u7c7b\u7c7b\u578b\u5f62\u53c2\u4e0e\u975e\u7c7b\u578b\u5f62\u53c2\u3002 \u7c7b\u578b\u5f62\u53c2\u5373\uff1a\u51fa\u73b0\u5728\u6a21\u677f\u53c2\u6570\u5217\u8868\u4e2d\uff0c\u8ddf\u5728class\u6216\u8005typename\u4e4b\u7c7b\u7684\u53c2\u6570\u7c7b\u578b\u540d\u79f0\u3002 \u975e\u7c7b\u578b\u5f62\u53c2\uff0c\u5c31\u662f\u7528\u4e00\u4e2a\u5e38\u91cf\u4f5c\u4e3a\u7c7b(\u51fd\u6570)\u6a21\u677f\u7684\u4e00\u4e2a\u53c2\u6570\uff0c\u5728\u7c7b(\u51fd\u6570)\u6a21\u677f\u4e2d\u53ef\u5c06\u8be5\u53c2\u6570\u5f53\u6210\u5e38\u91cf\u6765\u4f7f\u7528\u3002</p> <p>C++\u91cc\u9762\u7684array\u5c31\u662f\u4e00\u4e2a\u5178\u578b\u7684\u975e\u7c7b\u578b\u6a21\u7248\u53c2\u6570</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\nusing namespace std;\n\nint main() {\n    array&lt;int, 10&gt; a1;\n    cout &lt;&lt; sizeof(a1) &lt;&lt; endl; // 40\n    return 0;\n}\n</code></pre> <p>array\u552f\u4e00\u7684\u4f18\u52bf\u5c31\u662f\u53ef\u4ee5\u8d8a\u754c\u68c0\u67e5\uff0c\u4f46\u662fvector\u4e5f\u5177\u6709\u8fd9\u4e2a\u7684\u529f\u80fd\uff0c\u800c\u4e14\u8fd8\u80fd\u521d\u59cb\u5316\u3002</p>"},{"location":"C-C%2B%2B/Template%20advanced/#_3","title":"\u51fd\u6570\u6a21\u7248\u7684\u7279\u5316","text":"<p>\u6982\u5ff5</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u6a21\u677f\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e9b\u4e0e\u7c7b\u578b\u65e0\u5173\u7684\u4ee3\u7801\uff0c\u4f46\u5bf9\u4e8e\u4e00\u4e9b\u7279\u6b8a\u7c7b\u578b\u7684\u53ef\u80fd\u4f1a\u5f97\u5230\u4e00\u4e9b\u9519\u8bef\u7684\u7ed3 \u679c\uff0c\u9700\u8981\u7279\u6b8a\u5904\u7406\uff0c\u6bd4\u5982\uff1a\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e13\u95e8\u7528\u6765\u8fdb\u884c\u5c0f\u4e8e\u6bd4\u8f83\u7684\u51fd\u6570\u6a21\u677f</p> <pre><code>// \u51fd\u6570\u6a21\u677f -- \u53c2\u6570\u5339\u914d\ntemplate&lt;class T&gt;\nbool Less(T left, T right)\n{\n return left &lt; right;\n}\nint main()\n{\n cout &lt;&lt; Less(1, 2) &lt;&lt; endl; // \u53ef\u4ee5\u6bd4\u8f83\uff0c\u7ed3\u679c\u6b63\u786e\n Date d1(2022, 7, 7);\n Date d2(2022, 7, 8);\n cout &lt;&lt; Less(d1, d2) &lt;&lt; endl; // \u53ef\u4ee5\u6bd4\u8f83\uff0c\u7ed3\u679c\u6b63\u786e\n Date* p1 = &amp;d1;\n Date* p2 = &amp;d2;\n cout &lt;&lt; Less(p1, p2) &lt;&lt; endl; // \u53ef\u4ee5\u6bd4\u8f83\uff0c\u7ed3\u679c\u9519\u8bef\n return 0;\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0cLess\u7edd\u5bf9\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u53ef\u4ee5\u6b63\u5e38\u6bd4\u8f83\uff0c\u4f46\u662f\u5728\u7279\u6b8a\u573a\u666f\u4e0b\u5c31\u5f97\u5230\u9519\u8bef\u7684\u7ed3\u679c\u3002\u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0cp1\u6307 \u5411\u7684d1\u663e\u7136\u5c0f\u4e8ep2\u6307\u5411\u7684d2\u5bf9\u8c61\uff0c\u4f46\u662fLess\u5185\u90e8\u5e76\u6ca1\u6709\u6bd4\u8f83p1\u548cp2\u6307\u5411\u7684\u5bf9\u8c61\u5185\u5bb9\uff0c\u800c\u6bd4\u8f83\u7684\u662fp1\u548cp2\u6307 \u9488\u7684\u5730\u5740\uff0c\u8fd9\u5c31\u65e0\u6cd5\u8fbe\u5230\u9884\u671f\u800c\u9519\u8bef\u3002 \u6b64\u65f6\uff0c\u5c31\u9700\u8981\u5bf9\u6a21\u677f\u8fdb\u884c\u7279\u5316\u3002\u5373\uff1a\u5728\u539f\u6a21\u677f\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u9488\u5bf9\u7279\u6b8a\u7c7b\u578b\u6240\u8fdb\u884c\u7279\u6b8a\u5316\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u6a21\u677f\u7279 \u5316\u4e2d\u5206\u4e3a\u51fd\u6570\u6a21\u677f\u7279\u5316\u4e0e\u7c7b\u6a21\u677f\u7279\u5316\u3002</p> <p>\u51fd\u6570\u6a21\u677f\u7279\u5316</p> <p>\u51fd\u6570\u6a21\u677f\u7684\u7279\u5316\u6b65\u9aa4\uff1a</p> <ol> <li> <p>\u5fc5\u987b\u8981\u5148\u6709\u4e00\u4e2a\u57fa\u7840\u7684\u51fd\u6570\u6a21\u677f</p> </li> <li> <p>\u5173\u952e\u5b57template\u540e\u9762\u63a5\u4e00\u5bf9\u7a7a\u7684\u5c16\u62ec\u53f7&lt;&gt;</p> </li> <li> <p>\u51fd\u6570\u540d\u540e\u8ddf\u4e00\u5bf9\u5c16\u62ec\u53f7\uff0c\u5c16\u62ec\u53f7\u4e2d\u6307\u5b9a\u9700\u8981\u7279\u5316\u7684\u7c7b\u578b</p> </li> <li> <p>\u51fd\u6570\u5f62\u53c2\u8868: \u5fc5\u987b\u8981\u548c\u6a21\u677f\u51fd\u6570\u7684\u57fa\u7840\u53c2\u6570\u7c7b\u578b\u5b8c\u5168\u76f8\u540c\uff0c\u5982\u679c\u4e0d\u540c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u62a5\u4e00\u4e9b\u5947\u602a\u7684\u9519\u8bef\u3002</p> </li> </ol> <pre><code>// \u51fd\u6570\u6a21\u677f -- \u53c2\u6570\u5339\u914d\ntemplate&lt;class T&gt;\nbool Less(T left, T right)\n{\n return left &lt; right;\n}\n// \u5bf9Less\u51fd\u6570\u6a21\u677f\u8fdb\u884c\u7279\u5316\ntemplate&lt;&gt;\nbool Less&lt;Date*&gt;(Date* left, Date* right)\n{\n     return *left &lt; *right;\n}\n</code></pre> <p>\u6ce8\u610f\uff1a\u4e00\u822c\u60c5\u51b5\u4e0b\u5982\u679c\u51fd\u6570\u6a21\u677f\u9047\u5230\u4e0d\u80fd\u5904\u7406\u6216\u8005\u5904\u7406\u6709\u8bef\u7684\u7c7b\u578b\uff0c\u4e3a\u4e86\u5b9e\u73b0\u7b80\u5355\u901a\u5e38\u90fd\u662f\u5c06\u8be5\u51fd\u6570\u76f4\u63a5\u7ed9 \u51fa\u3002</p> <p>\u8be5\u79cd\u5b9e\u73b0\u7b80\u5355\u660e\u4e86\uff0c\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u9ad8\uff0c\u5bb9\u6613\u4e66\u5199\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e9b\u53c2\u6570\u7c7b\u578b\u590d\u6742\u7684\u51fd\u6570\u6a21\u677f\uff0c\u7279\u5316\u65f6\u7279\u522b\u7ed9 \u51fa\uff0c\u56e0\u6b64\u51fd\u6570\u6a21\u677f\u4e0d\u5efa\u8bae\u7279\u5316\u3002</p>"},{"location":"C-C%2B%2B/Template%20advanced/#_4","title":"\u7c7b\u6a21\u7248\u7279\u5316","text":"<p>1.\u5168\u7279\u5316</p> <p>\u5168\u7279\u5316\u5373\u662f\u5c06\u6a21\u677f\u53c2\u6570\u5217\u8868\u4e2d\u6240\u6709\u7684\u53c2\u6570\u90fd\u786e\u5b9a\u5316\u3002</p> <pre><code>template&lt;class T1, class T2&gt;\nclass Data\n{\npublic:\n Data() {cout&lt;&lt;\"Data&lt;T1, T2&gt;\" &lt;&lt;endl;}\nprivate:\n T1 _d1;\n T2 _d2;\n};\ntemplate&lt;&gt;\nclass Data&lt;int, char&gt;\n{\npublic:\n Data() {cout&lt;&lt;\"Data&lt;int, char&gt;\" &lt;&lt;endl;}\nprivate:\n int _d1;\n char _d2;\n};\n</code></pre> <p>2.\u504f\u7279\u5316 \u504f\u7279\u5316\u6709\u4ee5\u4e0b\u4e24\u79cd\u8868\u73b0\u65b9\u5f0f\uff1a + \u90e8\u5206\u7279\u5316</p> <pre><code>// \u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7279\u5316\u4e3aint\ntemplate &lt;class T1&gt;\nclass Data&lt;T1, int&gt;\n{\npublic:\n Data() {cout&lt;&lt;\"Data&lt;T1, int&gt;\" &lt;&lt;endl;}\nprivate:\n T1 _d1;\n int _d2;\n}; \n</code></pre> <p>\u53c2\u6570\u66f4\u8fdb\u4e00\u6b65\u7684\u9650\u5236</p> <p>\u504f\u7279\u5316\u5e76\u4e0d\u4ec5\u4ec5\u662f\u6307\u7279\u5316\u90e8\u5206\u53c2\u6570\uff0c\u800c\u662f\u9488\u5bf9\u6a21\u677f\u53c2\u6570\u66f4\u8fdb\u4e00\u6b65\u7684\u6761\u4ef6\u9650\u5236\u6240\u8bbe\u8ba1\u51fa\u6765\u7684\u4e00\u4e2a\u7279\u5316\u7248\u672c\u3002\u53ef\u4ee5\u7ba1\u7406\u6307\u9488</p> <pre><code>//\u4e24\u4e2a\u53c2\u6570\u504f\u7279\u5316\u4e3a\u6307\u9488\u7c7b\u578b\ntemplate &lt;class T1, class T2&gt;\nclass Data &lt;T1*, T2*&gt;\n{ \npublic:\n Data() {cout&lt;&lt;\"Data&lt;T1*, T2*&gt;\" &lt;&lt;endl;}\n\nprivate:\n T1 _d1;\n T2 _d2;\n};\n\n//\u4e24\u4e2a\u53c2\u6570\u504f\u7279\u5316\u4e3a\u5f15\u7528\u7c7b\u578b\ntemplate &lt;typename T1, typename T2&gt;\nclass Data &lt;T1&amp;, T2&amp;&gt;\n{\npublic:\n Data(const T1&amp; d1, const T2&amp; d2)\n : _d1(d1)\n , _d2(d2)\n {\n cout&lt;&lt;\"Data&lt;T1&amp;, T2&amp;&gt;\" &lt;&lt;endl;\n }\n\nprivate:\n const T1 &amp; _d1;\n const T2 &amp; _d2; \n };\n</code></pre> <p>\u5339\u914d\u987a\u5e8f: \u5168\u7279\u5316 &gt; \u504f\u7279\u5316 &gt; \u539f\u6a21\u7248, \u7279\u5316\u662f\u5efa\u7acb\u5728\u539f\u6a21\u7248\u4e4b\u4e0a,\u5426\u5219\u7279\u5316\u65e0\u6548</p> <p>\u5751\uff1a\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u5199\u6210\u8fd9\u6837</p> <pre><code>template &lt;class T1, class T2&gt;\nclass Data &lt;T1*, T2*&gt;\n{\npublic:\n Data(const T1*&amp; d1, const T2*&amp; d2)\n : _d1(d1)\n , _d2(d2)\n {\n    cout&lt;&lt;\"Data&lt;T1&amp;, T2&amp;&gt;\" &lt;&lt;endl;\n } \nprivate:\n const T1 &amp; _d1;\n const T2 &amp; _d2; \n};\n</code></pre> <p>\u56e0\u4e3aData\u8f6c\u6362\u6210const Data \u6743\u9650\u7f29\u5c0f, \u4f1a\u4ea7\u751f\u4e34\u65f6\u53d8\u91cf, \u4e34\u65f6\u53d8\u91cf\u5177\u6709\u5e38\u6570\u9879\u6240\u4ee5\u4e0d\u80fd\u88ab\u5f15\u7528\u3002 \u5199\u6210Data(const T1 const&amp; d1, const T2 const&amp; d2)\u624d\u884c,\u4f46\u662f\u6700\u597d\u4e0d\u8981\u5199\u8fd9\u6837</p>"},{"location":"C-C%2B%2B/Template%20advanced/#_5","title":"\u6a21\u677f\u5206\u79bb\u7f16\u8bd1","text":"<p>\u4ec0\u4e48\u662f\u5206\u79bb\u7f16\u8bd1</p> <p>\u4e00\u4e2a\u7a0b\u5e8f\uff08\u9879\u76ee\uff09\u7531\u82e5\u5e72\u4e2a\u6e90\u6587\u4ef6\u5171\u540c\u5b9e\u73b0\uff0c\u800c\u6bcf\u4e2a\u6e90\u6587\u4ef6\u5355\u72ec\u7f16\u8bd1\u751f\u6210\u76ee\u6807\u6587\u4ef6\uff0c\u6700\u540e\u5c06\u6240\u6709\u76ee\u6807\u6587\u4ef6\u94fe \u63a5\u8d77\u6765\u5f62\u6210\u5355\u4e00\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8fc7\u7a0b\u79f0\u4e3a\u5206\u79bb\u7f16\u8bd1\u6a21\u5f0f\u3002</p> <p>\u6a21\u677f\u7684\u5206\u79bb\u7f16\u8bd1</p> <p>\u5047\u5982\u6709\u4ee5\u4e0b\u573a\u666f\uff0c\u6a21\u677f\u7684\u58f0\u660e\u4e0e\u5b9a\u4e49\u5206\u79bb\u5f00\uff0c\u5728\u5934\u6587\u4ef6\u4e2d\u8fdb\u884c\u58f0\u660e\uff0c\u6e90\u6587\u4ef6\u4e2d\u5b8c\u6210\u5b9a\u4e49\uff1a</p> <pre><code>// a.h\ntemplate&lt;class T&gt;\nT Add(const T&amp; left, const T&amp; right);\n// a.cpp\ntemplate&lt;class T&gt;\nT Add(const T&amp; left, const T&amp; right)\n{\n return left + right;\n}\n</code></pre> <p>\u5728\u8c03\u7528Add\u65f6\u7f16\u8bd1\u5668\u5728\u94fe\u63a5\u65f6\u624d\u4f1a\u627e\u5176\u5730\u5740,\u4f46\u662f\u8fd9\u4e24\u4e2a\u51fd\u6570\u6ca1\u6709\u5b9e\u4f8b\u5316\u6ca1\u6709\u751f\u6210\u5177\u4f53\u4ee3\u7801,\u56e0\u6b64\u94fe\u63a5\u65f6\u62a5\u9519\u3002</p> <p>\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u5728\u7f16\u8bd1\u65f6\u53bb\u641c\u7d22\u6587\u4ef6\u9700\u8981\u4ec0\u4e48\u7c7b\u578b\u5462\uff1f\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5927\u5927\u964d\u4f4e\u6a21\u7248\u7684\u6548\u7387,\u5982\u679c\u6587\u4ef6\u5185\u5bb9\u8fc7\u5927\uff0c\u4f1a\u8017\u8d39\u8bb8\u591a\u65f6\u95f4.</p> <p>\u89e3\u51b3\u529e\u6cd5 + 1.\u76f4\u63a5\u5b9a\u4e49\u5728.h -&gt; \u8c03\u7528\u7684\u5730\u65b9,\u76f4\u63a5\u5c31\u6709\u5b9a\u4e49,\u76f4\u63a5\u5b9e\u4f8b\u5316,\u4e0d\u9700\u8981\u94fe\u63a5\u65f6\u518d\u53bb\u627e + 2.\u6a21\u7248\u7c7b\u578b\u663e\u793a\u5b9e\u4f8b\u5316</p> <pre><code>// a.h\ntemplate\nint Add&lt;int&gt;(const int&amp;, const int&amp;);\n</code></pre> <p>\u90a3\u4e48\u8fd9\u6837\u6a21\u7248\u5c31\u6ca1\u6709\u610f\u4e49\u4e86,\u4e0d\u5982\u76f4\u63a5\u81ea\u5df1\u5b9a\u4e49,\u5f88\u632b.</p>"},{"location":"C-C%2B%2B/Template%20advanced/#_6","title":"\u6a21\u7248\u603b\u7ed3","text":"<p>\u6a21\u7248\u7684\u672c\u8d28\u662f\uff0c\u672c\u6765\u5e94\u8be5\u7531\u4f60\u5199\u7684\u591a\u4efd\u4ee3\u7801\u3002\u73b0\u5728\u4e0d\u9700\u8981\u4f60\u91cd\u590d\u5199\u4e86\uff0c\u4f60\u63d0\u4f9b\u4e00\u4e2a\u6a21\u7248\uff0c\u7f16\u8bd1\u5668\u6839\u636e\u4f60\u7684\u5b9e\u4f8b\u5316\uff0c\u5e2e\u4f60\u53bb\u5199\u51fa\u6765\u3002</p> <p>\u4f18\u70b9</p> <p>1.\u6a21\u677f\u590d\u7528\u4e86\u4ee3\u7801\uff0c\u8282\u7701\u8d44\u6e90\uff0c\u66f4\u5feb\u7684\u8fed\u4ee3\u5f00\u53d1\uff0cC++\u7684\u6807\u51c6\u6a21\u677f\u5e93(STL)\u56e0\u6b64\u800c\u4ea7\u751f</p> <p>2.\u589e\u5f3a\u4e86\u4ee3\u7801\u7684\u7075\u6d3b\u6027</p> <p>\u7f3a\u9677</p> <p>1.\u6a21\u677f\u4f1a\u5bfc\u81f4\u4ee3\u7801\u81a8\u80c0\u95ee\u9898\uff0c\u4e5f\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u65f6\u95f4\u53d8\u957f</p> <p>2.\u51fa\u73b0\u6a21\u677f\u7f16\u8bd1\u9519\u8bef\u65f6\uff0c\u9519\u8bef\u4fe1\u606f\u975e\u5e38\u51cc\u4e71\uff0c\u4e0d\u6613\u5b9a\u4f4d\u9519\u8bef</p> <p>\u7f16\u8bd1\u9519\u8bef\u4e0d\u597d\u5b9a\u4f4d\u53d1\u73b0,\u6700\u4f73\u5b9e\u8df5\u65b9\u6848:\u6392\u9664\u6cd5,\u4e00\u6bb5\u4e00\u6bb5\u6ce8\u91ca.\u65e5\u5e38,\u5efa\u8bae\u5199\u4e00\u90e8\u5206,\u7f16\u8bd1\u4e00\u90e8\u5206.</p>"},{"location":"C-C%2B%2B/hash/","title":"\u54c8\u5e0c","text":""},{"location":"C-C%2B%2B/hash/#_2","title":"\u6982\u5ff5","text":"<p>\u5b58\u50a8\u7684\u503c\u548c\u5b58\u50a8\u4f4d\u7f6e\u7684\u6620\u5c04\u7684\u5173\u8054\u5173\u7cfb</p>"},{"location":"C-C%2B%2B/hash/#_3","title":"\u5e38\u89c1\u7684\u54c8\u5e0c\u51fd\u6570\uff1a","text":"<p>1.\u76f4\u63a5\u5b9a\u5740\u6cd5--(\u5e38\u7528)</p> <p>\u53d6\u5173\u952e\u5b57\u7684\u67d0\u4e2a\u7ebf\u6027\u51fd\u6570\u4e3a\u6563\u5217\u5730\u5740\uff1aHash\uff08Key\uff09= A*Key + B</p> <p>\u4f18\u70b9\uff1a\u7b80\u5355\u3001\u5747\u5300</p> <p>\u7f3a\u70b9\uff1a\u9700\u8981\u4e8b\u5148\u77e5\u9053\u5173\u952e\u5b57\u7684\u5206\u5e03\u60c5\u51b5</p> <p>\u4f7f\u7528\u573a\u666f\uff1a\u9002\u5408\u67e5\u627e\u6bd4\u8f83\u5c0f\u4e14\u8fde\u7eed\u7684\u60c5\u51b5</p> <p>2.\u9664\u7559\u4f59\u6570\u6cd5--(\u5e38\u7528)</p> <p>\u8bbe\u6563\u5217\u8868\u4e2d\u5141\u8bb8\u7684\u5730\u5740\u6570\u4e3am\uff0c\u53d6\u4e00\u4e2a\u4e0d\u5927\u4e8em\uff0c\u4f46\u6700\u63a5\u8fd1\u6216\u8005\u7b49\u4e8em\u7684\u8d28\u6570p\u4f5c\u4e3a\u9664\u6570\uff0c</p> <p>\u6309\u7167\u54c8\u5e0c\u51fd\u6570\uff1aHash(key) = key% p(p&lt;=m),\u5c06\u5173\u952e\u7801\u8f6c\u6362\u6210\u54c8\u5e0c\u5730\u5740</p> <p>3.\u521b\u5efa\u4e00\u4e2a\u54c8\u5e0c\u8868</p> <pre><code>enum State {\n    EMPTY,\n    EXIST,\n    DELETE\n};\n\ntemplate&lt;class K, class V&gt;\nstruct HashData {\n    pair&lt;K, V&gt; _kv;\n    State _state = EMPTY;\n};\n\ntemplate&lt;class K, class V&gt;\nstruct HashTable {\npublic:\nprivate:\n    vector&lt;HashData&lt;K, V&gt;&gt; _tables;\n    size_t n = 0;\n};\n</code></pre>"},{"location":"C-C%2B%2B/hash/#_4","title":"\u54c8\u5e0c\u51b2\u7a81\u89e3\u51b3","text":"<p>a. \u95ed\u6563\u5217\u5f00\u653e\u5b9a\u5740\u6cd5(\u672c\u8d28\u662f\u5f53\u524d\u4f4d\u7f6e\u51b2\u7a81\u4e86,\u540e\u9762\u627e\u4e00\u4e2a\u5408\u9002\u7684\u4f4d\u7f6e\u7ee7\u7eed\u5b58\u50a8(x: \u7ebf\u6027\u63a2\u6d4b y: \u4e8c\u6b21\u63a2\u6d4b))</p> <p>b. \u5f00\u6563\u5217\u62c9\u94fe\u6cd5/\u54c8\u5e0c\u6876</p>"},{"location":"C-C%2B%2B/hash/#_5","title":"\u7ebf\u6027\u63a2\u6d4b\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81","text":"<p>\u63d2\u5165\uff1a</p> <p>i = key % \u8868\u7684\u5927\u5c0f</p> <p>\u5982\u679ci\u4f4d\u7f6e\u5df2\u7ecf\u6709\u503c\u4e86,\u5c31\u5f80\u540e\u8d70\u627e\u7a7a\u4f4d\u7f6e,\u653e\u8fdb\u53bb</p> <p>\u67e5\u627e:</p> <p>i = key % \u8868\u7684\u5927\u5c0f</p> <p>\u5982\u679ci\u4f4d\u4e0d\u662f\u8981\u67e5\u627e\u7684key\u5c31\u5f80\u540e\u67e5\u627e,\u76f4\u5230\u627e\u5230\u6216\u8005\u9047\u5230\u7a7a</p> <p>\u5982\u679c\u627e\u5230\u8868\u7ed3\u5c3e\u4f4d\u7f6e,\u8981\u5f80\u5934\u56de\u7ed5</p> <p>\u54c8\u5e0c\u51b2\u7a81\u8d8a\u591a,\u6548\u7387\u5c31\u8d8a\u4f4e</p> <p>\u8d1f\u8f7d\u56e0\u5b50/\u8f7d\u8377\u56e0\u5b50 = \u5b9e\u9645\u5b58\u8fdb\u53bb\u7684\u6570\u636e\u4e2a\u6570/\u8868\u7684\u5927\u5c0f</p> <p>\u95ed\u6563\u5217\uff08\u5f00\u653e\u5b9a\u5740\u6cd5\uff09:\u4e00\u822c\u4f1a\u63a7\u5236\u57280.7\u5de6\u53f3</p>"},{"location":"C-C%2B%2B/hash/#insert","title":"\u7ebf\u6027\u63a2\u6d4b\u7684\u63d2\u5165Insert","text":"<p>\u5148\u770bFind\u91cc\u9762\u6709\u6ca1\u6709Key,\u6709\u7684\u8bdd\u5c31\u7ed3\u675f\u63d2\u5165\u3002</p> <p>\u4f46\u662f\u5728\u6620\u5c04key\u7684\u54c8\u5e0c\u503c\u65f6\uff0c\u5982\u679c\u662fint\u90a3\u5c31\u597d\u529e,\u5982\u679c\u662fstring\u7c7b\u578b\u600e\u4e48\u529e\u5450\uff1f</p> <p>\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u8981\u5199\u5199\u4e00\u4e2a\u54c8\u5e0c\u4eff\u51fd\u6570, \u56e0\u4e3astring\u6bd4\u8f83\u5e38\u7528\uff0c\u6211\u4eec\u628astring\u7279\u5316\u4e00\u4e0b</p> <pre><code>template &lt;class K&gt; \nstruct HashFunc {\n    size_t operator()(const K&amp; key) {\n        return (size_t)key;\n    }\n};\n\ntemplate&lt;&gt;\nstruct HashFunc &lt;string&gt; {\n    size_t operator ()(const string&amp; s) {\n        size_t hash = 0;\n        for (auto e : s) {\n            hash += e;\n            hash *= 131;\n        }\n        return hash;\n    }\n};\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u5c31\u53ef\u4ee5\u5199Find\u51fd\u6570\u4e86</p> <pre><code>HashData&lt;K, V&gt;* Find(const K&amp; key) {\n    Hash hs;\n    size_t hashi = hs(key) % _tables.size();\n    while (_tables[hashi]._state != EMPTY) {\n        if (_tables[hashi]._kv.first == key\n            &amp;&amp; _tables[hashi]._state == EXIST) {\n            return &amp;_tables[hashi];\n        }\n        hashi++;\n        hashi %= _tables.size();\n    }\n    return nullptr;\n}\n</code></pre> <p>\u518d\u6765\u5199Insert\u63d2\u5165,\u8fd9\u91cc\u8d1f\u8f7d\u56e0\u5b50\u5927\u4e8e0.7\u5c31\u53bb\u6269\u5bb9,\u4fdd\u8bc1\u4e0d\u6ee1,\u4e14\u4e0d\u4f1a\u6b7b\u9012\u5f52</p> <pre><code>bool Insert(const pair&lt;K, V&gt; kv) {\n    if (Find(kv.first))\n        return false;\n    if (_n * 10 / _tables.size() &gt;= 7) { // \u6ce8\u610f\u8fd9\u91cc\u662fsize,\u800c\u4e0d\u662fcapacity\n        HashTable&lt;K, V, Hash&gt; NewHT(_tables.size() * 2);\n        for (auto&amp; e : _tables)\n            if (e._state == EXIST) // \u5b58\u5728\u624d\u52a0\u5165\n                NewHT.Insert(e._kv); // \u63d2\u5165e._kv\n        _tables.swap(NewHT._tables); // \u4ea4\u6362tables\u5373\u53ef\n    }\n    Hash hs;\n    size_t hashi = hs(kv.first) % _tables.size();\n    while (_tables[hashi]._state == EXIST) {\n        hashi++;\n        hashi %= _tables.size();\n    }\n    _tables[hashi]._kv = kv;\n    _tables[hashi]._state = EXIST;\n    ++_n; // \u6700\u540e\u8bb0\u5f97++_n\u4e2a\u6570\n    return true; // \u6700\u540e\u8bb0\u5f97\u8fd4\u56detrue\n}\n</code></pre>"},{"location":"C-C%2B%2B/hash/#erase","title":"\u7ebf\u6027\u63a2\u6d4b\u7684\u5220\u9664Erase","text":"<p>Erase\u53ea\u9700\u628a\u5b58\u5728\u7684\u72b6\u6001\u8bbe\u7f6e\u6210DELETE</p> <pre><code>bool Erase(const K&amp; key) {\n    HashData&lt;K, V&gt;* ret = Find(key);\n    if (ret) {\n        --_n;\n        ret-&gt;_state = DELETE;\n        return true;\n    }\n    else\n        return false;\n}\n</code></pre>"},{"location":"C-C%2B%2B/hash/#_6","title":"\u54c8\u5e0c\u6876\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81","text":"<p>\u9996\u5148\u521b\u9020\u4e00\u4e2a\u8282\u70b9,\u4e3a\u94fe\u8868</p> <pre><code>struct HashNode {\n    HashNode&lt;K, V&gt;* _next;\n    pair&lt;K, V&gt; _kv;\n    HashNode(const pair&lt;K, V&gt; kv) //\u8bb0\u5f97\u5217\u8868\u521d\u59cb\u5316\n        :_next(nullptr)\n        ,_kv(kv)\n    {}\n};\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2aHash\u8868\uff0c\u52a0\u4e0a\u9ed8\u8ba4\u6784\u9020\u51fd\u6570</p> <pre><code>template&lt;class K, class V&gt;\nstruct HashTable {\n    typedef HashNode Node;\n    HashTable() {\n        _tables.resize(10, nullptr);\n    }\n\nprivate:\n    vector&lt;Node*&gt; _tables;\n    size_t n = 0;\n};\n</code></pre> <p>\u6dfb\u52a0\u4eff\u51fd\u6570</p> <pre><code>template &lt;class K&gt;\nstruct HashFunc {\n    size_t operator()(const K&amp; key) {\n        return (size_t)key;\n    }\n};\n\ntemplate&lt;&gt;\nstruct HashFunc &lt;string&gt; {\n    size_t operator ()(const string&amp; s) {\n        size_t hash = 0;\n        for (auto e : s) {\n            hash += e;\n            hash *= 131;\n        }\n        return hash;\n    }\n};\ntemplate&lt;class K, class V, class Hash = HashFunc&lt;K&gt;&gt;\n</code></pre> <p>\u5199\u4e00\u4e2aFind\u51fd\u6570\uff0c\u770btables\u91cc\u9762\u6709\u6ca1\u6709\u91cd\u590d\uff0c\u8fd9\u6837\u53ef\u4ee5\u9632\u6b62\u540e\u9762\u518d\u53bb\u67e5\u627e\u662f\u5426\u542b\u6709\u8fd9\u4e2a\u5143\u7d20</p> <pre><code>Node* Find(const K&amp; key) {\n    Hash hs;\n    size_t hashi = hs(key) % _tables.size();\n    Node* cur = _tables[hashi];\n    while (cur) {\n        if (cur-&gt;_kv.first == key)\n            return cur;\n        cur = cur-&gt;_next;\n    }\n    return nullptr;\n}\n</code></pre> <p>\u518d\u5199\u4e00\u4e2a\u6790\u6784\u51fd\u6570,\u4fdd\u8bc1\u53ef\u6790\u6784</p> <pre><code>~HashTable() {\n    for (int i = 0; i &lt; _tables.size(); ++i) {\n        Node* cur = _tables[i];\n        while (cur) {\n            Node* next = cur-&gt;_next;\n            delete cur;\n            cur = next;\n        }\n        _tables[i] = nullptr;\n    }\n}\n</code></pre>"},{"location":"C-C%2B%2B/hash/#insert_1","title":"\u54c8\u5e0c\u6876\u7684Insert\u63d2\u5165\u51fd\u6570","text":"<pre><code>bool Insert(const pair&lt;K, V&gt; kv) {\n    if (Find(kv.first))\n        return false;\n    Hash hs;\n    if (_n == _tables.size()) {\n        vector&lt;Node*&gt; NewHT(_tables.size() * 2, nullptr);\n        for (int i = 0; i &lt; _tables.size(); ++i) {\n            Node* cur = _tables[i];\n            while (cur) {\n                Node* next = cur-&gt;_next;\n                size_t hashi = hs(cur-&gt;_kv.first) % NewHT.size(); // \u9700\u8981hs\u4e00\u4e0bfirst\n                cur-&gt;_next = NewHT[hashi];//\u76f4\u63a5\u7528cur\u6765\u94fe\u63a5\uff0c\u4e0d\u9700\u8981\u81ea\u5df1newnode\n                NewHT[hashi] = cur;\n                cur = next;\n            }\n            _tables[i] = nullptr;\n        }\n        _tables.swap(NewHT);\n    }\n    size_t hashi = hs(kv.first) % _tables.size();\n    Node* newnode = new Node(kv);\n    newnode-&gt;_next = _tables[hashi];\n    _tables[hashi] = newnode;\n    ++_n; //\u4e0d\u8981\u5fd8\u8bb0++_n\n    return true;\n}\n</code></pre>"},{"location":"C-C%2B%2B/hash/#erase_1","title":"\u54c8\u5e0c\u6876\u7684Erase\u5220\u9664\u51fd\u6570","text":"<pre><code>bool Erase(const K&amp; key) {\n    Hash hs;\n    size_t hashi = hs(key) % _tables.size();\n    Node* prev = nullptr;\n    Node* cur = _tables[hashi];\n    while (cur) {\n        if (cur-&gt;_kv.first == key) {\n            if (prev)\n                prev-&gt;_next = cur-&gt;_next;\n            else\n                _tables[hashi] = cur-&gt;_next;\n            delete cur; // \u8bb0\u5f97delete cur\u548c--_n\n            --_n;\n            return true;\n        }\n        prev = cur;\n        cur = cur-&gt;_next;\n    }\n    return false;\n}\n</code></pre>"},{"location":"C-C%2B%2B/hash/#umapset","title":"\u54c8\u5e0c\u5c01\u88c5umap\u3001set","text":"<p>\u6839\u636e\u7ea2\u9ed1\u6811\u5c01\u88c5map\u548cset\u7684\u65f6\u5019\uff0c\u9700\u8981\u7528\u4e00\u4e2a\u7ea2\u9ed1\u6811\u6765\u5c01\u88c5map\u548cset</p> <p>\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u4f9d\u7136\u7528\u4e00\u4e2a\u54c8\u5e0c\u8868\u6765\u5c01\u88c5unordered_map\u3001unordered_set</p>"},{"location":"C-C%2B%2B/hash/#hashnode","title":"\u521b\u5efa\u4e00\u4e2aHashNode","text":"<pre><code>template&lt;class T&gt;\nstruct HashNode {\n    HashNode&lt;T&gt;* _next;\n    T _data;\n    HashNode(const T data)\n        :_next(nullptr)\n        , _data(data)\n    {}\n};\n</code></pre>"},{"location":"C-C%2B%2B/hash/#__htiterator","title":"\u521b\u5efa\u4e00\u4e2a__HTIterator","text":"<pre><code>template&lt;class K, class T, class KeyOfT, class Hash&gt;\nstruct __HTIterator {\n    typedef HashNode&lt;T&gt; Node;\n    typedef HashTable&lt;K, T, KeyOfT, Hash&gt; HT;\n    typedef __HTIterator&lt;K, T, KeyOfT, Hash&gt; Self;\n\n    Node* _node;\n    HT* _ht;//HT*\n\n    __HTIterator(Node* node, HT* ht) \n        :_node(node)\n        ,_ht(ht)\n    {}\n    T&amp; operator*() {//T&amp;\n        return _node-&gt;_data;\n    }\n    Self&amp; operator++() {\n        if (_node-&gt;_next) {\n            _node =  _node-&gt;_next;\n        }\n        else {\n            Hash hs;\n            KeyOfT kot;\n            size_t hashi = hs(kot(cur-&gt;_data)) % _ht-&gt;_tables.size();//-&gt;\n            hashi++;\n            while (hashi &lt; _ht-&gt;_tables.size()) {\n                if (_ht-&gt;_tables[hashi]) {\n                    _node = _ht-&gt;_tables[hashi];\n                    break;\n                }\n                hashi++;\n            }\n\n            if (hashi == _ht-&gt;_tables.size())\n                _node = nullptr;\n        }\n        return *this;\n    }\n\n    bool operator!=(const Self&amp; s) {\n        return _node != s._node;\n    }\n};\n</code></pre>"},{"location":"C-C%2B%2B/hash/#hashtablekeyoft","title":"\u628aHashTable\u7528KeyOfT\u6539\u4e00\u4e0b","text":"<pre><code>template&lt;class K, class T, class KeyOfT, class Hash&gt;\nstruct HashTable {\n    typedef HashNode&lt;T&gt; Node;\n    public:\n    typedef __HTIterator&lt;K, T, KeyOfT, Hash&gt; iterator;\n\n    iterator begin() {\n        for (int i = 0; i &lt; _tables.size(); ++i) {\n            if (_tables[i]) {\n                return iterator(_tables[i], this);\n            }\n        }\n        return end();\n    }\n\n    iterator end() {\n        return iterator(nullptr, this);\n    }\n\n    HashTable() {\n        _tables.resize(10, nullptr);\n        _n = 0; // _n = 0 \u4e0d\u8981\u5fd8\u8bb0\n    }\n\n    ~HashTable() {\n        for (int i = 0; i &lt; _tables.size(); ++i) {\n            Node* cur = _tables[i];\n            while (cur) {\n                Node* next = cur-&gt;_next;\n                delete cur;\n                cur = next;\n            }\n            _tables[i] = nullptr;\n        }\n    }\n\n    bool Insert(const T&amp; data) { //T&amp;\n        KeyOfT kot;\n        if (Find(kot(data)))\n            return false;\n        Hash hs;\n        if (_n == _tables.size()) {\n            vector&lt;Node*&gt; NewHT(_tables.size() * 2, nullptr);\n            for (int i = 0; i &lt; _tables.size(); ++i) {\n                Node* cur = _tables[i];\n                while (cur) {\n                    Node* next = cur-&gt;_next;\n                    size_t hashi = hs(kot(cur-&gt;_data)) % NewHT.size(); // \u9700\u8981hs\u4e00\u4e0bfirst\n                    cur-&gt;_next = NewHT[hashi];//\u76f4\u63a5\u7528cur\u6765\u94fe\u63a5\uff0c\u4e0d\u9700\u8981\u81ea\u5df1newnode\n                    NewHT[hashi] = cur;\n                    cur = next;\n                }\n                _tables[i] = nullptr;\n            }\n            _tables.swap(NewHT);\n        }\n        size_t hashi = hs(kot(data)) % _tables.size();\n        Node* newnode = new Node(data);\n        newnode-&gt;_next = _tables[hashi];\n        _tables[hashi] = newnode;\n        ++_n;\n        return true;\n    }\n\n    Node* Find(const K&amp; key) {\n        KeyOfT kot;\n        Hash hs;\n        size_t hashi = hs(key) % _tables.size();\n        Node* cur = _tables[hashi];\n        while (cur) {\n            if (kot(cur-&gt;_data) == key)\n                return cur;\n            cur = cur-&gt;_next;\n        }\n        return nullptr;\n    }\n\n    bool Erase(const K&amp; key) {\n        KeyOfT kot;\n        Hash hs;\n        size_t hashi = hs(key) % _tables.size();\n        Node* prev = nullptr;\n        Node* cur = _tables[hashi];\n        while (cur) {\n            if (kot(cur-&gt;_data) == key) {\n                if (prev)\n                    prev-&gt;_next = cur-&gt;_next;\n                else\n                    _tables[hashi] = cur-&gt;_next;\n                delete cur; // \u8bb0\u5f97delete cur\u548c--_n\n                --_n;\n                return true;\n            }\n            prev = cur;\n            cur = cur-&gt;_next;\n        }\n        return false;\n    }\nprivate:\n    vector&lt;Node*&gt; _tables;\n    size_t _n;\n};\n</code></pre>"},{"location":"C-C%2B%2B/hash/#myordered_seth","title":"\u6dfb\u52a0\u4e00\u4e2aMyOrdered_set.h","text":"<pre><code>#include \"HashTable.h\"\n\nnamespace lkt {\n    template &lt;class K, class Hash = HashFunc&lt;K&gt;&gt; \n    class unordered_set {\n        struct SetKeyOfT\n        {\n            const K&amp; operator()(const K&amp; key) {\n                return key;\n            }\n        };\n        typedef typename lkt2::HashTable&lt;K, const K, SetKeyOfT, Hash&gt;::iterator iterator;\n        iterator begin() {\n            return  _ht.begin();\n        }\n\n        iterator end() {\n            return _ht.end();\n        }\n\n        bool Insert(const K&amp; key) {\n            return _ht.Insert(key);\n        }\n    private:\n        lkt2::HashTable&lt;K, V, SetKeyOfT, Hash&gt; _ht;\n    };\n}\n\n</code></pre> <p>\u5728__HTIterator\u524d\u6dfb\u52a0\uff0c\u524d\u7f6e\u58f0\u660e</p> <pre><code>template&lt;class K, class T, class KeyOfT, class Hash&gt;\nstruct HashTable;\n</code></pre> <p>\u5728HashTab\u91cc\u9762\u53cb\u5143\u4e00\u4e2a</p> <pre><code>template&lt;class K, class T, class KeyOfT, class Hash&gt;\nfriend struct __HTIterator;\n</code></pre>"},{"location":"C-C%2B%2B/hash/#myordered_maph","title":"\u6dfb\u52a0\u4e00\u4e2aMyOrdered_map.h","text":"<pre><code>#include \"HashTable.h\"\nnamespace lkt {\n    template &lt;class K, class V, class Hash = HashFunc&lt;K&gt;&gt;\n    class unordered_map {\n        struct MapKeyOfT {\n            const K&amp; operator()(const pair&lt;K, V&gt;&amp; kv) {\n                return kv.first;\n            }\n        };\n    public:\n        typedef typename lkt2::HashTable&lt;K, pair&lt;const K, V&gt;, MapKeyOfT, Hash&gt;::iterator iterator;\n        iterator begin() {\n            return _ht.begin();\n        }\n\n        iterator end() {\n            return _ht.end();\n        }\n\n        bool Insert(const pair&lt;K, V&gt; kv) {\n            return _ht.Insert(kv);\n        }\n\n    private:\n        lkt2::HashTable&lt;K, pair&lt;const K, V&gt;, MapKeyOfT, Hash&gt; _ht;\n    };\n}\n</code></pre>"},{"location":"C-C%2B%2B/hash/#hashtable","title":"HashTable\u6c47\u603b\u4ee3\u7801","text":"<pre><code>#pragma once\n\n#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\ntemplate &lt;class K&gt;\nstruct HashFunc {\n    size_t operator()(const K&amp; key) {\n        return (size_t)key;\n    }\n};\n\ntemplate&lt;&gt;\nstruct HashFunc &lt;string&gt; {\n    size_t operator ()(const string&amp; s) {\n        size_t hash = 0;\n        for (auto e : s) {\n            hash += e;\n            hash *= 131;\n        }\n        return hash;\n    }\n};\n\nnamespace lkt2 {\n\n    template&lt;class T&gt;\n    struct HashNode {\n        HashNode&lt;T&gt;* _next;\n        T _data;\n        HashNode(const T data)\n            :_next(nullptr)\n            , _data(data)\n        {}\n    };\n\n    template&lt;class K, class T, class KeyOfT, class Hash&gt;\n    struct HashTable;\n\n\n\n    template&lt;class K, class T, class KeyOfT, class Hash&gt;\n    struct __HTIterator {\n        typedef HashNode&lt;T&gt; Node;\n        typedef HashTable&lt;K, T, KeyOfT, Hash&gt; HT;\n        typedef __HTIterator&lt;K, T, KeyOfT, Hash&gt; Self;\n        __HTIterator(Node* node, HT* ht) \n            :_node(node)\n            ,_ht(ht)\n        {}\n        T&amp; operator*() {//T&amp;\n            return _node-&gt;_data;\n        }\n        Self&amp; operator++() {\n            if (_node-&gt;_next) {\n                _node =  _node-&gt;_next;\n            }\n            else {\n                Hash hs;\n                KeyOfT kot;\n                size_t hashi = hs(kot(_node-&gt;_data)) % _ht-&gt;_tables.size();//-&gt;\n                hashi++;\n                while (hashi &lt; _ht-&gt;_tables.size()) {\n                    if (_ht-&gt;_tables[hashi]) {\n                        _node = _ht-&gt;_tables[hashi];\n                        break;\n                    }\n                    hashi++;\n                }\n\n                if (hashi == _ht-&gt;_tables.size())\n                    _node = nullptr;\n            }\n            return *this;\n        }\n\n        bool operator!=(const Self&amp; s) {\n            return _node != s._node;\n        }\n    private:\n        Node* _node;\n        HT* _ht;//HT*\n    };\n\n    template&lt;class K, class T, class KeyOfT, class Hash&gt;\n    struct HashTable {\n        template&lt;class K, class T, class KeyOfT, class Hash&gt;\n        friend struct __HTIterator;\n        typedef HashNode&lt;T&gt; Node;\n    public:\n        typedef __HTIterator&lt;K, T, KeyOfT, Hash&gt; iterator;\n\n        iterator begin() {\n            for (int i = 0; i &lt; _tables.size(); ++i) {\n                if (_tables[i]) {\n                    return iterator(_tables[i], this);\n                }\n            }\n            return end();\n        }\n\n        iterator end() {\n            return iterator(nullptr, this);\n        }\n\n        HashTable() {\n            _tables.resize(10, nullptr);\n            _n = 0; // _n = 0 \u4e0d\u8981\u5fd8\u8bb0\n        }\n\n        ~HashTable() {\n            for (int i = 0; i &lt; _tables.size(); ++i) {\n                Node* cur = _tables[i];\n                while (cur) {\n                    Node* next = cur-&gt;_next;\n                    delete cur;\n                    cur = next;\n                }\n                _tables[i] = nullptr;\n            }\n        }\n\n        bool Insert(const T&amp; data) { //T&amp;\n            KeyOfT kot;\n            if (Find(kot(data)))\n                return false;\n            Hash hs;\n            if (_n == _tables.size()) {\n                vector&lt;Node*&gt; NewHT(_tables.size() * 2, nullptr);\n                for (int i = 0; i &lt; _tables.size(); ++i) {\n                    Node* cur = _tables[i];\n                    while (cur) {\n                        Node* next = cur-&gt;_next;\n                        size_t hashi = hs(kot(cur-&gt;_data)) % NewHT.size(); // \u9700\u8981hs\u4e00\u4e0bfirst\n                        cur-&gt;_next = NewHT[hashi];//\u76f4\u63a5\u7528cur\u6765\u94fe\u63a5\uff0c\u4e0d\u9700\u8981\u81ea\u5df1newnode\n                        NewHT[hashi] = cur;\n                        cur = next;\n                    }\n                    _tables[i] = nullptr;\n                }\n                _tables.swap(NewHT);\n            }\n            size_t hashi = hs(kot(data)) % _tables.size();\n            Node* newnode = new Node(data);\n            newnode-&gt;_next = _tables[hashi];\n            _tables[hashi] = newnode;\n            ++_n;\n            return true;\n        }\n\n        Node* Find(const K&amp; key) {\n            KeyOfT kot;\n            Hash hs;\n            size_t hashi = hs(key) % _tables.size();\n            Node* cur = _tables[hashi];\n            while (cur) {\n                if (kot(cur-&gt;_data) == key)\n                    return cur;\n                cur = cur-&gt;_next;\n            }\n            return nullptr;\n        }\n\n        bool Erase(const K&amp; key) {\n            KeyOfT kot;\n            Hash hs;\n            size_t hashi = hs(key) % _tables.size();\n            Node* prev = nullptr;\n            Node* cur = _tables[hashi];\n            while (cur) {\n                if (kot(cur-&gt;_data) == key) {\n                    if (prev)\n                        prev-&gt;_next = cur-&gt;_next;\n                    else\n                        _tables[hashi] = cur-&gt;_next;\n                    delete cur; // \u8bb0\u5f97delete cur\u548c--_n\n                    --_n;\n                    return true;\n                }\n                prev = cur;\n                cur = cur-&gt;_next;\n            }\n            return false;\n        }\n    private:\n        vector&lt;Node*&gt; _tables;\n        size_t _n;\n    };\n}\n</code></pre>"},{"location":"C-C%2B%2B/start%20c%2B%2B/","title":"\u521d\u59cbC++","text":""},{"location":"C-C%2B%2B/start%20c%2B%2B/#_1","title":"\u547d\u540d\u7a7a\u95f4","text":"<p>\u5728 C/C++ \u4e2d\uff0c\u53d8\u91cf\u3001\u51fd\u6570\u548c\u540e\u9762\u8981\u5b66\u5230\u7684\u7c7b\u90fd\u662f\u5927\u91cf\u5b58\u5728\u7684\uff0c\u8fd9\u4e9b\u53d8\u91cf\u3001\u51fd\u6570\u548c\u7c7b\u7684\u540d\u79f0\u5c06\u90fd\u5b58 \u5728\u4e8e\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5f88\u591a\u51b2\u7a81\u3002\u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u7684\u76ee\u7684\u662f \u5bf9\u6807\u8bc6\u7b26\u7684\u540d\u79f0\u8fdb\u884c\u672c\u5730\u5316 \uff0c \u4ee5 \u907f\u514d\u547d\u540d\u51b2\u7a81\u6216\u540d\u5b57\u6c61\u67d3 \uff0c namespace \u5173\u952e\u5b57\u7684\u51fa\u73b0\u5c31\u662f\u9488\u5bf9\u8fd9\u79cd\u95ee\u9898\u7684\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint rand = 10;\n// C\u8bed\u8a00\u6ca1\u529e\u6cd5\u89e3\u51b3\u7c7b\u4f3c\u8fd9\u6837\u7684\u547d\u540d\u51b2\u7a81\u95ee\u9898\uff0c\u6240\u4ee5C++\u63d0\u51fa\u4e86namespace\u6765\u89e3\u51b3\nint main()\n{\n printf(\"%d\\n\", rand);\nreturn 0;\n}\n// \u7f16\u8bd1\u540e\u540e\u62a5\u9519\uff1aerror C2365: \u201crand\u201d: \u91cd\u5b9a\u4e49\uff1b\u4ee5\u524d\u7684\u5b9a\u4e49\u662f\u201c\u51fd\u6570\u201d\n</code></pre> <p>\u547d\u540d\u7a7a\u95f4\u7684\u5b9a\u4e49 \u5b9a\u4e49\u547d\u540d\u7a7a\u95f4\uff0c\u9700\u8981\u4f7f\u7528\u5230namespace\u5173\u952e\u5b57\uff0c\u540e\u9762\u8ddf\u547d\u540d\u7a7a\u95f4\u7684\u540d\u5b57\uff0c\u7136\u540e\u540e\u9762\u8ddf\u4e00\u5bf9{}\u5373\u53ef,{}\u4e2d\u5373\u4e3a\u547d\u540d\u7a7a\u95f4\u7684\u6210\u5458\u3002</p> <pre><code>// \u6b63\u5e38\u7684\u547d\u540d\u7a7a\u95f4\nnamespace lkt\n{\n // \u547d\u540d\u7a7a\u95f4\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u53d8\u91cf/\u51fd\u6570/\u7c7b\u578b\n int rand = 10;\n int Add(int left, int right)\n {\n return left + right;\n }\n struct Node\n {\n     struct Node* next;\n     int val;\n };\n}\n\n//2. \u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5d4c\u5957\n// test.cpp\nnamespace N1\n{\nint a;\nint b;\nint Add(int left, int right)\n {\n     return left + right;\n }\nnamespace N2\n {\n     int c;\n     int d;\n     int Sub(int left, int right)\n     {\n         return left - right;\n     }\n }\n}\n//3. \u540c\u4e00\u4e2a\u5de5\u7a0b\u4e2d\u5141\u8bb8\u5b58\u5728\u591a\u4e2a\u76f8\u540c\u540d\u79f0\u7684\u547d\u540d\u7a7a\u95f4,\u7f16\u8bd1\u5668\u6700\u540e\u4f1a\u5408\u6210\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u3002\n// ps\uff1a\u4e00\u4e2a\u5de5\u7a0b\u4e2d\u7684test.h\u548c\u4e0a\u9762test.cpp\u4e2d\u4e24\u4e2aN1\u4f1a\u88ab\u5408\u5e76\u6210\u4e00\u4e2a\n// test.h\nnamespace N1\n{\nint Mul(int left, int right)\n {\n     return left * right;\n }\n}\n</code></pre> <p>\u547d\u540d\u7a7a\u95f4\u7684\u4f7f\u7528</p> <pre><code>namespace lkt\n{\n // \u547d\u540d\u7a7a\u95f4\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u53d8\u91cf/\u51fd\u6570/\u7c7b\u578b\n int a = 0;\n int b = 1;\n int Add(int left, int right)\n {\n return left + right;\n }\n struct Node\n {\n struct Node* next;\n int val;\n };\n}\nint main()\n{\n // \u7f16\u8bd1\u62a5\u9519\uff1aerror C2065: \u201ca\u201d: \u672a\u58f0\u660e\u7684\u6807\u8bc6\u7b26\n printf(\"%d\\n\", a);\nreturn 0;\n}\n</code></pre> <p>\u52a0\u547d\u540d\u7a7a\u95f4\u4f5c\u7528\u57df\u9650\u5b9a\u7b26</p> <pre><code>int main()\n{\n    printf(\"%d\\n\", lkt::a);\n    return 0;    \n}\n</code></pre> <p>\u4f7f\u7528using\u5c06\u547d\u540d\u7a7a\u95f4\u67d0\u4e2a\u6210\u5458\u52a0\u5165</p> <pre><code>using lkt::b;\nint main()\n{\n    printf(\"%d\\n\", lkt::a);\n    printf(\"%d\\n\", b);\n    return 0;    \n}\n</code></pre> <p>\u4f7f\u7528using namespace\u547d\u540d\u7a7a\u95f4\u5bfc\u5165</p> <pre><code>using namespce lkt;\nint main()\n{\n    printf(\"%d\\n\", lkt::a);\n    printf(\"%d\\n\", b);\n    Add(10, 20);\n    return 0;    \n}\n</code></pre>"},{"location":"C-C%2B%2B/start%20c%2B%2B/#c_1","title":"C++\u7684\u8f93\u5165\u548c\u8f93\u51fa","text":"<pre><code>#include&lt;iostream&gt;\n// std\u662fC++\u6807\u51c6\u5e93\u7684\u547d\u540d\u7a7a\u95f4\u540d\uff0cC++\u5c06\u6807\u51c6\u5e93\u7684\u5b9a\u4e49\u5b9e\u73b0\u90fd\u653e\u5230\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\nusing namespace std;\nint main()\n{\n    cout&lt;&lt;\"Hello world!!!\"&lt;&lt;endl;\n    return 0;\n}\n</code></pre> <p>\u8bf4\u660e 1. \u4f7f\u7528cout\u6807\u51c6\u8f93\u51fa\u5bf9\u8c61(\u63a7\u5236\u53f0)\u548ccin\u6807\u51c6\u8f93\u5165\u5bf9\u8c61(\u952e\u76d8)\u65f6\uff0c\u5fc5\u987b\u5305\u542b&lt; iostream &gt;\u5934\u6587\u4ef6 \u4ee5\u53ca\u6309\u547d\u540d\u7a7a\u95f4\u4f7f\u7528\u65b9\u6cd5\u4f7f\u7528std\u3002 2. cout\u548ccin\u662f\u5168\u5c40\u7684\u6d41\u5bf9\u8c61\uff0cendl\u662f\u7279\u6b8a\u7684C++\u7b26\u53f7\uff0c\u8868\u793a\u6362\u884c\u8f93\u51fa\uff0c\u4ed6\u4eec\u90fd\u5305\u542b\u5728\u5305\u542b&lt;  iostream &gt;\u5934\u6587\u4ef6\u4e2d\u3002 3. &lt;&lt;\u662f\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26\uff0c&gt;&gt;\u662f\u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26\u3002 4. \u4f7f\u7528C++\u8f93\u5165\u8f93\u51fa\u66f4\u65b9\u4fbf\uff0c\u4e0d\u9700\u8981\u50cfprintf/scanf\u8f93\u5165\u8f93\u51fa\u65f6\u90a3\u6837\uff0c\u9700\u8981\u624b\u52a8\u63a7\u5236\u683c\u5f0f\u3002 C++\u7684\u8f93\u5165\u8f93\u51fa\u53ef\u4ee5\u81ea\u52a8\u8bc6\u522b\u53d8\u91cf\u7c7b\u578b</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n   int a;\n   double b;\n   char c; \n   // \u53ef\u4ee5\u81ea\u52a8\u8bc6\u522b\u53d8\u91cf\u7684\u7c7b\u578b\n   cin&gt;&gt;a;\n   cin&gt;&gt;b&gt;&gt;c;\n\n   cout&lt;&lt;a&lt;&lt;endl;\n   cout&lt;&lt;b&lt;&lt;\" \"&lt;&lt;c&lt;&lt;endl;\n   return 0;\n}\n</code></pre> <p>std\u547d\u540d\u7a7a\u95f4\u4f7f\u7528\u60ef\u4f8b std\u662fC++\u6807\u51c6\u5e93\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u5982\u4f55\u5c55\u5f00std\u4f7f\u7528\u66f4\u5408\u7406\u5462\uff1f 1. \u5728\u65e5\u5e38\u7ec3\u4e60\u4e2d\uff0c\u5efa\u8bae\u76f4\u63a5using namespace std\u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u5f88\u65b9\u4fbf\u3002 2. using namespace std\u5c55\u5f00\uff0c\u6807\u51c6\u5e93\u5c31\u5168\u90e8\u66b4\u9732\u51fa\u6765\u4e86\uff0c\u5982\u679c\u6211\u4eec\u5b9a\u4e49\u8ddf\u5e93\u91cd\u540d\u7684\u7c7b\u578b/\u5bf9 \u8c61/\u51fd\u6570\uff0c\u5c31\u5b58\u5728\u51b2\u7a81\u95ee\u9898\u3002\u8be5\u95ee\u9898\u5728\u65e5\u5e38\u7ec3\u4e60\u4e2d\u5f88\u5c11\u51fa\u73b0\uff0c\u4f46\u662f\u9879\u76ee\u5f00\u53d1\u4e2d\u4ee3\u7801\u8f83\u591a\u3001\u89c4\u6a21 \u5927\uff0c\u5c31\u5f88\u5bb9\u6613\u51fa\u73b0\u3002\u6240\u4ee5\u5efa\u8bae\u5728\u9879\u76ee\u5f00\u53d1\u4e2d\u4f7f\u7528\uff0c\u50cfstd::cout\u8fd9\u6837\u4f7f\u7528\u65f6\u6307\u5b9a\u547d\u540d\u7a7a\u95f4 +  using std::cout\u5c55\u5f00\u5e38\u7528\u7684\u5e93\u5bf9\u8c61/\u7c7b\u578b\u7b49\u65b9\u5f0f</p>"},{"location":"C-C%2B%2B/start%20c%2B%2B/#_2","title":"\u7f3a\u7701\u53c2\u6570","text":"<p>\u7f3a\u7701\u53c2\u6570\u7684\u6982\u5ff5</p> <pre><code>void Func(int a = 0)\n{\n cout&lt;&lt;a&lt;&lt;endl;\n}\nint main()\n{\n Func();     // \u6ca1\u6709\u4f20\u53c2\u65f6\uff0c\u4f7f\u7528\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\n Func(10);   // \u4f20\u53c2\u65f6\uff0c\u4f7f\u7528\u6307\u5b9a\u7684\u5b9e\u53c2\nreturn 0;\n}\n</code></pre> <p>\u7f3a\u7701\u53c2\u6570\u7684\u5206\u7c7b</p>"},{"location":"C-C%2B%2B/%E5%87%BD%E6%95%B0/","title":"\u51fd\u6570","text":""},{"location":"C-C%2B%2B/%E5%87%BD%E6%95%B0/#_2","title":"\u51fd\u6570\u662f\u4ec0\u4e48\uff1f","text":"<p>\u6570\u5b66\u4e2d\u6211\u4eec\u5e38\u89c1\u5230\u51fd\u6570\u7684\u6982\u5ff5\u3002\u4f46\u662f\u4f60\u4e86\u89e3C\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u5417\uff1f \u7ef4\u57fa\u767e\u79d1\u4e2d\u5bf9\u51fd\u6570\u7684\u5b9a\u4e49\uff1a\u5b50\u7a0b\u5e8f</p> <ul> <li>\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u5b50\u7a0b\u5e8f\uff08\u82f1\u8bed\uff1aSubroutine, procedure, function, routine, method, subprogram, callable unit\uff09\uff0c\u662f\u4e00\u4e2a\u5927\u578b\u7a0b\u5e8f\u4e2d\u7684\u67d0\u90e8\u5206\u4ee3\u7801\uff0c \u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u8bed\u53e5\u5757\u7ec4 \u6210\u3002\u5b83\u8d1f\u8d23\u5b8c\u6210\u67d0\u9879\u7279\u5b9a\u4efb\u52a1\uff0c\u800c\u4e14\u76f8\u8f83\u4e8e\u5176\u4ed6\u4ee3 \u7801\uff0c\u5177\u5907\u76f8\u5bf9\u7684\u72ec\u7acb\u6027\u3002</li> <li>\u4e00\u822c\u4f1a\u6709\u8f93\u5165\u53c2\u6570\u5e76\u6709\u8fd4\u56de\u503c\uff0c\u63d0\u4f9b\u5bf9\u8fc7\u7a0b\u7684\u5c01\u88c5\u548c\u7ec6\u8282\u7684\u9690\u85cf\u3002\u8fd9\u4e9b\u4ee3\u7801\u901a\u5e38\u88ab\u96c6\u6210\u4e3a\u8f6f \u4ef6\u5e93\u3002</li> </ul> <p>C\u8bed\u8a00\u4e2d\u51fd\u6570\u7684\u5206\u7c7b:  1. \u5e93\u51fd\u6570 2. \u81ea\u5b9a\u4e49\u51fd\u6570</p>"},{"location":"C-C%2B%2B/%E5%87%BD%E6%95%B0/#_3","title":"\u5e93\u51fd\u6570","text":"<p>\u4e3a\u4ec0\u4e48\u4f1a\u6709\u5e93\u51fd\u6570\uff1f</p> <ol> <li>\u6211\u4eec\u77e5\u9053\u5728\u6211\u4eec\u5b66\u4e60C\u8bed\u8a00\u7f16\u7a0b\u7684\u65f6\u5019\uff0c\u603b\u662f\u5728\u4e00\u4e2a\u4ee3\u7801\u7f16\u5199\u5b8c\u6210\u4e4b\u540e\u8feb\u4e0d\u53ca\u5f85\u7684\u60f3\u77e5\u9053\u7ed3\u679c\uff0c\u60f3 \u628a\u8fd9\u4e2a\u7ed3\u679c\u6253\u5370\u5230\u6211\u4eec\u7684\u5c4f\u5e55\u4e0a\u770b\u770b\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u4f1a\u9891\u7e41\u7684\u4f7f\u7528\u4e00\u4e2a\u529f\u80fd\uff1a\u5c06\u4fe1\u606f\u6309\u7167\u4e00\u5b9a\u7684\u683c \u5f0f\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\uff08printf\uff09\u3002</li> <li>\u5728\u7f16\u7a0b\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4f1a\u9891\u7e41\u7684\u505a\u4e00\u4e9b\u5b57\u7b26\u4e32\u7684\u62f7\u8d1d\u5de5\u4f5c\uff08strcpy\uff09\u3002</li> <li>\u5728\u7f16\u7a0b\u662f\u6211\u4eec\u4e5f\u8ba1\u7b97\uff0c\u603b\u662f\u4f1a\u8ba1\u7b97n\u7684k\u6b21\u65b9\u8fd9\u6837\u7684\u8fd0\u7b97\uff08pow\uff09\u3002</li> </ol> <p>\u50cf\u4e0a\u9762\u6211\u4eec\u63cf\u8ff0\u7684\u57fa\u7840\u529f\u80fd\uff0c\u5b83\u4eec\u4e0d\u662f\u4e1a\u52a1\u6027\u7684\u4ee3\u7801\u3002\u6211\u4eec\u5728\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u6bcf\u4e2a\u7a0b\u5e8f\u5458\u90fd\u53ef\u80fd\u7528\u7684\u5230\uff0c \u4e3a\u4e86\u652f\u6301\u53ef\u79fb\u690d\u6027\u548c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6548\u7387\uff0c\u6240\u4ee5C\u8bed\u8a00\u7684\u57fa\u7840\u5e93\u4e2d\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7c7b\u4f3c\u7684\u5e93\u51fd\u6570\uff0c\u65b9\u4fbf\u7a0b\u5e8f\u5458 \u8fdb\u884c\u8f6f\u4ef6\u5f00\u53d1\u3002</p> <p>\u90a3\u600e\u4e48\u5b66\u4e60\u5e93\u51fd\u6570\u5462\uff1f</p> <p>\u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u7684\u770b\u770b\uff1a</p>"},{"location":"C-C%2B%2B/%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/","title":"\u5206\u652f\u8bed\u53e5\u548c\u5faa\u73af\u8bed\u53e5","text":"<p>\u5206\u652f\u8bed\u53e5</p> <ul> <li>if </li> <li>switch</li> </ul> <p>\u5faa\u73af\u8bed\u53e5</p> <ul> <li>while</li> <li>for </li> <li>do while</li> </ul> <p>goto\u8bed\u53e5</p> <p>\u4ec0\u4e48\u662f\u8bed\u53e5</p> <p>C\u8bed\u8a00\u4e2d\u7531\u4e00\u4e2a\u5206\u53f7 ; \u9694\u5f00\u7684\u5c31\u662f\u4e00\u6761\u8bed\u53e5\u3002 \u6bd4\u5982\uff1a</p> <pre><code>printf(\"hehe\");\n1+2;\n</code></pre>"},{"location":"C-C%2B%2B/%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/#_2","title":"\u5206\u652f\u8bed\u53e5\uff08\u9009\u62e9\u7ed3\u6784\uff09","text":"<p>\u5982\u679c\u4f60\u597d\u597d\u5b66\u4e60\uff0c\u6821\u62db\u65f6\u62ff\u4e00\u4e2a\u597doffer\uff0c\u8d70\u4e0a\u4eba\u751f\u5dc5\u5cf0\u3002 \u5982\u679c\u4f60\u4e0d\u5b66\u4e60\uff0c\u6bd5\u4e1a\u7b49\u4e8e\u5931\u4e1a\uff0c\u56de\u5bb6\u5356\u7ea2\u85af\u3002 \u8fd9\u5c31\u662f\u9009\u62e9\uff01</p> <p>if\u8bed\u53e5</p> <p>\u90a3if\u8bed\u53e5\u7684\u8bed\u6cd5\u7ed3\u6784\u662f\u600e\u4e48\u6837\u7684\u5462\uff1f</p> <pre><code>\u8bed\u6cd5\u7ed3\u6784\uff1a\nif(\u8868\u8fbe\u5f0f)\n    \u8bed\u53e5;\nif(\u8868\u8fbe\u5f0f)\n    \u8bed\u53e51;\nelse\n    \u8bed\u53e52;\n//\u591a\u5206\u652f    \nif(\u8868\u8fbe\u5f0f1)\n    \u8bed\u53e51;\nelse if(\u8868\u8fbe\u5f0f2)\n    \u8bed\u53e52;\nelse\n    \u8bed\u53e53;\n</code></pre> <p>\u6f14\u793a\u4ee3\u7801\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n//\u4ee3\u78011\nint main()\n{\n int age = 0;\n    scanf(\"%d\", &amp;age);\n    if(age&lt;18)\n   {\n        printf(\"\u672a\u6210\u5e74\\n\");\n   }\n}\n//\u4ee3\u78012\n#include &lt;stdio.h&gt;\nint main()\n{\n int age = 0;\n    scanf(\"%d\", &amp;age);\n    if(age&lt;18)\n   {\n        printf(\"\u672a\u6210\u5e74\\n\");\n   }\n    else\n   {\n        printf(\"\u6210\u5e74\\n\");\n   }\n}\n//\u4ee3\u78013\n#include &lt;stdio.h&gt;\nint main()\n{\n int age = 0;\n    scanf(\"%d\", &amp;age);\n    if(age&lt;18)\n   {\n        printf(\"\u5c11\u5e74\\n\");\n   }\n    else if(age&gt;=18 &amp;&amp; age&lt;30)\n   {\n        printf(\"\u9752\u5e74\\n\");\n   }\n    else if(age&gt;=30 &amp;&amp; age&lt;50)\n   {\n        printf(\"\u4e2d\u5e74\\n\");\n   }\n    else if(age&gt;=50 &amp;&amp; age&lt;80)\n   {\n        printf(\"\u8001\u5e74\\n\");\n   }\n    else\n   {\n        printf(\"\u8001\u4e0d\u6b7b\\n\");\n   }\n\n}\n</code></pre> <p>\u89e3\u91ca\u4e00\u4e0b\uff1a \u5982\u679c\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u4e3a\u771f\uff0c\u5219\u8bed\u53e5\u6267\u884c\u3002 \u5728C\u8bed\u8a00\u4e2d\u5982\u4f55\u8868\u793a\u771f\u5047\uff1f</p> <p>0\u8868\u793a\u5047\uff0c\u975e0\u8868\u793a\u771f\u3002</p> <p>\u5982\u679c\u6761\u4ef6\u6210\u7acb\uff0c\u8981\u6267\u884c\u591a\u6761\u8bed\u53e5\uff0c\u600e\u5e94\u8be5\u4f7f\u7528\u4ee3\u7801\u5757\u3002</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    if(\u8868\u8fbe\u5f0f)\n   {\n        \u8bed\u53e5\u5217\u88681\uff1b\n   }\n    else\n   {\n        \u8bed\u53e5\u5217\u88682\uff1b\n   }\n    return 0;\n}\n</code></pre> <p>\u8fd9\u91cc\u7684\u4e00\u5bf9 { } \u5c31\u662f\u4e00\u4e2a\u4ee3\u7801\u5757\u3002</p> <p>\u60ac\u7a7aelse \u5f53\u4f60\u5199\u4e86\u8fd9\u4e2a\u4ee3\u7801\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int a = 0;\n    int b = 2;\n    if(a == 1)\n        if(b == 2)\n            printf(\"hehe\\n\");\n    else\n        printf(\"haha\\n\");\n    return 0;\n}\n</code></pre> <p>\u6539\u6b63\uff1a</p> <pre><code>//\u9002\u5f53\u7684\u4f7f\u7528{}\u53ef\u4ee5\u4f7f\u4ee3\u7801\u7684\u903b\u8f91\u66f4\u52a0\u6e05\u695a\u3002\n//\u4ee3\u7801\u98ce\u683c\u5f88\u91cd\u8981\n#include &lt;stdio.h&gt;\nint main()\n{\n    int a = 0;\n    int b = 2;\n    if(a == 1)\n   {\n        if(b == 2)\n       {\n            printf(\"hehe\\n\");\n       }\n   }\n    else\n   {\n            printf(\"haha\\n\");\n   }       \n    return 0;\n}\n</code></pre> <p>if\u4e66\u5199\u5f62\u5f0f\u7684\u5bf9\u6bd4</p> <pre><code>//\u4ee3\u78011\nif (condition) {\n    return x;\n}\nreturn y;\n//\u4ee3\u78012\nif(condition)\n{\n    return x;\n}\nelse\n{\n    return y;\n}\n//\u4ee3\u78013\nint num = 1;\nif(num == 5)\n{\n    printf(\"hehe\\n\");\n}\n//\u4ee3\u78014\nint num = 1;\nif(5 == num)\n{\n    printf(\"hehe\\n\");\n}\n</code></pre> <p>\u4ee3\u78012\u548c\u4ee3\u78014\u66f4\u597d\uff0c\u903b\u8f91\u66f4\u52a0\u6e05\u6670\uff0c\u4e0d\u5bb9\u6613\u51fa\u9519\u3002</p> <p>switch\u8bed\u53e5</p> <p>switch\u8bed\u53e5\u4e5f\u662f\u4e00\u79cd\u5206\u652f\u8bed\u53e5\u3002 \u5e38\u5e38\u7528\u4e8e\u591a\u5206\u652f\u7684\u60c5\u51b5\u3002</p> <p>\u6bd4\u5982\uff1a</p> <p>\u8f93\u51651\uff0c\u8f93\u51fa\u661f\u671f\u4e00 \u8f93\u51652\uff0c\u8f93\u51fa\u661f\u671f\u4e8c \u8f93\u51653\uff0c\u8f93\u51fa\u661f\u671f\u4e09 \u8f93\u51654\uff0c\u8f93\u51fa\u661f\u671f\u56db \u8f93\u51655\uff0c\u8f93\u51fa\u661f\u671f\u4e94 \u8f93\u51656\uff0c\u8f93\u51fa\u661f\u671f\u516d \u8f93\u51657\uff0c\u8f93\u51fa\u661f\u671f\u4e03</p> <p>\u90a3\u6211\u6ca1\u5199\u6210 if...else if ...else if \u7684\u5f62\u5f0f\u592a\u590d\u6742\uff0c\u90a3\u6211\u4eec\u5c31\u5f97\u6709\u4e0d\u4e00\u6837\u7684\u8bed\u6cd5\u5f62\u5f0f\u3002 \u8fd9\u5c31\u662f switch \u8bed\u53e5\u3002</p> <pre><code>switch(\u6574\u578b\u8868\u8fbe\u5f0f)\n{\n    \u8bed\u53e5\u9879\uff1b\n}\n</code></pre> <p>\u800c\u8bed\u53e5\u9879\u662f\u4ec0\u4e48\u5462\uff1f</p> <pre><code>//\u662f\u4e00\u4e9bcase\u8bed\u53e5\uff1a\n//\u5982\u4e0b\uff1a\ncase \u6574\u5f62\u5e38\u91cf\u8868\u8fbe\u5f0f:\n    \u8bed\u53e5;\n</code></pre> <p>\u5728switch\u8bed\u53e5\u4e2d\u7684 break</p> <p>\u5728switch\u8bed\u53e5\u4e2d\uff0c\u6211\u4eec\u6ca1\u6cd5\u76f4\u63a5\u5b9e\u73b0\u5206\u652f\uff0c\u642d\u914dbreak\u4f7f\u7528\u624d\u80fd\u5b9e\u73b0\u771f\u6b63\u7684\u5206\u652f\u3002 \u6bd4\u5982\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int day = 0;\n    switch(day)\n   {\n        case 1\uff1a\n            printf(\"\u661f\u671f\u4e00\\n\");\n            break;\n        case 2:\n            printf(\"\u661f\u671f\u4e8c\\n\");\n            break;\n        case 3:\n            printf(\"\u661f\u671f\u4e09\\n\");\n            break;    \n        case 4:\n            printf(\"\u661f\u671f\u56db\\n\");\n            break;    \n        case 5:\n            printf(\"\u661f\u671f\u4e94\\n\");\n            break;\n        case 6:\n            printf(\"\u661f\u671f\u516d\\n\");\n            break;\n        case 7:\n            printf(\"\u661f\u671f\u5929\\n\");    \n            break;\n   }\n    return 0;\n}\n</code></pre> <p>\u6709\u65f6\u5019\u6211\u4eec\u7684\u9700\u6c42\u53d8\u4e86\uff1a</p> <ol> <li>\u8f93\u51651-5\u8f93\u51fa\u7684\u662f\u201cweekday\u201d;</li> <li>\u8f93\u51656-7\u8f93\u51fa\u201cweekend\u201d \u6240\u4ee5\u6211\u4eec\u7684\u4ee3\u7801\u5c31\u5e94\u8be5\u8fd9\u6837\u5b9e\u73b0\u4e86\uff1a</li> </ol> <pre><code>#include &lt;stdio.h&gt;\n//switch\u4ee3\u7801\u6f14\u793a\nint main()\n{\n    int day = 0;\n    switch(day)\n   {\n        case 1\uff1a\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n            printf(\"weekday\\n\");\n            break;\n        case 6:\n        case 7:\n            printf(\"weekend\\n\");\n            break;\n   }\n    return 0;\n}\n</code></pre> <p>break\u8bed\u53e5\u7684\u5b9e\u9645\u6548\u679c\u662f\u628a\u8bed\u53e5\u5217\u8868\u5212\u5206\u4e3a\u4e0d\u540c\u7684\u90e8\u5206\u3002</p> <p>\u7f16\u7a0b\u597d\u4e60\u60ef</p> <p>\u5728\u6700\u540e\u4e00\u4e2a case \u8bed\u53e5\u7684\u540e\u9762\u52a0\u4e0a\u4e00\u6761 break\u8bed\u53e5\u3002 \uff08\u4e4b\u6240\u4ee5\u8fd9\u4e48\u5199\u662f\u53ef\u4ee5\u907f\u514d\u51fa\u73b0\u5728\u4ee5\u524d\u7684\u6700 \u540e\u4e00\u4e2a case \u8bed\u53e5\u540e\u9762\u5fd8\u4e86\u6dfb\u52a0 break\u8bed\u53e5\uff09\u3002</p> <p>default\u5b50\u53e5 \u5982\u679c\u8868\u8fbe\u7684\u503c\u4e0e\u6240\u6709\u7684case\u6807\u7b7e\u7684\u503c\u90fd\u4e0d\u5339\u914d\u600e\u4e48\u529e\uff1f \u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\uff0c\u7ed3\u6784\u5c31\u662f\u6240\u6709\u7684\u8bed\u53e5\u90fd\u88ab\u8df3\u8fc7\u800c\u5df2\u3002 \u7a0b\u5e8f\u5e76\u4e0d\u4f1a\u7ec8\u6b62\uff0c\u4e5f\u4e0d\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u5728C\u4e2d\u5e76\u4e0d\u8ba4\u4e3a\u9002\u5408\u9519\u8bef\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u5e76\u4e0d\u60f3\u5ffd\u7565\u4e0d\u5339\u914d\u6240\u6709\u6807\u7b7e\u7684\u8868\u8fbe\u5f0f\u7684\u503c\u65f6\u8be5\u600e\u4e48\u529e\u5462\uff1f \u4f60\u53ef\u4ee5\u5728\u8bed\u53e5\u5217\u8868\u4e2d\u589e\u52a0\u4e00\u6761default\u5b50\u53e5\uff0c\u628a\u4e0b\u9762\u7684\u6807\u7b7e default\uff1a \u5199\u5728\u4efb\u4f55\u4e00\u4e2acase\u6807\u7b7e\u53ef\u4ee5\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 \u5f53 switch\u8868\u8fbe\u5f0f\u7684\u503c\u5e76\u4e0d\u5339\u914d\u6240\u6709case\u6807\u7b7e\u7684\u503c\u65f6\uff0c\u8fd9\u4e2adefault\u5b50\u53e5\u540e\u9762\u7684\u8bed\u53e5\u5c31\u4f1a\u6267\u884c\u3002 \u6240\u4ee5\uff0c\u6bcf\u4e2aswitch\u8bed\u53e5\u4e2d\u53ea\u80fd\u51fa\u73b0\u4e00\u6761default\u5b50\u53e5\u3002 \u4f46\u662f\u5b83\u53ef\u4ee5\u51fa\u73b0\u5728\u8bed\u53e5\u5217\u8868\u7684\u4efb\u4f55\u4f4d\u7f6e\uff0c\u800c\u4e14\u8bed\u53e5\u6d41\u4f1a\u50cf\u8d2f\u7a7f\u4e00\u4e2acase\u6807\u7b7e\u4e00\u6837\u8d2f\u7a7fdefault\u5b50\u53e5\u3002</p> <p>\u7f16\u7a0b\u597d\u4e60\u60ef</p> <p>\u5728\u6bcf\u4e2a switch \u8bed\u53e5\u4e2d\u90fd\u653e\u4e00\u6761default\u5b50\u53e5\u662f\u4e2a\u597d\u4e60\u60ef\uff0c\u751a\u81f3\u53ef\u4ee5\u5728\u540e\u8fb9\u518d\u52a0\u4e00\u4e2a break \u3002</p> <p>\u7ec3\u4e60:</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int n = 1;\n    int m = 2;\n    switch (n)\n   {\n    case 1:\n            m++;\n    case 2:\n            n++;\n    case 3:\n             switch (n)\n           {//switch\u5141\u8bb8\u5d4c\u5957\u4f7f\u7528\n             case 1:\n                    n++;\n             case 2:\n                    m++;\n                    n++;\n                    break;\n           }\n    case 4:\n            m++;\n             break;\n    default:\n             break;\n   }\n    printf(\"m = %d, n = %d\\n\", m, n);// m = 5, n = 3\n    return 0;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/#_3","title":"\u5faa\u73af\u8bed\u53e5","text":"<ul> <li>while</li> <li>for</li> <li>do while</li> </ul> <p>while\u5faa\u73af \u6211\u4eec\u5df2\u7ecf\u638c\u63e1\u4e86\uff0cif\u8bed\u53e5\uff1a</p> <pre><code>if(\u6761\u4ef6)\n     \u8bed\u53e5;\n</code></pre> <p>\u5f53\u6761\u4ef6\u6ee1\u8db3\u7684\u60c5\u51b5\u4e0b\uff0cif\u8bed\u53e5\u540e\u7684\u8bed\u53e5\u6267\u884c\uff0c\u5426\u5219\u4e0d\u6267\u884c\u3002\u4f46\u662f\u8fd9\u4e2a\u8bed\u53e5\u53ea\u4f1a\u6267\u884c\u4e00\u6b21\u3002 \u4f46\u662f\u6211\u4eec\u53d1\u73b0\u751f\u6d3b\u4e2d\u5f88\u591a\u7684\u5b9e\u9645\u7684\u4f8b\u5b50\u662f\uff1a\u540c\u4e00\u4ef6\u4e8b\u60c5\u6211\u4eec\u9700\u8981\u5b8c\u6210\u5f88\u591a\u6b21\u3002 \u90a3\u6211\u4eec\u600e\u4e48\u505a\u5462\uff1f C\u8bed\u8a00\u4e2d\u7ed9\u6211\u4eec\u5f15\u5165\u4e86\uff1awhile\u8bed\u53e5\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5faa\u73af\u3002</p> <p>//while \u8bed\u6cd5\u7ed3\u6784 while(\u8868\u8fbe\u5f0f)  \u5faa\u73af\u8bed\u53e5\uff1b \u6bd4\u5982\u6211\u4eec\u5b9e\u73b0\uff1a</p> <p>\u5728\u5c4f\u5e55\u4e0a\u6253\u53701-10\u7684\u6570\u5b57\u3002</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n int i = 1;\n while(i&lt;=10)\n {\n printf(\"%d \", i);\n i = i+1;\n }\n return 0;\n}\n</code></pre> <p>\u8fd9\u4e2a\u4ee3\u7801\u5df2\u7ecf\u5e2e\u6211\u4e86\u89e3\u4e86while\u8bed\u53e5\u7684\u57fa\u672c\u8bed\u6cd5\uff0c\u90a3\u6211\u4eec\u518d\u4e86\u89e3\u4e00\u4e0b\uff1a</p> <p>while\u8bed\u53e5\u4e2d\u7684break\u548ccontinue</p> <p>break\u4ecb\u7ecd</p> <pre><code>//break \u4ee3\u7801\u5b9e\u4f8b\n#include &lt;stdio.h&gt;\nint main()\n{\n int i = 1;\n while(i&lt;=10)\n {\n if(i == 5)\n break;\n printf(\"%d \", i);\n i = i+1;\n }\n return 0;\n}\n</code></pre> <p>\u603b\u7ed3\uff1a break\u5728while\u5faa\u73af\u4e2d\u7684\u4f5c\u7528\uff1a</p> <p>\u5176\u5b9e\u5728\u5faa\u73af\u4e2d\u53ea\u8981\u9047\u5230break\uff0c\u5c31\u505c\u6b62\u540e\u671f\u7684\u6240\u6709\u7684\u5faa\u73af\uff0c\u76f4\u63a5\u7ec8\u6b62\u5faa\u73af\u3002 \u6240\u4ee5\uff1awhile\u4e2d\u7684 break\u662f\u7528\u4e8e\u6c38\u4e45\u7ec8\u6b62\u5faa\u73af\u7684\u3002</p> <p>continue\u4ecb\u7ecd</p> <pre><code>//continue \u4ee3\u7801\u5b9e\u4f8b1\n#include &lt;stdio.h&gt;\nint main()\n{\n int i = 1;\n while(i&lt;=10)\n {\n if(i == 5)\n continue;\n printf(\"%d \", i);\n i = i+1;\n }\n return 0;\n}\n</code></pre> <pre><code>//continue \u4ee3\u7801\u5b9e\u4f8b2\n#include &lt;stdio.h&gt;\nint main()\n{\n int i = 1;\n while(i&lt;=10)\n {\n    i = i+1;\n if(i == 5)\n continue;\n printf(\"%d \", i);\n }\n return 0;\n}\n</code></pre> <p>\u603b\u7ed3: continue\u5728while\u5faa\u73af\u4e2d\u7684\u4f5c\u7528\u5c31\u662f\uff1a</p> <p>continue\u662f\u7528\u4e8e\u7ec8\u6b62\u672c\u6b21\u5faa\u73af\u7684\uff0c\u4e5f\u5c31\u662f\u672c\u6b21\u5faa\u73af\u4e2dcontinue\u540e\u8fb9\u7684\u4ee3\u7801\u4e0d\u4f1a\u518d\u6267\u884c\uff0c\u800c\u662f\u76f4\u63a5 \u8df3\u8f6c\u5230while\u8bed\u53e5\u7684\u5224\u65ad\u90e8\u5206\u3002\u8fdb\u884c\u4e0b\u4e00\u6b21\u5faa\u73af\u7684\u5165\u53e3\u5224\u65ad\u3002 \u518d\u770b\u51e0\u4e2a\u4ee3\u7801\uff1a</p> <pre><code>//\u4ee3\u7801\u4ec0\u4e48\u610f\u601d\uff1f\n//\u4ee3\u78011\n#include &lt;stdio.h&gt;\nint main()\n{\n int ch = 0;\n while ((ch = getchar()) != EOF)\n       putchar(ch);\n    return 0;\n}\n// \u8bfb\u53d6\u5b57\u7b26\n//\u4ee3\u78012\n#include &lt;stdio.h&gt;\nint main()\n{\n while ((ch = getchar()) != EOF)\n {\n     if (ch &lt; \u20180\u2019 || ch &gt; \u20189\u2019)\n        continue;\n     putchar(ch);\n }\n return 0;\n}\n//\u8bfb\u53d6\u6570\u5b57\u5b57\u7b26\n</code></pre> <p>for\u5faa\u73af \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86while\u5faa\u73af\uff0c\u4f46\u662f\u6211\u4eec\u4e3a\u4ec0\u4e48\u8fd8\u8981\u4e00\u4e2afor\u5faa\u73af\u5462\uff1f \u9996\u5148\u6765\u770b\u770bfor\u5faa\u73af\u7684\u8bed\u6cd5\uff1a \u8bed\u6cd5</p> <pre><code>for(\u8868\u8fbe\u5f0f1\uff1b\u8868\u8fbe\u5f0f2\uff1b\u8868\u8fbe\u5f0f3)\n \u5faa\u73af\u8bed\u53e5\uff1b\n</code></pre> <p>\u8868\u8fbe\u5f0f1 \u8868\u8fbe\u5f0f1\u4e3a\u521d\u59cb\u5316\u90e8\u5206\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u5faa\u73af\u53d8\u91cf\u7684\u3002 \u8868\u8fbe\u5f0f2 \u8868\u8fbe\u5f0f2\u4e3a\u6761\u4ef6\u5224\u65ad\u90e8\u5206\uff0c\u7528\u4e8e\u5224\u65ad \u5faa\u73af\u65f6\u5019\u7ec8\u6b62\u3002 \u8868\u8fbe\u5f0f3 \u8868\u8fbe\u5f0f3\u4e3a\u8c03\u6574\u90e8\u5206\uff0c\u7528\u4e8e\u5faa\u73af\u6761\u4ef6\u7684\u8c03\u6574\u3002</p> <p>\u5b9e\u9645\u7684\u95ee\u9898\uff1a</p> <p>\u4f7f\u7528for\u5faa\u73af \u5728\u5c4f\u5e55\u4e0a\u6253\u53701-10\u7684\u6570\u5b57\u3002</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n int i = 0;\n //for(i=1/*\u521d\u59cb\u5316*/; i&lt;=10/*\u5224\u65ad\u90e8\u5206*/; i++/*\u8c03\u6574\u90e8\u5206*/)\n for(i=1; i&lt;=10; i++)\n {\n printf(\"%d \", i);\n }\n return 0;\n}\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u5bf9\u6bd4\u4e00\u4e0bfor\u5faa\u73af\u548cwhile\u5faa\u73af\u3002</p> <pre><code>int i = 0;\n//\u5b9e\u73b0\u76f8\u540c\u7684\u529f\u80fd\uff0c\u4f7f\u7528while\ni=1;//\u521d\u59cb\u5316\u90e8\u5206\nwhile(i&lt;=10)//\u5224\u65ad\u90e8\u5206\n{\n     printf(\"hehe\\n\");\n i = i+1;//\u8c03\u6574\u90e8\u5206\n}\n//\u5b9e\u73b0\u76f8\u540c\u7684\u529f\u80fd\uff0c\u4f7f\u7528while\nfor(i=1; i&lt;=10; i++)\n{\n printf(\"hehe\\n\");\n}\n</code></pre> <p>\u53ef\u4ee5\u53d1\u73b0\u5728while\u5faa\u73af\u4e2d\u4f9d\u7136\u5b58\u5728\u5faa\u73af\u7684\u4e09\u4e2a\u5fc5\u987b\u6761\u4ef6\uff0c\u4f46\u662f\u7531\u4e8e\u98ce\u683c\u7684\u95ee\u9898\u4f7f\u5f97\u4e09\u4e2a\u90e8\u5206\u5f88\u53ef\u80fd\u504f\u79bb \u8f83\u8fdc\uff0c\u8fd9\u6837\u67e5\u627e\u4fee\u6539\u5c31\u4e0d\u591f\u96c6\u4e2d\u548c\u65b9\u4fbf\u3002\u6240\u4ee5\uff0cfor\u5faa\u73af\u7684\u98ce\u683c\u66f4\u80dc\u4e00\u7b79\u3002 for\u5faa\u73af\u4f7f\u7528\u7684\u9891\u7387\u4e5f\u6700\u9ad8\u3002</p> <p>break\u548ccontinue\u5728for\u5faa\u73af\u4e2d \u6211\u4eec\u53d1\u73b0\u5728for\u5faa\u73af\u4e2d\u4e5f\u53ef\u4ee5\u51fa\u73b0break\u548ccontinue\uff0c\u4ed6\u4eec\u7684\u610f\u4e49\u548c\u5728while\u5faa\u73af\u4e2d\u662f\u4e00\u6837\u7684\u3002 \u4f46\u662f\u8fd8\u662f \u6709\u4e9b\u5dee\u5f02\uff1a</p> <pre><code>//\u4ee3\u78011\n#include &lt;stdio.h&gt;\nint main()\n{\n int i = 0;\n for(i=1; i&lt;=10; i++)\n {\n if(i == 5)\n break;\n printf(\"%d \",i);\n }\n return 0;\n}\n//\u4ee3\u78012\n#include &lt;stdio.h&gt;\nint main()\n{\n int i = 0;\n for(i=1; i&lt;=10; i++)\n {\n if(i == 5)\n continue;\n printf(\"%d \",i);\n }\n return 0;\n}\n</code></pre> <p>for\u8bed\u53e5\u7684\u5faa\u73af\u63a7\u5236\u53d8\u91cf \u4e00\u4e9b\u5efa\u8bae\uff1a</p> <pre><code>\u4e0d\u53ef\u5728for \u5faa\u73af\u4f53\u5185\u4fee\u6539\u5faa\u73af\u53d8\u91cf\uff0c\u9632\u6b62 for \u5faa\u73af\u5931\u53bb\u63a7\u5236\u3002\n</code></pre> <p>\u4e00\u4e9bfor\u5faa\u73af\u7684\u53d8\u79cd</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n //\u53d8\u79cd1\n for(;;)\n {\n printf(\"hehe\\n\");\n }\n //\u53d8\u79cd2\n int x, y;\n    for (x = 0, y = 0; x&lt;2 &amp;&amp; y&lt;5; ++x, y++)\n   {\n        printf(\"hehe\\n\");\n   }\n return 0;\n}\n</code></pre> <p>\u4e00\u9053\u7b14\u8bd5\u9898\uff1a</p> <pre><code>//\u8bf7\u95ee\u5faa\u73af\u8981\u5faa\u73af\u591a\u5c11\u6b21\uff1f0\u6b21\n#include &lt;stdio.h&gt;\nint main()\n{\n int i = 0;\n int k = 0;\n for(i =0,k=0; k=0; i++,k++)\n        k++;\n return 0;\n}\n</code></pre> <p>do...while()\u5faa\u73af do\u8bed\u53e5\u7684\u8bed\u6cd5\uff1a</p> <pre><code>do\n \u5faa\u73af\u8bed\u53e5\uff1b\nwhile(\u8868\u8fbe\u5f0f)\n</code></pre> <p>do\u8bed\u53e5\u7684\u7279\u70b9 \u5faa\u73af\u81f3\u5c11\u6267\u884c\u4e00\u6b21\uff0c\u4f7f\u7528\u7684\u573a\u666f\u6709\u9650\uff0c\u6240\u4ee5\u4e0d\u662f\u7ecf\u5e38\u4f7f\u7528\u3002</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n int i = 10;\n do\n {\n printf(\"%d\\n\", i);\n }while(i&lt;10);\n return 0;\n}\n</code></pre> <p>do while\u5faa\u73af\u4e2d\u7684break\u548ccontinue</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n int i = 10;\n do\n {\n        if(5 == i)\n            break;\n printf(\"%d\\n\", i);\n }while(i&lt;10);\n return 0;\n}\n#include &lt;stdio.h&gt;\nint main()\n{\n int i = 10;\n do\n {\n        if(5 == i)\n            continue;\n printf(\"%d\\n\", i);\n }while(i&lt;10);\n return 0;\n}\n</code></pre> <p>\u6298\u534a\u67e5\u627e\u7b97\u6cd5</p> <p>\u6bd4\u5982\u6211\u4e70\u4e86\u4e00\u53cc\u978b\uff0c\u4f60\u597d\u5947\u95ee\u6211\u591a\u5c11\u94b1\uff0c\u6211\u8bf4\u4e0d\u8d85\u8fc7300\u5143\u3002\u4f60\u8fd8\u662f\u597d\u5947\uff0c\u4f60\u60f3\u77e5\u9053\u5230\u5e95\u591a\u5c11\uff0c\u6211\u5c31\u8ba9 \u4f60\u731c\uff0c\u4f60\u4f1a\u600e\u4e48\u731c\uff1f \u7b54\u6848\uff1a\u4f60\u6bcf\u6b21\u731c\u4e2d\u95f4\u6570\u3002</p> <pre><code>\u5b9e\u73b0\u5728\u4e3b\u51fd\u6570\u5185\uff1a\nint main()\n{\n int arr[] = {1,2,3,4,5,6,7,8,9,10};\n int left = 0;\n int right = sizeof(arr)/sizeof(arr[0])-1;\n int key = 7;\n int mid = 0;\n while(left&lt;=right)\n {\n mid = (left+right)/2;\n if(arr[mid]&gt;key)\n {\n right = mid-1;\n }\n else if(arr[mid] &lt; key)\n {\n left = mid+1;\n }\n else\n break;\n }\n if(left &lt;= right)\n printf(\"\u627e\u5230\u4e86,\u4e0b\u6807\u662f%d\\n\", mid);\n else\n printf(\"\u627e\u4e0d\u5230\\n\");\n}\n</code></pre> <p>\u5982\u679c\u5b9e\u73b0\u4e00\u4e2a\u4e8c\u5206\u67e5\u627e\u51fd\u6570\uff1a</p> <pre><code>int bin_search(int arr[], int left, int right, int key)\n{\n int mid = 0;\n while(left&lt;=right)\n {\n mid = (left+right)&gt;&gt;1;\n if(arr[mid]&gt;key)\n {\n right = mid-1;\n }\n else if(arr[mid] &lt; key)\n {\n left = mid+1;\n }\n else\n return mid;//\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u4e0b\u6807\n }\n return -1;//\u627e\u4e0d\u5230\n}\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\nvoid menu()\n{\n printf(\"**********************************\\n\");\n printf(\"*********** 1.play     **********\\n\");\n printf(\"*********** 0.exit     **********\\n\");\n printf(\"**********************************\\n\");\n}\n//TDD-\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1\u3002\n//RAND_MAX--rand\u51fd\u6570\u80fd\u8fd4\u56de\u968f\u673a\u6570\u7684\u6700\u5927\u503c\u3002\nvoid game()\n{\n int random_num = rand()%100+1;\n int input = 0;\n while(1)\n {\n printf(\"\u8bf7\u8f93\u5165\u731c\u7684\u6570\u5b57&gt;:\");\n scanf(\"%d\", &amp;input);\n if(input &gt; random_num)\n {\n printf(\"\u731c\u5927\u4e86\\n\");\n }\n else if(input &lt; random_num)\n {\n printf(\"\u731c\u5c0f\u4e86\\n\");\n }\n\u6bd4\n</code></pre> <p>\u731c\u6570\u5b57\u6e38\u620f\u5b9e\u73b0 </p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\nvoid menu()\n{\n printf(\"**********************************\\n\");\n printf(\"*********** 1.play     **********\\n\");\n printf(\"*********** 0.exit     **********\\n\");\n printf(\"**********************************\\n\");\n}\n//TDD-\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1\u3002\n//RAND_MAX--rand\u51fd\u6570\u80fd\u8fd4\u56de\u968f\u673a\u6570\u7684\u6700\u5927\u503c\u3002\nvoid game()\n{\n int random_num = rand()%100+1;\n int input = 0;\n while(1)\n {\n printf(\"\u8bf7\u8f93\u5165\u731c\u7684\u6570\u5b57&gt;:\");\n scanf(\"%d\", &amp;input);\n if(input &gt; random_num)\n {\n printf(\"\u731c\u5927\u4e86\\n\");\n }\n else if(input &lt; random_num)\n {\n printf(\"\u731c\u5c0f\u4e86\\n\");\n }\n else\n {\n printf(\"\u606d\u559c\u4f60\uff0c\u731c\u5bf9\u4e86\\n\");\n break;\n }\n }\n}\nint main()\n{\n int input = 0;\n srand((unsigned)time(NULL));\n do\n {\n menu();\n printf(\"\u8bf7\u9009\u62e9&gt;:\");\n scanf(\"%d\", &amp;input);\n switch(input)\n {\n case 1:\n game();\n break;\n case 0:\n break;\n default:\n printf(\"\u9009\u62e9\u9519\u8bef,\u8bf7\u91cd\u65b0\u8f93\u5165!\\n\");\n break;\n }\n }while(input);\n return 0;\n}\n</code></pre> <p>goto\u8bed\u53e5</p> <p>C\u8bed\u8a00\u4e2d\u63d0\u4f9b\u4e86\u53ef\u4ee5\u968f\u610f\u6ee5\u7528\u7684 goto\u8bed\u53e5\u548c\u6807\u8bb0\u8df3\u8f6c\u7684\u6807\u53f7\u3002 \u4ece\u7406\u8bba\u4e0a goto\u8bed\u53e5\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u5b9e\u8df5\u4e2d\u6ca1\u6709goto\u8bed\u53e5\u4e5f\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5199\u51fa\u4ee3\u7801\u3002 \u4f46\u662f\u67d0\u4e9b\u573a\u5408\u4e0bgoto\u8bed\u53e5\u8fd8\u662f\u7528\u5f97\u7740\u7684\uff0c\u6700\u5e38\u89c1\u7684\u7528\u6cd5\u5c31\u662f\u7ec8\u6b62\u7a0b\u5e8f\u5728\u67d0\u4e9b\u6df1\u5ea6\u5d4c\u5957\u7684\u7ed3\u6784\u7684\u5904\u7406\u8fc7 \u7a0b\uff0c\u4f8b\u5982\u4e00\u6b21\u8df3\u51fa\u4e24\u5c42\u6216\u591a\u5c42\u5faa\u73af\u3002 \u8fd9\u79cd\u60c5\u51b5\u4f7f\u7528break\u662f\u8fbe\u4e0d\u5230\u76ee\u7684\u7684\u3002\u5b83\u53ea\u80fd\u4ece\u6700\u5185\u5c42\u5faa\u73af\u9000\u51fa\u5230\u4e0a\u4e00\u5c42\u7684\u5faa\u73af\u3002 \u4e0b\u9762\u662f\u4f7f\u7528goto\u8bed\u53e5\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    char input[10] = {0};\n    system(\"shutdown -s -t 60\");\nagain:\n    printf(\"\u7535\u8111\u5c06\u57281\u5206\u949f\u5185\u5173\u673a\uff0c\u5982\u679c\u8f93\u5165\uff1a\u6211\u662f\u732a\uff0c\u5c31\u53d6\u6d88\u5173\u673a!\\n\u8bf7\u8f93\u5165:&gt;\");\n    scanf(\"%s\", input);\n    if(0 == strcmp(input, \"\u6211\u662f\u732a\"))\n   {\n        system(\"shutdown -a\");\n   }\n    else\n   {\n        goto again;\n   }\n    return 0;\n}\n</code></pre> <p>\u800c\u5982\u679c\u4e0d\u9002\u7528goto\u8bed\u53e5\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u5faa\u73af\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main()\n{\n    char input[10] = {0};\n    system(\"shutdown -s -t 60\");\n    while(1)\n   {\n        printf(\"\u7535\u8111\u5c06\u57281\u5206\u949f\u5185\u5173\u673a\uff0c\u5982\u679c\u8f93\u5165\uff1a\u6211\u662f\u732a\uff0c\u5c31\u53d6\u6d88\u5173\u673a!\\n\u8bf7\u8f93\u5165:&gt;\");\n        scanf(\"%s\", input);\n        if(0 == strcmp(input, \"\u6211\u662f\u732a\"))\n       {\n            system(\"shutdown -a\");\n            break;\n       }\n   }\n    return 0;\n}\n</code></pre> <p>goto\u8bed\u8a00\u771f\u6b63\u9002\u5408\u7684\u573a\u666f\u5982\u4e0b\uff1a</p> <pre><code>for(...)\n    for(...)\n   {\n        for(...)\n       {\n            if(disaster)\n                goto error;\n       }\n   }\n    \u2026\nerror:\n if(disaster)\n    // \u5904\u7406\u9519\u8bef\u60c5\u51b5\n</code></pre>"},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/","title":"\u521d\u59cbC\u8bed\u8a00","text":""},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/#c_1","title":"\u4ec0\u4e48\u662fC\u8bed\u8a00\uff1f","text":"<p>C\u8bed\u8a00\u662f\u4e00\u95e8\u901a\u7528\u8ba1\u7b97\u673a\u7f16\u7a0b\u8bed\u8a00\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5e95\u5c42\u5f00\u53d1\u3002C\u8bed\u8a00\u7684\u8bbe\u8ba1\u76ee\u6807\u662f\u63d0\u4f9b\u4e00\u79cd\u80fd\u4ee5\u7b80\u6613 \u7684\u65b9\u5f0f\u7f16\u8bd1\u3001\u5904\u7406\u4f4e\u7ea7\u5b58\u50a8\u5668\u3001\u4ea7\u751f\u5c11\u91cf\u7684\u673a\u5668\u7801\u4ee5\u53ca\u4e0d\u9700\u8981\u4efb\u4f55\u8fd0\u884c\u73af\u5883\u652f\u6301\u4fbf\u80fd\u8fd0\u884c\u7684\u7f16\u7a0b \u8bed\u8a00\u3002</p> <p>\u5c3d\u7ba1C\u8bed\u8a00\u63d0\u4f9b\u4e86\u8bb8\u591a\u4f4e\u7ea7\u5904\u7406\u7684\u529f\u80fd\uff0c\u4f46\u4ecd\u7136\u4fdd\u6301\u7740\u826f\u597d\u8de8\u5e73\u53f0\u7684\u7279\u6027\uff0c\u4ee5\u4e00\u4e2a\u6807\u51c6\u89c4\u683c\u5199\u51fa\u7684 C\u8bed\u8a00\u7a0b\u5e8f\u53ef\u5728\u8bb8\u591a\u7535\u8111\u5e73\u53f0\u4e0a\u8fdb\u884c\u7f16\u8bd1\uff0c\u751a\u81f3\u5305\u542b\u4e00\u4e9b\u5d4c\u5165\u5f0f\u5904\u7406\u5668\uff08\u5355\u7247\u673a\u6216\u79f0MCU\uff09\u4ee5\u53ca \u8d85\u7ea7\u7535\u8111\u7b49\u4f5c\u4e1a\u5e73\u53f0\u3002</p> <p>\u4e8c\u5341\u4e16\u7eaa\u516b\u5341\u5e74\u4ee3\uff0c\u4e3a\u4e86\u907f\u514d\u5404\u5f00\u53d1\u5382\u5546\u7528\u7684C\u8bed\u8a00\u8bed\u6cd5\u4ea7\u751f\u5dee\u5f02\uff0c\u7531\u7f8e\u56fd\u56fd\u5bb6\u6807\u51c6\u5c40\u4e3aC\u8bed\u8a00\u5236 \u5b9a\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u7f8e\u56fd\u56fd\u5bb6\u6807\u51c6\u8bed\u6cd5\uff0c\u79f0\u4e3aANSI C\uff0c\u4f5c\u4e3aC\u8bed\u8a00\u6700\u521d\u7684\u6807\u51c6\u3002 [1] \u76ee\u524d2011\u5e7412\u67088 \u65e5\uff0c\u56fd\u9645\u6807\u51c6\u5316\u7ec4\u7ec7\uff08ISO\uff09\u548c\u56fd\u9645\u7535\u5de5\u59d4\u5458\u4f1a\uff08IEC\uff09\u53d1\u5e03\u7684C11\u6807\u51c6\u662fC\u8bed\u8a00\u7684\u7b2c\u4e09\u4e2a\u5b98\u65b9\u6807 \u51c6\uff0c\u4e5f\u662fC\u8bed\u8a00\u7684\u6700\u65b0\u6807\u51c6\uff0c\u8be5\u6807\u51c6\u66f4\u597d\u7684\u652f\u6301\u4e86\u6c49\u5b57\u51fd\u6570\u540d\u548c\u6c49\u5b57\u6807\u8bc6\u7b26\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5b9e\u73b0\u4e86\u6c49 \u5b57\u7f16\u7a0b\u3002</p> <p>C\u8bed\u8a00\u662f\u4e00\u95e8\u9762\u5411\u8fc7\u7a0b\u7684\u8ba1\u7b97\u673a\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e0eC++\uff0cJava\u7b49\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\u6709\u6240\u4e0d\u540c\u3002 \u5176\u7f16\u8bd1\u5668\u4e3b\u8981\u6709Clang\u3001GCC\u3001WIN-TC\u3001SUBLIME\u3001MSVC\u3001Turbo C\u7b49\u3002</p>"},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/#c_2","title":"\u7b2c\u4e00\u4e2aC\u8bed\u8a00\u7a0b\u5e8f","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    printf(\"hello bit\\n\");\n    printf(\"he he\\n\");\n    return 0;\n}\n//\u89e3\u91ca\uff1a\n//main\u51fd\u6570\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\n//\u4e00\u4e2a\u5de5\u7a0b\u4e2dmain\u51fd\u6570\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\n</code></pre>"},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/#_1","title":"\u6570\u636e\u7c7b\u578b","text":"<pre><code>char        //\u5b57\u7b26\u6570\u636e\u7c7b\u578b\nshort       //\u77ed\u6574\u578b\nint         //\u6574\u5f62\nlong        //\u957f\u6574\u578b\nlong long   //\u66f4\u957f\u7684\u6574\u5f62\nfloat       //\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\ndouble      //\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\n//C\u8bed\u8a00\u6709\u6ca1\u6709\u5b57\u7b26\u4e32\u7c7b\u578b\uff1f\n</code></pre> <ul> <li>\u4e3a\u4ec0\u4e48\u51fa\u73b0\u8fd9\u4e48\u7684\u7c7b\u578b\uff1f</li> <li>\u6bcf\u79cd\u7c7b\u578b\u7684\u5927\u5c0f\u662f\u591a\u5c11\uff1f</li> </ul> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    printf(\"%d\\n\", sizeof(char));       // 1\n    printf(\"%d\\n\", sizeof(short));      // 2\n    printf(\"%d\\n\", sizeof(int));        // 4\n    printf(\"%d\\n\", sizeof(long));       // 4 \n    printf(\"%d\\n\", sizeof(long long));  // 8\n    printf(\"%d\\n\", sizeof(float));      // 4\n    printf(\"%d\\n\", sizeof(double));     // 8\n    printf(\"%d\\n\", sizeof(long double));// 8\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f\uff1a\u5b58\u5728\u8fd9\u4e48\u591a\u7684\u7c7b\u578b\uff0c\u5176\u5b9e\u662f\u4e3a\u4e86\u66f4\u52a0\u4e30\u5bcc\u7684\u8868\u8fbe\u751f\u6d3b\u4e2d\u7684\u5404\u79cd\u503c\u3002</p>"},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/#_2","title":"\u53d8\u91cf\u3001\u5e38\u91cf","text":"<p>\u751f\u6d3b\u4e2d\u7684\u6709\u4e9b\u503c\u662f\u4e0d\u53d8\u7684\uff08\u6bd4\u5982\uff1a\u5706\u5468\u7387\uff0c\u6027\u522b\uff08\uff1f\uff09\uff0c\u8eab\u4efd\u8bc1\u53f7\u7801\uff0c\u8840\u578b\u7b49\u7b49\uff09 \u6709\u4e9b\u503c\u662f\u53ef\u53d8\u7684\uff08\u6bd4\u5982\uff1a\u5e74\u9f84\uff0c\u4f53\u91cd\uff0c\u85aa\u8d44\uff09\u3002 \u4e0d\u53d8\u7684\u503c\uff0cC\u8bed\u8a00\u4e2d\u7528\u5e38\u91cf\u7684\u6982\u5ff5\u6765\u8868\u793a\uff0c\u53d8\u5f97\u503cC\u8bed\u8a00\u4e2d\u7528\u53d8\u91cf\u6765\u8868\u793a\u3002</p> <p>\u5b9a\u4e49\u53d8\u91cf\u7684\u65b9\u6cd5:</p> <pre><code>int age = 150;\nfloat weight = 45.5f; \nchar ch = 'w';\n</code></pre> <p>\u53d8\u91cf\u7684\u5206\u7c7b:</p> <ul> <li>\u5c40\u90e8\u53d8\u91cf</li> <li>\u5168\u5c40\u53d8\u91cf</li> </ul> <pre><code>#include &lt;stdio.h&gt;\nint global = 2019;//\u5168\u5c40\u53d8\u91cf\nint main()\n{\n    int local = 2018;//\u5c40\u90e8\u53d8\u91cf\n    //\u4e0b\u9762\u5b9a\u4e49\u7684global\u4f1a\u4e0d\u4f1a\u6709\u95ee\u9898\uff1f\n    int global = 2020;//\u5c40\u90e8\u53d8\u91cf\n    printf(\"global = %d\\n\", global);\n    return 0;\n}\n</code></pre> <p>\u603b\u7ed3\uff1a</p> <p>\u4e0a\u9762\u7684\u5c40\u90e8\u53d8\u91cfglobal\u53d8\u91cf\u7684\u5b9a\u4e49\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\u7684\uff01</p> <p>\u5f53\u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf\u540c\u540d\u7684\u65f6\u5019\uff0c\u5c40\u90e8\u53d8\u91cf\u4f18\u5148\u4f7f\u7528\u3002</p> <p>\u53d8\u91cf\u7684\u4f7f\u7528:</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int num1 = 0;\n   int num2 = 0;\n    int sum = 0;\n    printf(\"\u8f93\u5165\u4e24\u4e2a\u64cd\u4f5c\u6570:&gt;\");\n    scanf(\"%d %d\", &amp;a, &amp;b);\n    sum = num1 + num2;\n    printf(\"sum = %d\\n\", sum);\n    return 0;\n}\n//\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e0b\u8f93\u5165\uff0c\u8f93\u51fa\u8bed\u53e5\n//scanf\n//printf\n</code></pre> <p>\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u548c\u751f\u547d\u5468\u671f \u4f5c\u7528\u57df:</p> <p>\u4f5c\u7528\u57df\uff08scope\uff09\uff0c\u7a0b\u5e8f\u8bbe\u8ba1\u6982\u5ff5\uff0c\u901a\u5e38\u6765\u8bf4\uff0c\u4e00\u6bb5\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u6240\u7528\u5230\u7684\u540d\u5b57\u5e76\u4e0d\u603b\u662f\u6709\u6548/\u53ef\u7528\u7684</p> <p>\u800c\u9650\u5b9a\u8fd9\u4e2a\u540d\u5b57\u7684\u53ef\u7528\u6027\u7684\u4ee3\u7801\u8303\u56f4\u5c31\u662f\u8fd9\u4e2a\u540d\u5b57\u7684\u4f5c\u7528\u57df\u3002</p> <ol> <li>\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u53d8\u91cf\u6240\u5728\u7684\u5c40\u90e8\u8303\u56f4\u3002</li> <li>\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u6574\u4e2a\u5de5\u7a0b\u3002</li> </ol> <p>\u751f\u547d\u5468\u671f</p> <p>\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u6307\u7684\u662f\u53d8\u91cf\u7684\u521b\u5efa\u5230\u53d8\u91cf\u7684\u9500\u6bc1\u4e4b\u95f4\u7684\u4e00\u4e2a\u65f6\u95f4\u6bb5</p> <ol> <li> <p>\u5c40\u90e8\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u662f\uff1a\u8fdb\u5165\u4f5c\u7528\u57df\u751f\u547d\u5468\u671f\u5f00\u59cb\uff0c\u51fa\u4f5c\u7528\u57df\u751f\u547d\u5468\u671f\u7ed3\u675f\u3002</p> </li> <li> <p>\u5168\u5c40\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u662f\uff1a\u6574\u4e2a\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u3002</p> </li> </ol> <p>\u5e38\u91cf</p> <p>C\u8bed\u8a00\u4e2d\u7684\u5e38\u91cf\u548c\u53d8\u91cf\u7684\u5b9a\u4e49\u7684\u5f62\u5f0f\u6709\u6240\u5dee\u5f02\u3002</p> <p>C\u8bed\u8a00\u4e2d\u7684\u5e38\u91cf\u5206\u4e3a\u4ee5\u4e0b\u4ee5\u4e0b\u51e0\u79cd\uff1a</p> <ul> <li>\u5b57\u9762\u5e38\u91cf</li> <li>const \u4fee\u9970\u7684\u5e38\u53d8\u91cf</li> <li>define \u5b9a\u4e49\u7684\u6807\u8bc6\u7b26\u5e38\u91cf</li> <li>\u679a\u4e3e\u5e38\u91cf</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n//\u4e3e\u4f8b\nenum Sex\n{\n MALE,\n FEMALE,\n SECRET\n};\n//\u62ec\u53f7\u4e2d\u7684MALE,FEMALE,SECRET\u662f\u679a\u4e3e\u5e38\u91cf\nint main()\n{\n    3.14;//\u5b57\u9762\u5e38\u91cf\n    1000;//\u5b57\u9762\u5e38\u91cf\n    const float pai = 3.14f;   //const \u4fee\u9970\u7684\u5e38\u91cf\n    pai = 5.14;//ok?\n #define MAX 100            //#define\u7684\u6807\u8bc6\u7b26\u5e38\u91cf    \n    return 0;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/#_3","title":"\u5b57\u7b26\u4e32+\u8f6c\u4e49\u5b57\u7b26+\u6ce8\u91ca","text":"<p>\u5b57\u7b26\u4e32</p> <pre><code>\"hello bit.\\n\"\n</code></pre> <p>\u8fd9\u79cd\u7531\u53cc\u5f15\u53f7\uff08Double Quote\uff09\u5f15\u8d77\u6765\u7684\u4e00\u4e32\u5b57\u7b26\u79f0\u4e3a\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff08String Literal\uff09\uff0c\u6216\u8005\u7b80\u79f0\u5b57 \u7b26\u4e32\u3002 \u6ce8\uff1a\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u6807\u5fd7\u662f\u4e00\u4e2a \\0 \u7684\u8f6c\u4e49\u5b57\u7b26\u3002\u5728\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u65f6\u5019 \\0 \u662f\u7ed3\u675f\u6807\u5fd7\uff0c\u4e0d\u7b97\u4f5c\u5b57\u7b26\u4e32 \u5185\u5bb9\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n//\u4e0b\u9762\u4ee3\u7801\uff0c\u6253\u5370\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f\u4e3a\u4ec0\u4e48\uff1f\uff08\u7a81\u51fa'\\0'\u7684\u91cd\u8981\u6027\uff09\nint main()\n{\n    char arr1[] = \"bit\";\n    char arr2[] = {'b', 'i', 't'};\n    char arr3[] = {'b', 'i', 't'\uff0c '\\0'};\n    printf(\"%s\\n\", arr1);\n    printf(\"%s\\n\", arr2);\n    printf(\"%s\\n\", arr3);\n    return 0;\n}\n</code></pre> <p>\u8f6c\u4e49\u5b57\u7b26 \u52a0\u5165\u6211\u4eec\u8981\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u4e00\u4e2a\u76ee\u5f55\uff1a c:\\code\\test.c \u6211\u4eec\u8be5\u5982\u4f55\u5199\u4ee3\u7801\uff1f</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n printf(\"c:\\code\\test.c\\n\");\n    return 0;\n}\n</code></pre> <p>\u5b9e\u9645\u4e0a\u7a0b\u5e8f\u8fd0\u884c\u7684\u7ed3\u679c\u662f\u8fd9\u6837\u7684\uff1a  \u8fd9\u91cc\u5c31\u4e0d\u5f97\u4e0d\u63d0\u4e00\u4e0b\u8f6c\u4e49\u5b57\u7b26\u4e86\u3002\u8f6c\u4e49\u5b57\u7b26\u987e\u540d\u601d\u4e49\u5c31\u662f\u8f6c\u53d8\u610f\u601d\u3002 \u4e0b\u9762\u770b\u4e00\u4e9b\u8f6c\u4e49\u5b57\u7b26\u3002</p> \u8f6c\u4e49\u5b57\u7b26 \u91ca\u4e49 \\? \u5728\u4e66\u5199\u8fde\u7eed\u591a\u4e2a\u95ee\u53f7\u65f6\u4f7f\u7528\uff0c\u9632\u6b62\u4ed6\u4eec\u88ab\u89e3\u6790\u6210\u4e09\u5b57\u6bcd\u8bcd \\' \u7528\u4e8e\u8868\u793a\u5b57\u7b26\u5e38\u91cf' \\\u201c \u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5185\u90e8\u7684\u53cc\u5f15\u53f7 \\ \u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u53cd\u659c\u6760\uff0c\u9632\u6b62\u5b83\u88ab\u89e3\u91ca\u4e3a\u4e00\u4e2a\u8f6c\u4e49\u5e8f\u5217\u7b26\u3002 \\a \u8b66\u544a\u5b57\u7b26\uff0c\u8702\u9e23 \\b \u9000\u683c\u7b26 \\f \u8fdb\u7eb8\u7b26 \\n \u6362\u884c \\r \u56de\u8f66 \\t \u6c34\u5e73\u5236\u8868\u7b26 \\v \u5782\u76f4\u5236\u8868\u7b26 \\ddd ddd\u8868\u793a1~3\u4e2a\u516b\u8fdb\u5236\u7684\u6570\u5b57\u3002 \u5982\uff1a \\130 X \\xdd dd\u8868\u793a2\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u5b57\u3002 \u5982\uff1a \\x30 0 <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    //\u95ee\u98981\uff1a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u4e00\u4e2a\u5355\u5f15\u53f7'\uff0c\u600e\u4e48\u505a\uff1f\n    //\u95ee\u98982\uff1a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u662f\u4e00\u4e2a\u53cc\u5f15\u53f7\u201c\uff0c\u600e\u4e48\u505a\uff1f\n    printf(\"%c\\n\", '\\'');\n    printf(\"%s\\n\", \"\\\"\");\n    return 0;\n}\n</code></pre> <p>\u7b14\u8bd5\u9898:</p> <pre><code>//\u7a0b\u5e8f\u8f93\u51fa\u4ec0\u4e48\uff1f\n#include &lt;stdio.h&gt;\nint main()\n{\n    printf(\"%d\\n\", strlen(\"abcdef\"));\n    // \\32\u88ab\u89e3\u6790\u6210\u4e00\u4e2a\u8f6c\u4e49\u5b57\u7b26\n    printf(\"%d\\n\", strlen(\"c:\\test\\328\\test.c\"));\n    return 0;\n}\n</code></pre> <p>\u6ce8\u91ca</p> <ol> <li>\u4ee3\u7801\u4e2d\u6709\u4e0d\u9700\u8981\u7684\u4ee3\u7801\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\uff0c\u4e5f\u53ef\u4ee5\u6ce8\u91ca\u6389</li> <li>\u4ee3\u7801\u4e2d\u6709\u4e9b\u4ee3\u7801\u6bd4\u8f83\u96be\u61c2\uff0c\u53ef\u4ee5\u52a0\u4e00\u4e0b\u6ce8\u91ca\u6587\u5b57</li> </ol> <p>\u6bd4\u5982:</p> <pre><code>#include &lt;stdio.h&gt;\nint Add(int x, int y)\n{\n    return x+y;\n}\n/*C\u8bed\u8a00\u98ce\u683c\u6ce8\u91ca\nint Sub(int x, int y)\n{\n    return x-y;\n}\n*/\nint main()\n{\n    //C++\u6ce8\u91ca\u98ce\u683c\n    //int a = 10;\n    //\u8c03\u7528Add\u51fd\u6570\uff0c\u5b8c\u6210\u52a0\u6cd5\n    printf(\"%d\\n\", Add(1, 2));\n    return 0;\n}\n</code></pre> <p>\u6ce8\u91ca\u6709\u4e24\u79cd\u98ce\u683c\uff1a</p> <ul> <li>C\u8bed\u8a00\u98ce\u683c\u7684\u6ce8\u91ca /xxxxxx/</li> <li>\u7f3a\u9677\uff1a\u4e0d\u80fd\u5d4c\u5957\u6ce8\u91ca</li> <li>C++\u98ce\u683c\u7684\u6ce8\u91ca //xxxxxxxx</li> <li>\u53ef\u4ee5\u6ce8\u91ca\u4e00\u884c\u4e5f\u53ef\u4ee5\u6ce8\u91ca\u591a\u884c</li> </ul>"},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/#_4","title":"\u9009\u62e9\u8bed\u53e5","text":"<p>\u5982\u679c\u4f60\u597d\u597d\u5b66\u4e60\uff0c\u6821\u62db\u65f6\u62ff\u4e00\u4e2a\u597doffer\uff0c\u8d70\u4e0a\u4eba\u751f\u5dc5\u5cf0\u3002</p> <p>\u5982\u679c\u4f60\u4e0d\u5b66\u4e60\uff0c\u6bd5\u4e1a\u7b49\u4e8e\u5931\u4e1a\uff0c\u56de\u5bb6\u5356\u7ea2\u85af\u3002</p> <p>\u8fd9\u5c31\u662f\u9009\u62e9\uff01</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int coding = 0;\n    printf(\"\u4f60\u4f1a\u53bb\u6572\u4ee3\u7801\u5417\uff1f\uff08\u9009\u62e91 or 0\uff09:&gt;\");\n    scanf(\"%d\", &amp;coding);\n    if(coding == 1)\n   {\n       prinf(\"\u575a\u6301\uff0c\u4f60\u4f1a\u6709\u597doffer\\n\");\n   }\n    else\n   {\n       printf(\"\u653e\u5f03\uff0c\u56de\u5bb6\u5356\u7ea2\u85af\\n\");\n   }\n    return 0;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/#_5","title":"\u5faa\u73af\u8bed\u53e5","text":"<p>\u6709\u4e9b\u4e8b\u5fc5\u987b\u4e00\u76f4\u505a\uff0c\u6bd4\u5982\u6211\u65e5\u590d\u4e00\u65e5\u7684\u8bb2\u8bfe\uff0c\u6bd4\u5982\u5927\u5bb6\uff0c\u65e5\u590d\u4e00\u65e5\u7684\u5b66\u4e60\u3002</p> <p>C\u8bed\u8a00\u4e2d\u5982\u4f55\u5b9e\u73b0\u5faa\u73af\u5462\uff1f</p> <ul> <li>while\u8bed\u53e5-\u8bb2\u89e3</li> <li>for\u8bed\u53e5\uff08\u540e\u671f\u8bb2\uff09</li> <li>do ... while\u8bed\u53e5\uff08\u540e\u671f\u8bb2\uff09</li> </ul> <pre><code>//while\u5faa\u73af\u7684\u5b9e\u4f8b\n#include &lt;stdio.h&gt;\nint main()\n{\n    printf(\"\u52a0\u5165\u6bd4\u7279\\n\");\n    int line = 0;\n    while(line&lt;=20000)\n   {\n        line++;\n        printf(\"\u6211\u8981\u7ee7\u7eed\u52aa\u529b\u6572\u4ee3\u7801\\n\");\n   }\n    if(line&gt;20000)\n        printf(\"\u8d62\u53d6\u767d\u5bcc\u7f8e\\n\");\n    return 0;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/#_6","title":"\u51fd\u6570","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int num1 = 0;\n   int num2 = 0;\n    int sum = 0;\n    printf(\"\u8f93\u5165\u4e24\u4e2a\u64cd\u4f5c\u6570:&gt;\");\n    scanf(\"%d %d\", &amp;a, &amp;b);\n    sum = num1 + num2;\n    printf(\"sum = %d\\n\", sum);\n    return 0;\n}\n\u4e0a\u8ff0\u4ee3\u7801\uff0c\u5199\u6210\u51fd\u6570\u5982\u4e0b\uff1a\n#include &lt;stdio.h&gt;\nint Add(int x, int y)\n{\n   int z = x+y;\n   return z;\n}\nint main()\n{\n    int num1 = 0;\n   int num2 = 0;\n    int sum = 0;\n    printf(\"\u8f93\u5165\u4e24\u4e2a\u64cd\u4f5c\u6570:&gt;\");\n    scanf(\"%d %d\", &amp;num1, &amp;num2);\n    sum = Add(num1, num2);\n    printf(\"sum = %d\\n\", sum);\n    return 0;\n}\n</code></pre> <p>\u51fd\u6570\u7684\u7279\u70b9\u5c31\u662f\u7b80\u5316\u4ee3\u7801\uff0c\u4ee3\u7801\u590d\u7528\u3002</p>"},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/#_7","title":"\u6570\u7ec4","text":"<p>\u8981\u5b58\u50a81-10\u7684\u6570\u5b57\uff0c\u600e\u4e48\u5b58\u50a8</p> <p>C\u8bed\u8a00\u4e2d\u7ed9\u4e86\u6570\u7ec4\u7684\u5b9a\u4e49\uff1a\u4e00\u7ec4\u76f8\u540c\u7c7b\u578b\u5143\u7d20\u7684\u96c6\u5408</p> <p>\u6570\u7ec4\u5b9a\u4e49</p> <pre><code>int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n</code></pre> <p>\u6570\u7ec4\u7684\u4f7f\u7528</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n int i = 0;\n int arr[10] = {1,2,3,4,5,6,7,8,9,10};\n for(i=0; i&lt;10; i++)\n {\n       printf(\"%d \", arr[i]);\n }\n printf(\"\\n\");\n    return 0;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/#_8","title":"\u64cd\u4f5c\u7b26","text":"<p>\u7b80\u5355\u4ecb\u7ecd\u4e3a\u4e3b\uff0c\u540e\u9762\u8bfe\u4ef6\u91cd\u70b9\u8bb2\u3002</p> <p>\u7b97\u672f\u64cd\u4f5c\u7b26</p> <pre><code>+ - * / %\n</code></pre> <p>\u79fb\u4f4d\u64cd\u4f5c\u7b26</p> <pre><code>&gt;&gt; &lt;&lt;\n</code></pre> <p>\u4f4d\u64cd\u4f5c\u7b26</p> <pre><code>&amp; ^ |\n</code></pre> <p>\u8d4b\u503c\u64cd\u4f5c\u7b26</p> <pre><code>= += -= *= /= &amp;= ^=  |=    &gt;&gt;=   &lt;&lt;=\n</code></pre> <p>\u5355\u76ee\u64cd\u4f5c\u7b26</p> \u7b26\u53f7 \u4f5c\u7528 ! \u903b\u8f91\u53cd\u64cd\u4f5c - \u8d1f\u503c + \u6b63\u503c &amp; \u53d6\u5730\u5740 sizeof \u64cd\u4f5c\u6570\u7684\u7c7b\u578b\u957f\u5ea6\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09 ~ \u5bf9\u4e00\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u6309\u4f4d\u53d6\u53cd -- \u524d\u7f6e\u3001\u540e\u7f6e-- ++ \u524d\u7f6e\u3001\u540e\u7f6e++ * \u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u7b26(\u89e3\u5f15\u7528\u64cd\u4f5c\u7b26) (\u7c7b\u578b) \u5f3a\u5236\u7c7b\u578b\u8f6c\u6362 <p>\u5173\u7cfb\u64cd\u4f5c\u7b26</p> <pre><code>&gt;\n&gt;=\n&lt;\n&lt;=\n!=   \u7528\u4e8e\u6d4b\u8bd5\u201c\u4e0d\u76f8\u7b49\u201d\n==      \u7528\u4e8e\u6d4b\u8bd5\u201c\u76f8\u7b49\u201d\n</code></pre> <p>\u903b\u8f91\u64cd\u4f5c\u7b26</p> <pre><code>&amp;&amp;     \u903b\u8f91\u4e0e\n||     \u903b\u8f91\u6216\n</code></pre> <p>\u6761\u4ef6\u64cd\u4f5c\u7b26</p> <pre><code>exp1 ? exp2 : exp3\n</code></pre> <p>\u9017\u53f7\u8868\u8fbe\u5f0f</p> <pre><code>exp1, exp2, exp3, \u2026expN\n</code></pre> <p>\u4e0b\u6807\u5f15\u7528\u3001\u51fd\u6570\u8c03\u7528\u548c\u7ed3\u6784\u6210\u5458</p> <pre><code>[] () . -&gt;\n</code></pre>"},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/#_9","title":"\u5e38\u89c1\u5173\u952e\u5b57","text":"<pre><code>auto  break   case  char  const   continue  default  do   double else  enum   \nextern float  for   goto  if   int   long  register    return   short  signed\nsizeof   static struct  switch  typedef union  unsigned   void  volatile  while\n</code></pre> <p>\u6ce8\uff1a\u5173\u952e\u5b57\uff0c\u5148\u4ecb\u7ecd\u4e0b\u9762\u51e0\u4e2a\uff0c\u540e\u671f\u9047\u5230\u8bb2\u89e3\u3002 \u5173\u952e\u5b57 typedef</p> <p>typedef \u987e\u540d\u601d\u4e49\u662f\u7c7b\u578b\u5b9a\u4e49\uff0c\u8fd9\u91cc\u5e94\u8be5\u7406\u89e3\u4e3a\u7c7b\u578b\u91cd\u547d\u540d\u3002</p> <pre><code>//\u5c06unsigned int \u91cd\u547d\u540d\u4e3auint_32, \u6240\u4ee5uint_32\u4e5f\u662f\u4e00\u4e2a\u7c7b\u578b\u540d\ntypedef unsigned int uint_32;\nint main()\n{\n    //\u89c2\u5bdfnum1\u548cnum2,\u8fd9\u4e24\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\u662f\u4e00\u6837\u7684\n    unsigned int num1 = 0;\n    uint_32 num2 = 0;\n    return 0;\n}\n</code></pre> <p>\u5173\u952e\u5b57static</p> <p>\u5728C\u8bed\u8a00\u4e2d\uff1a static\u662f\u7528\u6765\u4fee\u9970\u53d8\u91cf\u548c\u51fd\u6570\u7684 1. \u4fee\u9970\u5c40\u90e8\u53d8\u91cf-\u9759\u6001\u5c40\u90e8\u53d8\u91cf 2. \u4fee\u9970\u5168\u5c40\u53d8\u91cf-\u9759\u6001\u5168\u5c40\u53d8\u91cf 3. \u4fee\u9970\u51fd\u6570-\u9759\u6001\u51fd\u6570</p> <pre><code>//\u4ee3\u78011\n#include &lt;stdio.h&gt;\nvoid test()\n{\n    int i = 0;\n    i++;\n    printf(\"%d \", i);\n}\nint main()\n{\n int i = 0;\n    for(i=0; i&lt;10; i++)\n   {\n        test();\n   }\n    return 0;\n}\n//\u4ee3\u78012\n#include &lt;stdio.h&gt;\nvoid test()\n{\n    //static\u4fee\u9970\u5c40\u90e8\u53d8\u91cf\n    static int i = 0;\n    i++;\n    printf(\"%d \", i);\n}\nint main()\n{\n int i = 0;\n    for(i=0; i&lt;10; i++)\n   {\n        test();\n   }\n    return 0;\n}\n</code></pre> <p>\u5bf9\u6bd4\u4ee3\u78011\u548c\u4ee3\u78012\u7684\u6548\u679c\u7406\u89e3static\u4fee\u9970\u5c40\u90e8\u53d8\u91cf\u7684\u610f\u4e49\u3002</p> <p>\u7ed3\u8bba\uff1a</p> <p>static\u4fee\u9970\u5c40\u90e8\u53d8\u91cf\u6539\u53d8\u4e86\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\uff0c\u8ba9\u9759\u6001\u5c40\u90e8\u53d8\u91cf\u51fa\u4e86\u4f5c\u7528\u57df\u4f9d\u7136\u5b58\u5728\uff0c\u5230\u7a0b\u5e8f\u7ed3\u675f\uff0c \u751f\u547d\u5468\u671f\u624d\u7ed3\u675f\u3002</p> <p>\u4fee\u9970\u5168\u5c40\u53d8\u91cf</p> <pre><code>//\u4ee3\u78011\n//add.c\nint g_val = 2018;\n//test.c\nint main()\n{\n    printf(\"%d\\n\", g_val);\n    return 0;\n}\n//\u4ee3\u78012\n//add.c\nstatic int g_val = 2018;\n//test.c\nint main()\n{\n    printf(\"%d\\n\", g_val);\n    return 0;\n}\n\n</code></pre> <p>\u4ee3\u78011\u6b63\u5e38\uff0c\u4ee3\u78012\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u8fde\u63a5\u6027\u9519\u8bef\u3002</p> <p>\u7ed3\u8bba\uff1a</p> <p>\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u88abstatic\u4fee\u9970\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\u53ea\u80fd\u5728\u672c\u6e90\u6587\u4ef6\u5185\u4f7f\u7528\uff0c \u4e0d\u80fd\u5728\u5176\u4ed6\u6e90\u6587\u4ef6\u5185\u4f7f\u7528\u3002</p> <p>\u4fee\u9970\u51fd\u6570</p> <pre><code>//\u4ee3\u78011\n//add.c\nint Add(int x, int y)\n{\n    return c+y;\n}\n//test.c\nint main()\n{\n    printf(\"%d\\n\", Add(2, 3));\n    return 0;\n}\n//\u4ee3\u78012\n//add.c\nstatic int Add(int x, int y)\n{\n    return c+y;\n}\n//test.c\nint main()\n{\n    printf(\"%d\\n\", Add(2, 3));\n    return 0;\n}\n\n</code></pre> <p>\u4ee3\u78011\u6b63\u5e38\uff0c\u4ee3\u78012\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u8fde\u63a5\u6027\u9519\u8bef.</p> <p>\u7ed3\u8bba\uff1a</p> <p>\u4e00\u4e2a\u51fd\u6570\u88abstatic\u4fee\u9970\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u51fd\u6570\u53ea\u80fd\u5728\u672c\u6e90\u6587\u4ef6\u5185\u4f7f\u7528\uff0c\u4e0d\u80fd\u5728\u5176\u4ed6\u6e90\u6587\u4ef6\u5185\u4f7f\u7528\u3002</p> <p>#define \u5b9a\u4e49\u5e38\u91cf\u548c\u5b8f</p> <pre><code>//define\u5b9a\u4e49\u6807\u8bc6\u7b26\u5e38\u91cf\n#define MAX 1000\n//define\u5b9a\u4e49\u5b8f\n#define ADD(x, y) ((x)+(y))\n#include &lt;stdio.h&gt;\nint main()\n{\n    int sum = ADD(2, 3);\n    printf(\"sum = %d\\n\", sum);\n    sum = 10*ADD(2, 3);\n    printf(\"sum = %d\\n\", sum);\n    return 0;\n}\n\n</code></pre>"},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/#_10","title":"\u6307\u9488","text":"<p>\u5185\u5b58 \u5185\u5b58\u662f\u7535\u8111\u4e0a\u7279\u522b\u91cd\u8981\u7684\u5b58\u50a8\u5668\uff0c\u8ba1\u7b97\u673a\u4e2d\u6240\u6709\u7a0b\u5e8f\u7684\u8fd0\u884c\u90fd\u662f\u5728\u5185\u5b58\u4e2d\u8fdb\u884c\u7684 \u3002 \u6240\u4ee5\u4e3a\u4e86\u6709\u6548\u7684\u4f7f\u7528\u5185\u5b58\uff0c\u5c31\u628a\u5185\u5b58\u5212\u5206\u6210\u4e00\u4e2a\u4e2a\u5c0f\u7684\u5185\u5b58\u5355\u5143\uff0c\u6bcf\u4e2a\u5185\u5b58\u5355\u5143\u7684\u5927\u5c0f\u662f1\u4e2a\u5b57\u8282\u3002 \u4e3a\u4e86\u80fd\u591f\u6709\u6548\u7684\u8bbf\u95ee\u5230\u5185\u5b58\u7684\u6bcf\u4e2a\u5355\u5143\uff0c\u5c31\u7ed9\u5185\u5b58\u5355\u5143\u8fdb\u884c\u4e86\u7f16\u53f7\uff0c\u8fd9\u4e9b\u7f16\u53f7\u88ab\u79f0\u4e3a\u8be5\u5185\u5b58\u5355\u5143\u7684\u5730 \u5740\u3002</p> <p>\u53d8\u91cf\u90fd\u6709\u5730\u5740\uff0c\u53d6\u51fa\u53d8\u91cf\u5730\u5740\u5982\u4e0b\uff1a</p> <pre><code>int main()\n{\n int num = 10;\n &amp;num;//\u53d6\u51fanum\u7684\u5730\u5740\n printf(\"%p\\n\", &amp;num);//\u6253\u5370\u5730\u5740\uff0c%p--\u4ee5\u5730\u5740\u7684\u5f62\u5f0f\u6253\u5370\n return 0;\n}\n</code></pre> <p>\u90a3\u5730\u5740\u5982\u4f55\u5b58\u50a8\uff0c\u9700\u8981\u5b9a\u4e49\u6307\u9488\u53d8\u91cf\u3002</p> <pre><code>int num = 10;\nint *p;//p\u4e3a\u4e00\u4e2a\u6574\u5f62\u6307\u9488\u53d8\u91cf\np = &amp;num;\n</code></pre> <p>\u6307\u9488\u7684\u4f7f\u7528\u5b9e\u4f8b\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n int num = 10;\n int *p = &amp;num;\n *p = 20;\n    return 0;\n}\n</code></pre> <p>\u4ee5\u6574\u5f62\u6307\u9488\u4e3e\u4f8b\uff0c\u53ef\u4ee5\u63a8\u5e7f\u5230\u5176\u4ed6\u7c7b\u578b\uff0c\u5982\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n char ch = 'w';\n char* pc = &amp;ch;\n *pc = 'q';\n printf(\"%c\\n\", ch);\n    return 0;\n}\n</code></pre> <p>\u6307\u9488\u53d8\u91cf\u7684\u5927\u5c0f</p> <pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    printf(\"%d\\n\", sizeof(char *));\n    printf(\"%d\\n\", sizeof(short *));\n    printf(\"%d\\n\", sizeof(int *));\n    printf(\"%d\\n\", sizeof(double *));\n    return 0;\n}\n</code></pre> <p>\u7ed3\u8bba\uff1a\u6307\u9488\u5927\u5c0f\u572832\u4f4d\u5e73\u53f0\u662f4\u4e2a\u5b57\u8282\uff0c64\u4f4d\u5e73\u53f0\u662f8\u4e2a\u5b57\u8282\u3002</p>"},{"location":"C-C%2B%2B/%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/#_11","title":"\u7ed3\u6784\u4f53","text":"<p>\u7ed3\u6784\u4f53\u662fC\u8bed\u8a00\u4e2d\u7279\u522b\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff0c\u7ed3\u6784\u4f53\u4f7f\u5f97C\u8bed\u8a00\u6709\u80fd\u529b\u63cf\u8ff0\u590d\u6742\u7c7b\u578b\u3002 \u6bd4\u5982\u63cf\u8ff0\u5b66\u751f\uff0c\u5b66\u751f\u5305\u542b\uff1a \u540d\u5b57+\u5e74\u9f84+\u6027\u522b+\u5b66\u53f7 \u8fd9\u51e0\u9879\u4fe1\u606f\u3002 \u8fd9\u91cc\u53ea\u80fd\u4f7f\u7528\u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\u4e86\u3002 \u4f8b\u5982\uff1a</p> <pre><code>struct Stu\n{\n    char name[20];//\u540d\u5b57\n    int age;      //\u5e74\u9f84\n    char sex[5];  //\u6027\u522b\n    char id[15]\uff1b //\u5b66\u53f7\n};\n</code></pre> <p>\u7ed3\u6784\u4f53\u7684\u521d\u59cb\u5316\uff1a</p> <pre><code>//\u6253\u5370\u7ed3\u6784\u4f53\u4fe1\u606f\nstruct Stu s = {\"\u5f20\u4e09\"\uff0c 20\uff0c \"\u7537\"\uff0c \"20180101\"};\n//.\u4e3a\u7ed3\u6784\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\nprintf(\"name = %s age = %d sex = %s id = %s\\n\", s.name, s.age, s.sex, s.id);\n//-&gt;\u64cd\u4f5c\u7b26\nstruct Stu *ps = &amp;s;\nprintf(\"name = %s age = %d sex = %s id = %s\\n\", ps-&gt;name, ps-&gt;age, ps-&gt;sex, ps-&gt;id);\n</code></pre>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/","title":"\u5b57\u7b26\u4e32\u548c\u5185\u5b58\u51fd\u6570","text":"<p>\u524d\u8a00\uff1a C\u8bed\u8a00\u4e2d\u5bf9\u5b57\u7b26\u548c\u5b57\u7b26\u4e32\u7684\u5904\u7406\u5f88\u662f\u9891\u7e41\uff0c\u4f46\u662fC\u8bed\u8a00\u672c\u8eab\u662f\u6ca1\u6709\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\uff0c\u5b57\u7b26\u4e32\u901a\u5e38\u653e\u5728\u5e38\u91cf\u5b57\u7b26\u4e32\u4e2d \u6216\u8005\u5b57\u7b26\u6570\u7ec4\u4e2d\u3002 \u5b57\u7b26\u4e32\u5e38\u91cf \u9002\u7528\u4e8e\u90a3\u4e9b\u5bf9\u5b83\u4e0d\u505a\u4fee\u6539\u7684\u5b57\u7b26\u4e32\u51fd\u6570.</p> <p>\u51fd\u6570\u4ecb\u7ecd:</p>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#1-strlen","title":"1. strlen","text":"<pre><code>size_t strlen ( const char * str );\n</code></pre> <ul> <li>\u5b57\u7b26\u4e32\u5df2\u7ecf '\\0'\u4f5c\u4e3a\u7ed3\u675f\u6807\u5fd7\uff0cstrlen\u51fd\u6570\u8fd4\u56de\u7684\u662f\u5728\u5b57\u7b26\u4e32\u4e2d '\\0'\u524d\u9762\u51fa\u73b0\u7684\u5b57\u7b26\u4e2a\u6570\uff08\u4e0d\u5305\u542b  '\\0')\u3002</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#inlcude&lt;string.h&gt;\nint main()\n{\n    //a b c \\0 d e f \\0\n    char arr[] = \"abc\\0def\";\n    return 0;\n}\n</code></pre> <ul> <li>\u53c2\u6570\u6307\u5411\u7684\u5b57\u7b26\u4e32\u5fc5\u987b\u8981\u4ee5 '\\0'\u7ed3\u675f\u3002</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    char arr[] = { 'a', 'b', 'c' };\n    printf(\"%d\\n\", strlen(arr));\n    return 0;\n}\n</code></pre> <ul> <li>\u6ce8\u610f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3asize_t\uff0c\u662f\u65e0\u7b26\u53f7\u7684(\u6613\u9519)</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    const char* str1 = \"abcdef\";\n    const char* str2 = \"bbb\";\n    if (strlen(str2) - strlen(str1) &gt; 0)\n    {\n        printf(\"str2&gt;str1\\n\");\n    }\n    else\n    {\n        printf(\"srt1&gt;str2\\n\");\n    }\n    return 0;\n}\n</code></pre> <ul> <li>\u6a21\u62df\u5b9e\u73b0</li> </ul> <pre><code>//1.\u8ba1\u6570\u5668\u65b9\u5f0f\nint my_strlen(const char* str)\n{\n    int count = 0;\n    while (*str)\n    {\n        count++;\n        str++;\n    }\n    return count;\n}\n\n//2.\u9012\u5f52\uff1a\u4e0d\u80fd\u521b\u5efa\u4e34\u65f6\u53d8\u91cf\u8ba1\u6570\u5668\nint my_strlen(const char* str)\n{\n    if (*str == '\\0')\n        return 0;\n    else\n        return 1 + my_strlen(str + 1);\n}\n\n//3.\u6307\u9488-\u6307\u9488\u7684\u65b9\u5f0f\nint my_strlen(char* s)\n{\n    char* p = s;\n    while (*p != \u2018\\0\u2019)\n        p++;\n    return p - s;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#2-strcpy","title":"2. strcpy","text":"<pre><code>char* strcpy(char * destination, const char * source );\n</code></pre> <ul> <li>\u6e90\u5b57\u7b26\u4e32\u5fc5\u987b\u4ee5 '\\0'\u7ed3\u675f\u3002</li> <li>\u5c06\u6e90\u5b57\u7b26\u4e32\u4e2d\u7684 '\\0'\u62f7\u8d1d\u5230\u76ee\u6807\u7a7a\u95f4\u3002</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    char arr[10] = \"xxxxxxxxx\";\n    //const char* p = \"abcdef\";\n    char arr2[] = { 'l', 'k','\\0', 't'};\n\n    //strcpy(arr, p);\n    strcpy(arr, arr2);\n\n    printf(\"%s\\n\", arr);\n\n    return 0;\n}\n</code></pre> <ul> <li>\u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u8db3\u591f\u5927\uff0c\u4ee5\u786e\u4fdd\u80fd\u5b58\u653e\u6e90\u5b57\u7b26\u4e32\u3002</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    char arr[3] = {0};\n    char arr2[] = \"abcdef\";\n\n    strcpy(arr, arr2);\n\n    printf(\"%s\\n\", arr);\n\n    return 0;\n}\n</code></pre> <ul> <li>\u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u53ef\u53d8\u3002</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n//\u9519\u8bef\u7684\u793a\u8303\nint main()\n{\n    char* p = \"hello world\";//\u5e38\u91cf\u5b57\u7b26\u4e32\n    char arr2[] = \"abcdef\";\n\n    strcpy(p, arr2);\n\n    printf(\"%s\\n\", p);\n\n    return 0;\n}\n</code></pre> <ul> <li>\u6a21\u62df\u5b9e\u73b0</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\n//\u9519\u8bef\u7684\u793a\u8303\n//1.\u53c2\u6570\u987a\u5e8f\n//2.\u51fd\u6570\u7684\u529f\u80fd\uff0c\u505c\u6b62\u6761\u4ef6\n//3.assert\n//4.const\u4fee\u9970\u6307\u9488\n//5.\u51fd\u6570\u8fd4\u56de\u503c\n//6.\u9898\u76ee\u51fa\u81ea\u300a\u9ad8\u8d28\u91cfC/C++\u7f16\u7a0b\u300b\u4e66\u7c4d\u6700\u540e\u7684\u8bd5\u9898\u90e8\u5206\nchar* my_strcpy(char* dest, const char* src)\n{\n    char* ret = dest;\n    assert(dest != NULL);\n    assert(src != NULL);\n    while ((*dest++ = *src++))\n    {\n        ;\n    }\n    return ret;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#3-strcat","title":"3. strcat","text":"<pre><code>char * strcat ( char * destination, const char * source );\n</code></pre> <ul> <li>\u6e90\u5b57\u7b26\u4e32\u5fc5\u987b\u4ee5 '\\0'\u7ed3\u675f\u3002</li> <li>\u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u6709\u8db3\u591f\u7684\u5927\uff0c\u80fd\u5bb9\u7eb3\u4e0b\u6e90\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u3002</li> <li>\u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u53ef\u4fee\u6539\u3002</li> <li>\u5b57\u7b26\u4e32\u81ea\u5df1\u7ed9\u81ea\u5df1\u8ffd\u52a0\uff0c\u5982\u4f55\uff1f(\u540e\u7eed\u8bb2)</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\nint main()\n{\n    char arr1[20] = \"lkt\";\n    strcat(arr1, arr1);\n\n    //char arr1[20] = \"hello \";\n    //char arr2[] = \"world\";\n    //printf(\"%s\\n\", strcat(arr1, arr2));\n\n    return 0;\n}\n</code></pre> <ul> <li>\u6a21\u62df\u5b9e\u73b0</li> </ul> <pre><code>char* my_strcat(char* dest, const char*src)\n{\n    //1.\u627e\u76ee\u6807\u7a7a\u95f4\u4e2d\u7684\\0\n    char* cur = dest;\n    while (*cur)\n    {\n        cur++;\n    }\n    //2.\u62f7\u8d1d\u6e90\u5934\u6570\u636e\u5230\\0\u4e4b\u540e\u7684\u7a7a\u95f4\n    while (*cur++ = *src++)\n    {\n        ;\n    }\n\n    return dest;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#4-strcmp","title":"4. strcmp","text":"<pre><code>int strcmp ( const char * str1, const char * str2 );\n</code></pre> <ul> <li>\u6807\u51c6\u89c4\u5b9a\uff1a</li> <li>\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5927\u4e8e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u5927\u4e8e0\u7684\u6570\u5b57</li> <li>\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de0</li> <li>\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u5c0f\u4e8e0\u7684\u6570\u5b57</li> <li>\u90a3\u4e48\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\uff1f</li> </ul> <pre><code>int main()\n{\n    /*char arr1[] = \"abcdef\";\n    char arr2[] = \"abq\";*/\n\n    //char arr1[] = \"abcd\";\n    //char arr2[] = \"abc\";\n\n    char arr1[] = \"abc\";\n    char arr2[] = \"abc\";\n\n    //char arr1[] = { 'a', 'b', 'c' };\n    //char arr2[] = { 'a', 'b', 'c' };\n\n    int ret = my_strcmp(arr1, arr2);\n    if (ret &lt; 0)\n        printf(\"arr1&lt;arr2\\n\");\n    else if(ret&gt;0)\n        printf(\"arr1&gt;arr2\\n\");\n    else\n        printf(\"arr1==arr2\\n\");\n\n    printf(\"%d\\n\", ret);\n\n    return 0;\n}\n</code></pre> <ul> <li>\u6a21\u62df\u5b9e\u73b0</li> </ul> <pre><code>int my_strcmp(const char*s1, const char*s2)\n{\n    assert(s1 &amp;&amp; s2);\n    while (*s1 == *s2)\n    {\n        if (*s1 == '\\0')\n        {\n            return 0;\n        }\n        s1++;\n        s2++;\n    }\n    //return *s1 - *s2;\n    if (*s1 &gt; *s2)\n        return 1;\n    else\n        return -1;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#5-strncpy","title":"5. strncpy","text":"<pre><code>int strncmp ( const char * str1, const char * str2, size_t num );\n</code></pre> <ul> <li>\u62f7\u8d1dnum\u4e2a\u5b57\u7b26\u4ece\u6e90\u5b57\u7b26\u4e32\u5230\u76ee\u6807\u7a7a\u95f4</li> <li>\u5982\u679c\u6e90\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5c0f\u4e8enum\uff0c\u5219\u62f7\u8d1d\u5b8c\u6e90\u5b57\u7b26\u4e32\u4e4b\u540e\uff0c\u5728\u76ee\u6807\u7684\u540e\u8fb9\u8ffd\u52a00\uff0c\u76f4\u5230num\u4e2a\u3002</li> </ul> <pre><code>int main()\n{\n    char arr1[20] = \"abcdefghi\";\n    char arr2[] = \"xxxx\";\n    strncpy(arr1, arr2, 8);\n    printf(\"%s\\n\", arr1);\n    return 0;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#6-strncat","title":"6. strncat","text":"<pre><code>char * strncat ( char * destination, const char * source, size_t num );\n</code></pre> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\nint main()\n{\n    char arr1[20] = \"abcdef\\0qqqqqq\";\n    char arr2[] = \"xyz\";\n    strncat(arr1, arr2, 2);\n    printf(\"%s\\n\", arr1);\n\n    return 0;\n}\n</code></pre> <ul> <li>\u81ea\u5df1\u7ed9\u81ea\u5df1\u6dfb\u52a0</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\nint main()\n{\n    char arr1[20] = \"abc\";\n    strncat(arr1, arr1, 3);\n    printf(\"%s\\n\", arr1);\n\n    return 0;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#7-strncmp","title":"7. strncmp","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\nint main()\n{\n    int ret = strncmp(\"abcdef\", \"abc\", 4);\n    printf(\"%d\\n\", ret);\n\n    return 0;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#8-strstr-kmp","title":"8. strstr + KMP","text":"<ul> <li>\u793a\u4f8b</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\nint main()\n{\n    char arr1[] = \"abcdefabcdef\";\n    char arr2[] = \"cdq\";\n\n    char* p = strstr(arr1, arr2);\n    if (p == NULL)\n    {\n        printf(\"\u4e0d\u5b58\u5728\\n\");\n    }\n    else\n    {\n        printf(\"%s\\n\", p);\n    }\n    return 0;\n}\n</code></pre> <ul> <li>\u6a21\u62df\u5b9e\u73b0(\u66b4\u529b\u7248\u672c)</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\nchar* my_strstr(const char* str1, const char* str2)\n{\n    const char* s1 = str1;\n    const char* s2 = str2;\n    const char* p = str1;\n    if (*str2 == '\\0')\n    {\n        return str1;\n    }\n    while (*p)\n    {\n        s1 = p;\n        s2 = str2;\n        while (*s1!='\\0' &amp;&amp; *s2!='\\0' &amp;&amp; (*s1 == *s2))\n        {\n            s1++;\n            s2++;\n        }\n        if (*s2 == '\\0')\n        {\n            return (char*)p;//\u627e\u5230\u4e86\n        }\n        p++;\n    }\n    return NULL;//\u627e\u4e0d\u5230\u5b50\u4e32\n}\n</code></pre> <ul> <li>\u6a21\u62df\u5b9e\u73b0(KMP\u7248\u672c)</li> <li>KMP\u6709\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e3b\u4e32\u548c\u5b50\u4e32</li> <li>\u4e3b\u4e32\u7684\u6307\u9488\u4e0d\u56de\u5934\uff0c\u6307\u9488\u672a\u4e3ai</li> <li>\u5b50\u4e32\u7684\u6307\u9488\u56de\u5934\uff0c\u4f46\u662f\u4e0d\u662f\u4e00\u5b9a\u56de\u5230\u4e0b\u6807\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u4e00\u4e2anext\u7684\u6570\u7ec4,\u6307\u9488\u4e3aj</li> <li>KMP</li> </ul> <pre><code>for (int i = 1, j = 0; i &lt;= m; ++i)\n{\n    while (j &amp;&amp; s[i] != p[j + 1]) j = Next[j];\n    if (s[i] == p[j + 1]) j++;\n    if (j &gt;= n)\n    {\n        cout &lt;&lt; i - n &lt;&lt; \" \";\n    }\n}\n</code></pre> <ul> <li>Next\u6570\u7ec4(\u9012\u63a8)</li> <li>1.next[1]=0</li> <li>2.\u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4efb\u7136\u76f8\u540c\u7684\u8bdd\uff0c\u76f4\u63a5\u6784\u6210\u4e86\u4e00\u4e2a\u66f4\u957f\u7684\u524d\u540e\u7f00</li> <li>3.\u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\u7684\u8bdd\uff0c\u76f4\u63a5\u53bb\u5de6\u8fb9\u7684\u7f00\u53bb\u5bfb\u627e\u5171\u540c\u7684\u524d\u540e\u7f00</li> <li>4.\u56de\u5230\u4e4b\u524d\u7684\u6b65\u9aa4</li> </ul> <pre><code>for (int i = 2, j = 0; i &lt;= n; ++i)\n{\n    while (j &amp;&amp; p[i] != p[j + 1]) j = Next[j];\n    if (p[i] == p[j + 1]) j++;\n    Next[i] = j;\n}\n</code></pre> <p>\u6c47\u603b\uff1a</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\nconst int N = 1e6 + 5;\nchar s[N], p[N];//s\u662f\u4e3b\u4e32\uff0cp\u662f\u5b50\u4e32\nint Next[N];\n\nint main()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; p + 1 &gt;&gt; m &gt;&gt; s + 1;\n    //Next\n    for (int i = 2, j = 0; i &lt;= n; ++i)\n    {\n        while (j &amp;&amp; p[i] != p[j + 1]) j = Next[j];\n        if (p[i] == p[j + 1]) j++;\n        Next[i] = j;\n    }\n    int flag = false;\n    //kmp\n    for (int i = 1, j = 0; i &lt;= m; ++i)\n    {\n        while (j &amp;&amp; s[i] != p[j + 1]) j = Next[j];\n        if (s[i] == p[j + 1]) j++;\n        if (j &gt;= n)\n        {\n            flag = true;\n            cout &lt;&lt; i - n &lt;&lt; \" \";\n            j = Next[j];\n        }\n    }\n    if (!flag)\n    {\n        cout &lt;&lt; -1 &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#9-strtok","title":"9. strtok","text":"<pre><code>char * strtok ( char * str, const char * sep );\n</code></pre> <ul> <li>sep\u53c2\u6570\u662f\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b9a\u4e49\u4e86\u7528\u4f5c\u5206\u9694\u7b26\u7684\u5b57\u7b26\u96c6\u5408</li> <li>\u7b2c\u4e00\u4e2a\u53c2\u6570\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u5305\u542b\u4e860\u4e2a\u6216\u8005\u591a\u4e2a\u7531sep\u5b57\u7b26\u4e32\u4e2d\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5206\u9694\u7b26\u5206\u5272\u7684\u6807\u8bb0\u3002</li> <li>strtok\u51fd\u6570\u627e\u5230str\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6807\u8bb0\uff0c\u5e76\u5c06\u5176\u7528 \\0 \u7ed3\u5c3e\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u6807\u8bb0\u7684\u6307\u9488\u3002\uff08\u6ce8\uff1astrtok\u51fd\u6570\u4f1a\u6539\u53d8\u88ab\u64cd\u4f5c\u7684\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u5728\u4f7f\u7528strtok\u51fd\u6570\u5207\u5206\u7684\u5b57\u7b26\u4e32\u4e00\u822c\u90fd\u662f\u4e34\u65f6\u62f7\u8d1d\u7684\u5185\u5bb9\u5e76\u4e14\u53ef\u4fee\u6539\u3002\uff09</li> <li>strtok\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u4e3a NULL \uff0c\u51fd\u6570\u5c06\u627e\u5230str\u4e2d\u7b2c\u4e00\u4e2a\u6807\u8bb0\uff0cstrtok\u51fd\u6570\u5c06\u4fdd\u5b58\u5b83\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e\u3002</li> <li>strtok\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a NULL \uff0c\u51fd\u6570\u5c06\u5728\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u88ab\u4fdd\u5b58\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u4e0b\u4e00\u4e2a\u6807\u8bb0\u3002</li> <li>\u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u4e0d\u5b58\u5728\u66f4\u591a\u7684\u6807\u8bb0\uff0c\u5219\u8fd4\u56de NULL \u6307\u9488\u3002</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    char arr[] = \"liuketing@swpuedu.com\";\n    char buf[200] = { 0 };\n    strcpy(buf, arr);\n    const char* p = \"@.\";\n    char* str = NULL;\n\n    for (str=strtok(buf, p); str!=NULL; str=strtok(NULL, p))\n    {\n        printf(\"%s\\n\", str);\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#10-strerror","title":"10. strerror","text":"<pre><code>char * strerror ( int errnum );\n</code></pre> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n//strerror\n//\u628a\u9519\u8bef\u7801\u8f6c\u6362\u6210\u9519\u8bef\u4fe1\u606f\n\nint main()\n{\n    //printf(\"%s\\n\", strerror(0));\n    //printf(\"%s\\n\", strerror(1));\n    //printf(\"%s\\n\", strerror(2));\n    //printf(\"%s\\n\", strerror(3));\n    //printf(\"%s\\n\", strerror(4));\n\n    //\u9519\u8bef\u7801\u8bb0\u5f55\u5230\u9519\u8bef\u7801\u7684\u53d8\u91cf\u4e2d\n    //errno - C\u8bed\u8a00\u63d0\u4f9b\u7684\u5168\u5c40\u7684\u9519\u8bef\u53d8\u91cf\n    //#include &lt;errno.h&gt;\n\n    FILE* pf = fopen(\"test.txt\", \"r\");\n\n    if (pf == NULL)\n    {\n        //perror(\"\");//\u6253\u5370\u7684\u4f9d\u7136\u662ferrno\u53d8\u91cf\u4e2d\u9519\u8bef\u7801\u5bf9\u5e94\u7684\u9519\u8bef\u4fe1\u606f\n        printf(\"%s\\n\", strerror(errno));\n        return 1;\n    }\n\n    //\u8bfb\u6587\u4ef6\n\n    fclose(pf);\n    pf = NULL;\n    return 0;\n}\n</code></pre> <p>\u5b57\u7b26\u4e32\u5206\u7c7b\u51fd\u6570:</p> \u51fd\u6570 \u5982\u679c\u4ed6\u7684\u53c2\u6570\u7b26\u5408\u4e0b\u5217\u6761\u4ef6\u5c31\u8fd4\u56de\u771f iscntrl \u4efb\u4f55\u63a7\u5236\u5b57\u7b26 isspace \u7a7a\u767d\u5b57\u7b26\uff1a\u7a7a\u683c\u2018 \u2019\uff0c\u6362\u9875\u2018\\f\u2019\uff0c\u6362\u884c'\\n'\uff0c\u56de\u8f66\u2018\\r\u2019\uff0c\u5236\u8868\u7b26'\\t'\u6216\u8005\u5782\u76f4\u5236\u8868\u7b26'\\v' isdigit \u5341\u8fdb\u5236\u6570\u5b57 0~9 isxdigit \u5341\u516d\u8fdb\u5236\u6570\u5b57\uff0c\u5305\u62ec\u6240\u6709\u5341\u8fdb\u5236\u6570\u5b57\uff0c\u5c0f\u5199\u5b57\u6bcda~f\uff0c\u5927\u5199\u5b57\u6bcdA~F islower \u5c0f\u5199\u5b57\u6bcda~z isupper \u5927\u5199\u5b57\u6bcdA~Z isalpha \u5b57\u6bcda~z\u6216A~Z isalnum \u5b57\u6bcd\u6216\u8005\u6570\u5b57\uff0ca~z,A~Z,0~9 ispunct \u6807\u70b9\u7b26\u53f7\uff0c\u4efb\u4f55\u4e0d\u5c5e\u4e8e\u6570\u5b57\u6216\u8005\u5b57\u6bcd\u7684\u56fe\u5f62\u5b57\u7b26\uff08\u53ef\u6253\u5370\uff09 isgraph \u4efb\u4f55\u56fe\u5f62\u5b57\u7b26 isprint \u4efb\u4f55\u53ef\u6253\u5370\u5b57\u7b26\uff0c\u5305\u62ec\u56fe\u5f62\u5b57\u7b26\u548c\u7a7a\u767d\u5b57\u7b26 <p>\u5b57\u7b26\u8f6c\u6362:</p> \u51fd\u6570 \u529f\u80fd toupper \u5c0f\u5199\u8f6c\u5927\u5199 tolower \u5927\u5199\u8f6c\u5c0f\u5199 <pre><code>#include&lt;stdio.h&gt;\n#include &lt;ctype.h&gt;\nint main()\n{\n    char arr[] = \"Are you ok?\";\n    char* p = arr;\n    while (*p)\n    {\n        if (islower(*p))\n        {\n            *p = toupper(*p);\n        }\n        p++;\n    }\n    printf(\"%s\\n\", arr);\n\n    return 0;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#11-memcpy","title":"11. memcpy","text":"<pre><code>void * memcpy ( void * destination, const void * source, size_t num );\n</code></pre> <ul> <li>\u51fd\u6570memcpy\u4ecesource\u7684\u4f4d\u7f6e\u5f00\u59cb\u5411\u540e\u590d\u5236num\u4e2a\u5b57\u8282\u7684\u6570\u636e\u5230destination\u7684\u5185\u5b58\u4f4d\u7f6e\u3002</li> <li>\u8fd9\u4e2a\u51fd\u6570\u5728\u9047\u5230 '\\0' \u7684\u65f6\u5019\u5e76\u4e0d\u4f1a\u505c\u4e0b\u6765\u3002</li> <li>\u5982\u679csource\u548cdestination\u6709\u4efb\u4f55\u7684\u91cd\u53e0\uff0c\u590d\u5236\u7684\u7ed3\u679c\u90fd\u662f\u672a\u5b9a\u4e49\u7684\u3002</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    //int arr[] = { 1,2,3,4,5,6,7,8,9,10 };\n    //int arr2[10] = { 0 };\n    //memcpy(arr2, arr, 20);\n\n    float arr1[] = { 1.0f,2.0f,3.0f,4.0f };\n    float arr2[5] = { 0.0 };\n    memcpy(arr2, arr1, 8);\n\n    return 0;\n}\n</code></pre> <p>\u6a21\u62df\u5b9e\u73b0:</p> <pre><code>void* my_memcpy(void* dest, void* src, size_t num)\n{\n    void* ret = dest;\n    assert(dest);\n    assert(src);\n\n    while(num--)\n    {\n        *(char*)dest = *(char*)src;\n        dest = (char*)dest + 1;\n        src = (char*)src + 1;\n    }\n\n    return ret;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#12-memmove","title":"12. memmove","text":"<ul> <li>\u548cmemcpy\u7684\u5dee\u522b\u5c31\u662fmemmove\u51fd\u6570\u5904\u7406\u7684\u6e90\u5185\u5b58\u5757\u548c\u76ee\u6807\u5185\u5b58\u5757\u662f\u53ef\u4ee5\u91cd\u53e0\u7684\u3002</li> <li>\u5982\u679c\u6e90\u7a7a\u95f4\u548c\u76ee\u6807\u7a7a\u95f4\u51fa\u73b0\u91cd\u53e0\uff0c\u5c31\u5f97\u4f7f\u7528memmove\u51fd\u6570\u5904\u7406\u3002</li> </ul> <pre><code>void* my_memmove(void* dest, void* src, size_t num)\n{\n    void* ret = dest;\n    assert(dest);\n    assert(src);\n\n    if (dest &lt; src)//1 \u524d-&gt;\u540e\n    {\n        while(num--)\n        {\n            *(char*)dest = *(char*)src;\n            dest = (char*)dest + 1;\n            src = (char*)src + 1;\n        }\n    }\n    else //2 3 \u540e-&gt;\u524d\n    {\n        while (num--)\n        {\n            *((char*)dest + num) = *((char*)src + num);\n        }\n    }\n    return ret;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#13-memcpy","title":"13. memcpy","text":"<pre><code>int memcmp ( const void * ptr1, const void * ptr2, size_t num );\n</code></pre> <p>\u793a\u4f8b:</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    int arr1[] = { 1,2,3,0,5 };//01 00 00 00 02 00 00 00 03 00 00 00 00 00 00 00 ..\n    int arr2[] = { 1,2,3,4,0 };//01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 ..\n    int ret = memcmp(arr1, arr2, 13);\n    printf(\"%d\\n\", ret);\n    return 0;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%89%8D%E8%A8%80/","title":"\u6570\u636e\u7ed3\u6784\u524d\u8a00","text":""},{"location":"C-C%2B%2B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%89%8D%E8%A8%80/#1","title":"1.\u4ec0\u4e48\u662f\u6570\u636e\u7ed3\u6784","text":"<p>\u6570\u636e\u7ed3\u6784(Data Structure)\u662f\u8ba1\u7b97\u673a\u5b58\u50a8\u3001\u7ec4\u7ec7\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u6307\u76f8\u4e92\u4e4b\u95f4\u5b58\u5728\u4e00\u79cd\u6216\u591a\u79cd\u7279\u5b9a\u5173\u7cfb\u7684 \u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\u3002</p>"},{"location":"C-C%2B%2B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%89%8D%E8%A8%80/#2","title":"2.\u4ec0\u4e48\u662f\u7b97\u6cd5","text":"<p>\u7b97\u6cd5(Algorithm):\u5c31\u662f\u5b9a\u4e49\u826f\u597d\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u4ed6\u53d6\u4e00\u4e2a\u6216\u4e00\u7ec4\u7684\u503c\u4e3a\u8f93\u5165\uff0c\u5e76\u4ea7\u751f\u51fa\u4e00\u4e2a\u6216\u4e00\u7ec4\u503c\u4f5c\u4e3a \u8f93\u51fa\u3002\u7b80\u5355\u6765\u8bf4\u7b97\u6cd5\u5c31\u662f\u4e00\u7cfb\u5217\u7684\u8ba1\u7b97\u6b65\u9aa4\uff0c\u7528\u6765\u5c06\u8f93\u5165\u6570\u636e\u8f6c\u5316\u6210\u8f93\u51fa\u7ed3\u679c\u3002</p>"},{"location":"C-C%2B%2B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%89%8D%E8%A8%80/#3","title":"3.\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u91cd\u8981\u6027","text":""},{"location":"C-C%2B%2B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%89%8D%E8%A8%80/#31","title":"3.1\u5728\u6821\u56ed\u62db\u8058\u7684\u7b14\u8bd5\u4e2d\uff1a","text":"<p>1.\u817e\u8baf\u79cb\u62db\u6280\u672f\u5c97\u7f16\u7a0b\u5408\u96c6</p> <p>2.\u5b57\u8282\u8df3\u52a82019\u6625\u62db\u7814\u53d1\u90e8\u5206\u7f16\u7a0b\u9898\u6c47\u603b</p> <p>3.\u7f8e\u56e22021\u6821\u62db\u7b14\u8bd5-\u7f16\u7a0b\u9898(\u901a\u7528\u7f16\u7a0b\u8bd5\u9898,\u7b2c10\u573a) </p> <p>\u53ef\u4ee5\u770b\u51fa\uff0c\u73b0\u5728\u516c\u53f8\u5bf9\u5b66\u751f\u4ee3\u7801\u80fd\u529b\u7684\u8981\u6c42\u662f\u8d8a\u6765\u8d8a\u9ad8\u4e86\uff0c\u5927\u5382\u7b14\u8bd5\u4e2d\u51e0\u4e4e\u5168\u662f\u7b97\u6cd5\u9898\u800c\u4e14\u96be\u5ea6 \u5927\uff0c\u4e2d\u5c0f\u957f\u7684\u7b14\u8bd5\u4e2d\u624d\u4f1a\u6709\u7b97\u6cd5\u9898\u3002\u7b97\u6cd5\u4e0d\u4ec5\u7b14\u8bd5\u4e2d\u8003\u5bdf\uff0c\u9762\u8bd5\u4e2d\u9762\u8bd5\u5b98\u57fa\u672c\u90fd\u4f1a\u8ba9\u73b0\u573a\u5199\u4ee3 \u7801\u3002\u800c\u7b97\u6cd5\u80fd\u529b\u77ed\u671f\u5185\u65e0\u6cd5\u5feb\u901f\u63d0\u9ad8\u4e86\uff0c\u81f3\u5c11\u9700\u8981\u6301\u7eed\u534a\u5e74\u4ee5\u4e0a\u7b97\u6cd5\u8bad\u7ec3\u79ef\u7d2f\uff0c\u5426\u5219\u771f\u6b63\u6821\u62db\u65f6 \u7b14\u8bd5\u4f1a\u5f88\u8270\u96be\uff0c\u56e0\u6b64\u7b97\u6cd5\u8981\u65e9\u65e9\u51c6\u5907\u3002</p>"},{"location":"C-C%2B%2B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%89%8D%E8%A8%80/#32","title":"3.2\u5728\u6821\u56ed\u62db\u8058\u7684\u9762\u8bd5\u4e2d:","text":"<p>\u67d0CVTE\u9762\u8bd5\uff1a</p> <p>1.\u600e\u4e48\u8ba1\u7b97\u4e00\u4e2a\u7c7b\u5230\u5e95\u5b9e\u4f8b\u5316\u4e86\u591a\u5c11\u5bf9\u8c61\uff1f</p> <p>2.\u5982\u679c\u8fd8\u6709\u4e00\u4e2a\u6d3e\u751f\u7c7b\u7ee7\u627f\u4e86\u8fd9\u4e2a\u7c7b\uff0c\u90a3\u4e48\u5982\u4f55\u8ba1\u7b97\u8fd9\u4e24\u4e2a\u7c7b\uff0c\u5404\u81ea\u5b9e\u4f8b\u5316\u4e86\u591a\u5c11\u5bf9\u8c61\uff1f</p> <p>3.\u4f60\u4e86\u89e3\u8054\u5408\u4f53\u548c\u7ed3\u6784\u4f53\u5417\uff1f</p> <p>4.\u5982\u4f55\u6d4b\u8bd5\u4e00\u4e2a\u673a\u5668\u662f\u5927\u7aef\u8fd8\u662f\u5c0f\u7aef\uff1f</p> <p>5.\u4f60\u4e86\u89e3\u961f\u5217\u548c\u6808\u5417\uff1f</p> <p>6.\u600e\u4e48\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\u3002</p> <p>7.\u4f60\u4f7f\u7528\u8fc7\u6a21\u7248\u5417\uff1f</p> <p>8.\u5199\u4e00\u4e2a\u6bd4\u8f83\u4e24\u4e2a\u6570\u5927\u5c0f\u7684\u6a21\u677f\u51fd\u6570\u3002</p> <p>9.\u4f60\u4f7f\u7528\u8fc7\u5bb9\u5668\u5417\uff1f</p> <p>10.\u5224\u65ad\u4e24\u4e2a\u94fe\u8868\u662f\u5426\u76f8\u4ea4\u3002</p> <p>11.Vector\u548c\u6570\u7ec4\u7684\u533a\u522b\u3002</p> <p>12.\u4f60\u5728\u5b66\u6821\u91cc\u505a\u7684\u6700\u6ee1\u610f\u7684\u4e00\u4e2a\u9879\u76ee\u662f\u4ec0\u4e48\uff1f\u7b80\u8ff0\u4e00\u4e0b\u8fd9\u4e2a\u9879\u76ee\u3002</p> <p>\u67d0\u817e\u8baf\u7684\u9762\u8bd5\uff1a 1\u3001\u81ea\u6211\u4ecb\u7ecd</p> <p>2\u3001\u5b66\u4e60STL\u5177\u4f53\u662f\u600e\u4e48\u5f00\u5c55\u7684\uff1f</p> <p>3\u3001\u5982\u679c\u4e00\u6b3e\u4ea7\u54c1\u7ed9\u4f60\u600e\u4e48\u68c0\u6d4b\u5185\u5b58\u6cc4\u9732\uff1f</p> <p>4\u3001\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\uff0c\u5171\u4eab\u5185\u5b58\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff0c\u4f1a\u51fa\u73b0\u4ec0\u4e48\u95ee\u9898\uff0c\u600e\u4e48\u89e3\u51b3\uff1f</p> <p>5\u3001TCP\u4e3a\u4ec0\u4e48\u662f\u53ef\u9760\u7684\uff1f\u53ef\u9760\u662f\u600e\u4e48\u4fdd\u8bc1\u7684\uff1f\u4e3a\u4ec0\u4e48\u8981\u4e09\u6b21\u63e1\u624b\uff1f\u4e3a\u4ec0\u4e48\u4e09\u6b21\u63e1\u624b\u5c31\u53ef\u4ee5\u53ef\u9760\uff1f</p> <p>6\u3001Http\u6570\u636e\u5206\u5305\u95ee\u9898\uff1b</p> <p>7\u3001Vector\u76f8\u5173\uff1b</p> <p>8\u3001Hashmap\u76f8\u5173\uff1b</p> <p>9\u3001\u7ea2\u9ed1\u6811\u7684\u539f\u7406\u3001\u65f6\u95f4\u590d\u6742\u5ea6\u7b49\uff1b</p> <p>10\u3001Memcpy\u548cmemmove\u7684\u533a\u522b\uff1b</p> <p>11\u3001\u5ba2\u6237\u7aef\u7ed9\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\uff0c\u610f\u56fe\u53d1\u9001aaa\uff0c\u7136\u540e\u518d\u53d1bbb\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u51fa\u73b0aaabbb\u8fd9\u79cd\u60c5 \u51b5\uff0c\u5982\u4f55\u5904\u7406\uff1f</p> <p>12\u3001\u6e38\u620f\u7684\u90ae\u4ef6\u670d\u52a1\u5668\u4e2d\u6bcf\u5929\u4f1a\u6709\u73a9\u5bb6\u9891\u7e41\u7684\u521b\u5efa\u90ae\u4ef6\u548c\u5220\u9664\u90ae\u4ef6\uff0c\u6d77\u91cf\u6570\u636e\u3001\u5927\u5c0f\u4e0d\u4e00\uff0c\u4f1a\u6709 \u54ea\u4e9b\u573a\u666f\uff0c\u600e\u4e48\u5b58\u50a8\uff0c\u90ae\u4ef6\u662f\u600e\u4e48\u5230\u5185\u5b58\u7684\uff1f</p> <p>13\u3001\u5199\u4e00\u9053\u7b97\u6cd5\u9898</p> <p>\u67d0\u767e\u5ea6\u7684\u9762\u8bd5\uff1a</p> <p>1.\u624b\u5199\u4e94\u9053\u9898\uff0c\u4e09\u9053\u7f16\u7a0b\u9898\uff0c\u4e00\u9053\u6570\u636e\u5e93\uff0c\u4e00\u9053linux</p> <p>2.\u6570\u636e\u5e93\u7684\u9898\u4e24\u95ee</p> <p>3.\u7b97\u6cd5\u4e86\u89e3\u7684\u5982\u4f55\uff0c\u63d2\u5165\u6392\u5e8f\u7f16\u7a0b</p> <p>4.\u8bf4\u4e00\u4e0bIP,TCP,ARP</p> <p>5.\u5185\u6838\u662f\u4ec0\u4e48</p> <p>6.IP\u5c42\u4e3b\u8981\u529f\u80fd</p> <p>7.map\u548cset\u5e95\u5c42</p> <p>8.bootstrap\u7684\u7528\u6cd5,html,html\u7684\u5168\u79f0</p> <p>9.\u4f60\u89c9\u5f97\u6846\u67b6\u548c\u5e93\u6709\u5565\u533a\u522b</p> <p>10.\u4ee3\u7801\u4f18\u5316</p> <p>11.\u54c8\u5e0c\u8868</p> <p>12.shell\u811a\u672c</p> <p>13.\u5feb\u901f\u6392\u5e8f\u601d\u60f3</p> <p>14.\u9012\u5f52\u662f\u4ec0\u4e48</p> <p>15.\u5206\u6cbb\u662f\u4ec0\u4e48\uff0c\u4e0e\u9012\u5f52\u533a\u522b\u662f\u4ec0\u4e48</p> <p>16.web\u5e73\u53f0\u662f\u600e\u4e48\u505a\u7684</p> <p>17.linux\u547d\u4ee4</p> <p>18.\u4e86\u89e3\u4e9b\u4ec0\u4e48\u524d\u6cbf\u7684\u6280\u672f\uff0c\u82f1\u8bed\u600e\u4e48\u6837\uff0c\u4e86\u89e3\u8fc7\u4ec0\u4e48\u82f1\u8bed\u7684\u6587\u732e</p>"},{"location":"C-C%2B%2B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%89%8D%E8%A8%80/#33","title":"3.3\u5728\u672a\u6765\u7684\u5de5\u4f5c\u4e2d\uff1a","text":"<p>\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5bf9\u4e00\u4e2a\u7a0b\u5e8f\u5458\u6765\u8bf4\u7684\u91cd\u8981\u6027\uff1f</p>"},{"location":"C-C%2B%2B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%89%8D%E8%A8%80/#4","title":"4.\u5982\u4f55\u5b66\u597d\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5","text":"<p>\u2460\u6b7b\u78d5\u4ee3\u7801</p> <p>\u2461\u6ce8\u610f\u753b\u56fe\u548c\u601d\u8003</p>"},{"location":"C-C%2B%2B/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/","title":"\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6","text":""},{"location":"C-C%2B%2B/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#1","title":"1.\u7b97\u6cd5\u6548\u7387","text":""},{"location":"C-C%2B%2B/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#11","title":"1.1 \u5982\u4f55\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u597d\u574f","text":"<p>\u5982\u4f55\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u597d\u574f\u5462\uff1f\u6bd4\u5982\u5bf9\u4e8e\u4ee5\u4e0b\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1a</p> <pre><code>long long Fib(int N)\n{\n    if (N &lt; 3)\n        return 1;\n    return Fib(N - 1) + Fib(N - 2);\n}\n</code></pre> <p>\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u9012\u5f52\u5b9e\u73b0\u65b9\u5f0f\u975e\u5e38\u7b80\u6d01\uff0c\u4f46\u7b80\u6d01\u4e00\u5b9a\u597d\u5417\uff1f\u90a3\u8be5\u5982\u4f55\u8861\u91cf\u5176\u597d\u4e0e\u574f\u5462\uff1f</p>"},{"location":"C-C%2B%2B/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#12","title":"1.2 \u7b97\u6cd5\u7684\u590d\u6742\u5ea6","text":"<p>\u7b97\u6cd5\u5728\u7f16\u5199\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u540e\uff0c\u8fd0\u884c\u65f6\u9700\u8981\u8017\u8d39\u65f6\u95f4\u8d44\u6e90\u548c\u7a7a\u95f4(\u5185\u5b58)\u8d44\u6e90 \u3002\u56e0\u6b64 \u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u597d\u574f,\u4e00\u822c\u662f\u4ece\u65f6\u95f4\u548c\u7a7a\u95f4\u4e24\u4e2a\u7ef4\u5ea6\u6765\u8861\u91cf\u7684\uff0c\u5373\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u8fd0\u884c\u5feb\u6162\uff0c\u800c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u8fd0\u884c\u6240\u9700\u8981\u7684\u989d\u5916\u7a7a\u95f4\u3002\u5728\u8ba1\u7b97 \u673a\u53d1\u5c55\u7684\u65e9\u671f\uff0c\u8ba1\u7b97\u673a\u7684\u5b58\u50a8\u5bb9\u91cf\u5f88\u5c0f\u3002\u6240\u4ee5\u5bf9\u7a7a\u95f4\u590d\u6742\u5ea6\u5f88\u662f\u5728\u4e4e\u3002\u4f46\u662f\u7ecf\u8fc7\u8ba1\u7b97\u673a\u884c\u4e1a\u7684\u8fc5\u901f\u53d1\u5c55\uff0c\u8ba1 \u7b97\u673a\u7684\u5b58\u50a8\u5bb9\u91cf\u5df2\u7ecf\u8fbe\u5230\u4e86\u5f88\u9ad8\u7684\u7a0b\u5ea6\u3002\u6240\u4ee5\u6211\u4eec\u5982\u4eca\u5df2\u7ecf\u4e0d\u9700\u8981\u518d\u7279\u522b\u5173\u6ce8\u4e00\u4e2a\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p>"},{"location":"C-C%2B%2B/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#13","title":"1.3 \u590d\u6742\u5ea6\u5728\u6821\u62db\u4e2d\u7684\u8003\u5bdf","text":""},{"location":"C-C%2B%2B/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#2","title":"2.\u65f6\u95f4\u590d\u6742\u5ea6","text":""},{"location":"C-C%2B%2B/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#21","title":"2.1\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u6982\u5ff5","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5b9a\u4e49\uff1a\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u5b9a\u91cf\u63cf\u8ff0\u4e86\u8be5\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u3002\u4e00 \u4e2a\u7b97\u6cd5\u6267\u884c\u6240\u8017\u8d39\u7684\u65f6\u95f4\uff0c\u4ece\u7406\u8bba\u4e0a\u8bf4\uff0c\u662f\u4e0d\u80fd\u7b97\u51fa\u6765\u7684\uff0c\u53ea\u6709\u4f60\u628a\u4f60\u7684\u7a0b\u5e8f\u653e\u5728\u673a\u5668\u4e0a\u8dd1\u8d77\u6765\uff0c\u624d\u80fd\u77e5 \u9053\u3002\u4f46\u662f\u6211\u4eec\u9700\u8981\u6bcf\u4e2a\u7b97\u6cd5\u90fd\u4e0a\u673a\u6d4b\u8bd5\u5417\uff1f\u662f\u53ef\u4ee5\u90fd\u4e0a\u673a\u6d4b\u8bd5\uff0c\u4f46\u662f\u8fd9\u5f88\u9ebb\u70e6\uff0c\u6240\u4ee5\u624d\u6709\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\u8fd9\u4e2a \u5206\u6790\u65b9\u5f0f\u3002\u4e00\u4e2a\u7b97\u6cd5\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u4e0e\u5176\u4e2d\u8bed\u53e5\u7684\u6267\u884c\u6b21\u6570\u6210\u6b63\u6bd4\u4f8b\uff0c\u7b97\u6cd5\u4e2d\u7684\u57fa\u672c\u64cd\u4f5c\u7684\u6267\u884c\u6b21\u6570\uff0c\u4e3a\u7b97\u6cd5 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u5373\uff1a\u627e\u5230\u67d0\u6761\u57fa\u672c\u8bed\u53e5\u4e0e\u95ee\u9898\u89c4\u6a21N\u4e4b\u95f4\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\uff0c\u5c31\u662f\u7b97\u51fa\u4e86\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <pre><code>// \u8bf7\u8ba1\u7b97\u4e00\u4e0bFunc1\u4e2d++count\u8bed\u53e5\u603b\u5171\u6267\u884c\u4e86\u591a\u5c11\u6b21\uff1f\nvoid Func1(int N)\n{\n    int count = 0;\n    for (int i = 0; i &lt; N; ++i)\n    {\n        for (int j = 0; j &lt; N; ++j)\n        {\n            ++count;\n        }\n    }\n    for (int k = 0; k &lt; 2 * N; ++k)\n    {\n        ++count;\n    }\n    int M = 10;\n    while (M--)\n    {\n        ++count;\n    }\n    printf(\"%d\\n\", count);\n}\n</code></pre> <p>Func1 \u6267\u884c\u7684\u57fa\u672c\u64cd\u4f5c\u6b21\u6570 \uff1a</p> <p>$F(N)=N^2+2*N+10$</p> <ul> <li>N=10    F(N)=130</li> <li>N=100   F(N)=10210</li> <li>N=10000 F(N)=1002010</li> </ul> <p>\u5b9e\u9645\u4e2d\u6211\u4eec\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\u65f6\uff0c\u6211\u4eec\u5176\u5b9e\u5e76\u4e0d\u4e00\u5b9a\u8981\u8ba1\u7b97\u7cbe\u786e\u7684\u6267\u884c\u6b21\u6570\uff0c\u800c\u53ea\u9700\u8981 \u5927\u6982\u6267\u884c\u6b21\u6570\uff0c\u90a3\u4e48\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u5927O\u7684\u6e10\u8fdb\u8868\u793a\u6cd5\u3002</p>"},{"location":"C-C%2B%2B/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#22-o","title":"2.2 \u5927O\u7684\u6e10\u8fdb\u8868\u793a\u6cd5","text":"<p>\u5927O\u7b26\u53f7\uff08Big O notation\uff09\uff1a\u662f\u7528\u4e8e\u63cf\u8ff0\u51fd\u6570\u6e10\u8fdb\u884c\u4e3a\u7684\u6570\u5b66\u7b26\u53f7\u3002</p> <p>\u63a8\u5bfc\u5927O\u9636\u65b9\u6cd5\uff1a</p> <p>1\u3001\u7528\u5e38\u65701\u53d6\u4ee3\u8fd0\u884c\u65f6\u95f4\u4e2d\u7684\u6240\u6709\u52a0\u6cd5\u5e38\u6570\u3002</p> <p>2\u3001\u5728\u4fee\u6539\u540e\u7684\u8fd0\u884c\u6b21\u6570\u51fd\u6570\u4e2d\uff0c\u53ea\u4fdd\u7559\u6700\u9ad8\u9636\u9879\u3002</p> <p>3\u3001\u5982\u679c\u6700\u9ad8\u9636\u9879\u5b58\u5728\u4e14\u4e0d\u662f1\uff0c\u5219\u53bb\u9664\u4e0e\u8fd9\u4e2a\u9879\u76ee\u76f8\u4e58\u7684\u5e38\u6570\u3002\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f\u5927O\u9636\u3002 \u4f7f\u7528\u5927O\u7684\u6e10\u8fdb\u8868\u793a\u6cd5\u4ee5\u540e\uff0cFunc1\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a</p> <p>$O(N^2)$</p> <ul> <li>N=10   F(N)=100</li> <li>N=100  F(N)=10000</li> <li>N=1000 F(N)=1000000 \u901a\u8fc7\u4e0a\u9762\u6211\u4eec\u4f1a\u53d1\u73b0\u5927O\u7684\u6e10\u8fdb\u8868\u793a\u6cd5\u53bb\u6389\u4e86\u90a3\u4e9b\u5bf9\u7ed3\u679c\u5f71\u54cd\u4e0d\u5927\u7684\u9879\uff0c\u7b80\u6d01\u660e\u4e86\u7684\u8868\u793a\u51fa\u4e86\u6267\u884c\u6b21\u6570\u3002</li> </ul> <p>\u53e6\u5916\u6709\u4e9b\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b58\u5728\u6700\u597d\u3001\u5e73\u5747\u548c\u6700\u574f\u60c5\u51b5\uff1a</p> <p>\u6700\u574f\u60c5\u51b5\uff1a\u4efb\u610f\u8f93\u5165\u89c4\u6a21\u7684\u6700\u5927\u8fd0\u884c\u6b21\u6570(\u4e0a\u754c)</p> <p>\u5e73\u5747\u60c5\u51b5\uff1a\u4efb\u610f\u8f93\u5165\u89c4\u6a21\u7684\u671f\u671b\u8fd0\u884c\u6b21\u6570</p> <p>\u6700\u597d\u60c5\u51b5\uff1a\u4efb\u610f\u8f93\u5165\u89c4\u6a21\u7684\u6700\u5c0f\u8fd0\u884c\u6b21\u6570(\u4e0b\u754c)</p> <p>\u4f8b\u5982\uff1a\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u6570\u7ec4\u4e2d\u641c\u7d22\u4e00\u4e2a\u6570\u636ex</p> <p>\u6700\u597d\u60c5\u51b5\uff1a1\u6b21\u627e\u5230</p> <p>\u6700\u574f\u60c5\u51b5\uff1aN\u6b21\u627e\u5230</p> <p>\u5e73\u5747\u60c5\u51b5\uff1aN/2\u6b21\u627e\u5230</p> <p>\u5728\u5b9e\u9645\u4e2d\u4e00\u822c\u60c5\u51b5\u5173\u6ce8\u7684\u662f\u7b97\u6cd5\u7684\u6700\u574f\u8fd0\u884c\u60c5\u51b5\uff0c\u6240\u4ee5\u6570\u7ec4\u4e2d\u641c\u7d22\u6570\u636e\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)</p>"},{"location":"C-C%2B%2B/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#23","title":"2.3\u5e38\u89c1\u65f6\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97\u4e3e\u4f8b","text":"<p>\u5b9e\u4f8b\u4e00:</p> <pre><code>// \u8ba1\u7b97Func2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(N))\nvoid Func2(int N)\n{\n    int count = 0;\n    for (int k = 0; k &lt; 2 * N; ++k)\n    {\n        ++count;\n    }\n    int M = 10;\n    while (M--)\n    {\n        ++count;\n    }\n    printf(\"%d\\n\", count);\n}\n</code></pre> <p>\u5b9e\u4f8b2\uff1a</p> <pre><code>// \u8ba1\u7b97Func3\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(M+N))\nvoid Func3(int N, int M)\n{\n    int count = 0;\n    for (int k = 0; k &lt; M; ++k)\n    {\n        ++count;\n    }\n    for (int k = 0; k &lt; N; ++k)\n    {\n        ++count;\n    }\n    printf(\"%d\\n\", count);\n}\n</code></pre> <p>\u5b9e\u4f8b3:</p> <pre><code>// \u8ba1\u7b97Func4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(1))\nvoid Func4(int N)\n{\n    int count = 0;\n    for (int k = 0; k &lt; 100; ++k)\n    {\n        ++count;\n    }\n    printf(\"%d\\n\", count);\n}\n</code></pre> <p>\u5b9e\u4f8b4:</p> <pre><code>// \u8ba1\u7b97strchr\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(N))\nconst char * strchr ( const char * str, int character );\n</code></pre> <p>\u5b9e\u4f8b5\uff1a</p> <pre><code>// \u8ba1\u7b97BubbleSort\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(N^2))\nvoid BubbleSort(int* a, int n)\n{\n    assert(a);\n    for (size_t end = n; end &gt; 0; --end)\n    {\n        int exchange = 0;\n        for (size_t i = 1; i &lt; end; ++i)\n        {\n            if (a[i - 1] &gt; a[i])\n            {\n                Swap(&amp;a[i - 1], &amp;a[i]);\n                exchange = 1;\n            }\n        }\n        if (exchange == 0)\n            break;\n    }\n}\n</code></pre> <p>\u5b9e\u4f8b6:</p> <pre><code>// \u8ba1\u7b97BinarySearch\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(logN))(\u6ce8:log\u9ed8\u8ba4\u662f\u4ee52\u4e3a\u5e95\u6570)\nint BinarySearch(int* a, int n, int x)\n{\n    assert(a);\n    int begin = 0;\n    int end = n - 1;\n    // [begin, end]\uff1abegin\u548cend\u662f\u5de6\u95ed\u53f3\u95ed\u533a\u95f4\uff0c\u56e0\u6b64\u6709=\u53f7\n    while (begin &lt;= end)\n    {\n        int mid = begin + ((end - begin) &gt;&gt; 1);\n        if (a[mid] &lt; x)\n            begin = mid + 1;\n        else if (a[mid] &gt; x)\n            end = mid - 1;\n        else\n            return mid;\n    }\n    return -1;\n}\n</code></pre> <p></p> <p>\u5bf9\u6bd4\u8868</p> N \u66b4\u529b\u67e5\u627e \u4e8c\u5206\u67e5\u627e 1000 1000(2^10) 10 100W 100W(2^20) 20 10\u4ebf 10\u4ebf(2^30) 30 <p>\u5b9e\u4f8b7\uff1a</p> <pre><code>// \u8ba1\u7b97\u9636\u4e58\u9012\u5f52Fac\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(N))\nlong long Fac(size_t N)\n{\n    if (0 == N)\n        return 1;\n    return Fac(N - 1) * N;\n}\n</code></pre> <p>\u5b9e\u4f8b8:</p> <pre><code>// \u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u9012\u5f52Fib\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(2^N))\nlong long Fib(size_t N)\n{\n    if (N &lt; 3)\n        return 1;\n    return Fib(N - 1) + Fib(N - 2);\n}\n</code></pre> <p>\u8fd9\u4e2a\u5b9e\u4f8b\u6bd4\u8f83\u96be\uff0c\u7c7b\u4f3c\u7ec6\u80de\u5206\u88c2,\u4e0a\u56fe\uff1a</p> <p></p> <p>\u7591\u95ee\uff1a\u6808\u7684\u7a7a\u95f4\u5982\u6b64\u7684\u5c0f\uff0c\u4e3a\u4ec0\u4e48\u5f53N=50\u7684\u65f6\u5019\uff0c2^50\u7684size_t\u7684\u7a7a\u95f4\u4e0d\u4f1a\u5d29\u6e83</p> <p>\u89e3\u7b54\uff1a\u4e0a\u56fe\u5df2\u7ecf\u89e3\u91ca\u8fc7\u4e86\uff0c\u65f6\u95f4\u7684\u5229\u7528\u662f\u4e00\u53bb\u4e0d\u590d\u8fd4\uff0c\u7a7a\u95f4\u53ef\u4ee5\u91cd\u590d\u5229\u7528\uff0c\u518d\u4e0a\u4e00\u4e2a\u56fe\u5427!</p> <p></p>"},{"location":"C-C%2B%2B/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#3","title":"3.\u7a7a\u95f4\u590d\u6742\u5ea6","text":"<p>\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u662f\u4e00\u4e2a\u6570\u5b66\u8868\u8fbe\u5f0f\uff0c \u662f\u5bf9\u4e00\u4e2a\u7b97\u6cd5\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4e34\u65f6\u5360\u7528\u5b58\u50a8\u7a7a\u95f4\u5927\u5c0f\u7684\u91cf\u5ea6 \u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0d\u662f\u7a0b\u5e8f\u5360\u7528\u4e86\u591a\u5c11bytes\u7684\u7a7a\u95f4\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4e5f\u6ca1\u592a\u5927\u610f\u4e49\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u7b97\u7684\u662f\u53d8\u91cf\u7684\u4e2a\u6570\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97\u89c4\u5219\u57fa\u672c\u8ddf\u5b9e\u8df5\u590d\u6742\u5ea6\u7c7b\u4f3c\uff0c\u4e5f\u4f7f\u7528 \u5927O\u6e10\u8fdb\u8868\u793a\u6cd5\u3002</p> <p>\u6ce8\u610f\uff1a\u51fd\u6570\u8fd0\u884c\u65f6\u6240\u9700\u8981\u7684\u6808\u7a7a\u95f4(\u5b58\u50a8\u53c2\u6570\u3001\u5c40\u90e8\u53d8\u91cf\u3001\u4e00\u4e9b\u5bc4\u5b58\u5668\u4fe1\u606f\u7b49)\u5728\u7f16\u8bd1\u671f\u95f4\u5df2\u7ecf\u786e\u5b9a\u597d\u4e86\uff0c\u56e0 \u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u901a\u8fc7\u51fd\u6570\u5728\u8fd0\u884c\u65f6\u5019\u663e\u5f0f\u7533\u8bf7\u7684\u989d\u5916\u7a7a\u95f4\u6765\u786e\u5b9a</p> <p>\u5b9e\u4f8b\u4e00\uff1a</p> <pre><code>// \u8ba1\u7b97BubbleSort\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff1f(O(1))\nvoid BubbleSort(int* a, int n)\n{\n    assert(a);\n    for (size_t end = n; end &gt; 0; --end)\n    {\n        int exchange = 0;\n        for (size_t i = 1; i &lt; end; ++i)\n        {\n            if (a[i - 1] &gt; a[i])\n            {\n                Swap(&amp;a[i - 1], &amp;a[i]);\n                exchange = 1;\n            }\n        }\n        if (exchange == 0)\n            break;\n    }\n}\n</code></pre> <p>\u5b9e\u4f8b2:</p> <pre><code>// \u8ba1\u7b97Fibonacci\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff1f(O(N))\n// \u8fd4\u56de\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u524dn\u9879\nlong long* Fibonacci(size_t n)\n{\n    if (n == 0)\n        return NULL;\n    long long* fibArray = (long long*)malloc((n + 1) * sizeof(long long));\n    fibArray[0] = 0;\n    fibArray[1] = 1;\n    for (int i = 2; i &lt;= n; ++i)\n    {\n        fibArray[i] = fibArray[i - 1] + fibArray[i - 2];\n    }\n    return fibArray;\n}\n</code></pre> <p>\u5b9e\u4f8b3:</p> <pre><code>// \u8ba1\u7b97\u9636\u4e58\u9012\u5f52Fac\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff1f(O(N))\nlong long Fac(size_t N)\n{\n    if (N == 0)\n        return 1;\n    return Fac(N - 1) * N;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#4","title":"4.\u5e38\u89c1\u590d\u6742\u5ea6\u5bf9\u6bd4","text":""},{"location":"C-C%2B%2B/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#5-oj","title":"5. \u590d\u6742\u5ea6\u7684oj\u7ec3\u4e60","text":"<p>5.1\u6d88\u5931\u7684\u6570\u5b57OJ</p> <pre><code>//\u601d\u8def\u4e00\uff1a\u6c42\u603b\u548c-\u6bcf\u4e00\u4e2a\u6570\u5b57\n//\u65f6\u95f4\u590d\u6742\u5ea6O(N),\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nint missingNumber(int* nums, int numsSize) {\n    int N = numsSize;\n    int ret = N * (N + 1) / 2;\n    for (int i = 0; i &lt; numsSize; ++i)\n    {\n        ret -= nums[i];\n    }\n    return ret;\n}\n//\u601d\u8def\u4e8c\uff1aqsort\u6392\u5e8f(\u6392\u9664)\n//\u65f6\u95f4\u590d\u6742\u5ea6O(N*logN),\u7a7a\u95f4\u590d\u6742\u5ea6(logN)(\u540e\u9762\u6392\u5e8f\u4f1a\u8bf4\uff0c\u6682\u4e14\u8bb0\u4f4f)\n\n//\u601d\u8def\u4e09\uff1a\u5f02\u6216-&gt;\u627e\u5355\u8eab\u72d7\u95ee\u9898\n//\u65f6\u95f4\u590d\u6742\u5ea6O(N),\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nint missingNumber(int* nums, int numsSize) {\n    int N = numsSize;\n    int x = 0;\n    for (int i = 0; i &lt; numsSize; ++i)\n    {\n        x ^= nums[i];\n    }\n    for (size_t j = 0; j &lt; N + 1; ++j)\n    {\n        x ^= j;\n    }\n    return x;\n}\n\n//\n</code></pre> <p>5.2 \u65cb\u8f6c\u6570\u7ec4OJ \u5f85\u66f4\u65b0\uff01\uff01\uff01\uff01</p>"},{"location":"C-C%2B%2B/%E7%BA%A2%E9%BB%91%E6%A0%91/","title":"\u7ea2\u9ed1\u6811","text":""},{"location":"C-C%2B%2B/%E7%BA%A2%E9%BB%91%E6%A0%91/#_2","title":"\u4e00\u3001\u7ea2\u9ed1\u6811","text":""},{"location":"C-C%2B%2B/%E7%BA%A2%E9%BB%91%E6%A0%91/#_3","title":"\uff08\u4e00\uff09\u7ea2\u9ed1\u6811\u7684\u6982\u5ff5","text":"<p>\u7ea2\u9ed1\u6811\uff0c\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4f46\u5728\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u589e\u52a0\u4e00\u4e2a\u5b58\u50a8\u4f4d\u8868\u793a\u7ed3\u70b9\u7684\u989c\u8272\uff0c\u53ef\u4ee5\u662fRed\u6216 Black\u3002 \u901a\u8fc7\u5bf9\u4efb\u4f55\u4e00\u6761\u4ece\u6839\u5230\u53f6\u5b50\u7684\u8def\u5f84\u4e0a\u5404\u4e2a\u7ed3\u70b9\u7740\u8272\u65b9\u5f0f\u7684\u9650\u5236\uff0c\u7ea2\u9ed1\u6811\u786e\u4fdd\u6ca1\u6709\u4e00\u6761\u8def \u5f84\u4f1a\u6bd4\u5176\u4ed6\u8def\u5f84\u957f\u51fa\u4fe9\u500d\uff0c\u56e0\u800c\u662f\u63a5\u8fd1\u5e73\u8861\u7684\u3002</p>"},{"location":"C-C%2B%2B/%E7%BA%A2%E9%BB%91%E6%A0%91/#_4","title":"\uff08\u4e8c\uff09 \u7ea2\u9ed1\u6811\u7684\u6027\u8d28","text":"<ol> <li>\u6bcf\u4e2a\u7ed3\u70b9\u4e0d\u662f\u7ea2\u8272\u5c31\u662f\u9ed1\u8272</li> <li>\u6839\u8282\u70b9\u662f\u9ed1\u8272\u7684</li> <li>\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u5219\u5b83\u7684\u4e24\u4e2a\u5b69\u5b50\u7ed3\u70b9\u662f\u9ed1\u8272\u7684</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u4ece\u8be5\u7ed3\u70b9\u5230\u5176\u6240\u6709\u540e\u4ee3\u53f6\u7ed3\u70b9\u7684\u7b80\u5355\u8def\u5f84\u4e0a\uff0c\u5747 \u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u7ed3\u70b9</li> <li>\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u90fd\u662f\u9ed1\u8272\u7684(\u6b64\u5904\u7684\u53f6\u5b50\u7ed3\u70b9\u6307\u7684\u662f\u7a7a\u7ed3\u70b9)</li> </ol> <p>\u95ee\uff1a\u4e3a\u4ec0\u4e48\u6ee1\u8db3\u4e0a\u9762\u7684\u6027\u8d28\uff0c\u7ea2\u9ed1\u6811\u5c31\u80fd\u4fdd\u8bc1\uff1a\u5176\u6700\u957f\u8def\u5f84\u4e2d\u8282\u70b9\u4e2a\u6570\u4e0d\u4f1a\u8d85\u8fc7\u6700\u77ed\u8def\u5f84\u8282\u70b9 \u4e2a\u6570\u7684\u4e24\u500d\uff1f</p> <p>\u7b54\uff1a</p> <p>\u6700\u77ed\u8def\u5f84\uff1a\u5168\u90e8\u4e3a\u9ed1\u8272\u7684</p> <p>\u6700\u957f\u8def\u5f84\uff1a\u4e00\u9ed1\u4e00\u7ea2</p> <p>\u6240\u4ee5\u6ee1\u8db3\u6700\u77ed\u8def\u5f84\u6070\u597d\u7b49\u4e8e\u6700\u957f\u8def\u5f84\u7684\u4e8c\u500d\u3002</p>"},{"location":"C-C%2B%2B/%E7%BA%A2%E9%BB%91%E6%A0%91/#_5","title":"\uff08\u4e09\uff09\u7ea2\u9ed1\u6811\u8282\u70b9\u7684\u5b9a\u4e49","text":"<p>\u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\uff0c\u6765\u533a\u5206\u7ea2\u8272\u548c\u9ed1\u8272</p> <pre><code>enum color {\n    RED,\n    BLACK\n};\n</code></pre> <p>\u601d\u8003\uff1a\u9ed8\u8ba4\u7684\u8282\u70b9\u5b9a\u4e49\u4e3a\u7ea2\u8272\u8fd8\u662f\u9ed1\u8272\uff1f</p> <p>\u7b54\uff1a\u7ea2\u8272\uff0c\u56e0\u4e3a\u9ed1\u8272\u4e00\u589e\u52a0\uff0c\u5176\u4f59\u6240\u6709\u7684\u8282\u70b9\u90fd\u8981\u589e\u52a0\u4e00\u4e2a\u9ed1\u8272\u7ed3\u70b9\uff0c\u5f00\u9500\u5f88\u5927\u3002</p> <pre><code>template&lt;class K, class V&gt; \nstruct RBTreeNode {\n    RBTreeNode&lt;K, V&gt;* _left;\n    RBTreeNode&lt;K, V&gt;* _right;\n    RBTreeNode&lt;K, V&gt;* _parent;\n    pair&lt;K, V&gt; _kv;\n    color _col;\n    RBTreeNode(const pair&lt;K, V&gt;&amp; kv)\n        :_left(nullptr)\n        ,_right(nullptr)\n        ,_parent(nullptr)\n        ,_kv(kv)\n        ,_col(RED)\n    {}\n};\n</code></pre>"},{"location":"C-C%2B%2B/%E7%BA%A2%E9%BB%91%E6%A0%91/#_6","title":"\u4e8c\u3001\u7ea2\u9ed1\u6811\u7684\u63d2\u5165","text":"<p>\u9996\u5148\u627e\u5230cur\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u548cAVL\u6811\u7684\u63d2\u5165\u662f\u4e00\u6837\u7684\uff0c\u552f\u4e00\u4e0d\u4e00\u6837\u7684\u5c31\u662f\u4ee5\u524d\u662f\u5e73\u8861\u56e0\u5b50\u6539\u53d8\uff0c\u53d8\u6210\u4e86\u989c\u8272\u6539\u53d8\uff0c\u6240\u4ee5\u5c31\u4e0d\u518d\u4ecb\u7ecd\u3002\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>template&lt;class K, class V&gt; \nstruct RBTree {\npublic:\n    typedef RBTreeNode&lt;K, V&gt; Node;\n    bool Insert(const pair&lt;K, V&gt;&amp; kv) {\n        if (_root == nullptr) {\n            _root = new Node(kv);\n            _root-&gt;_col = BLACK;\n            return true;\n        }\n        Node* cur = _root;\n        Node* parent = nullptr;\n        while (cur) {\n            if (cur-&gt;_kv.first &gt; kv.first) {\n                parent = cur;\n                cur = cur-&gt;_left;\n            }\n            else if (cur-&gt;_kv.first &lt; kv.first) {\n                parent = cur;\n                cur = cur-&gt;right;\n            }\n            else\n                return false;\n        }\n        cur = new Node(kv);\n        if (parent-&gt;_kv.first &lt; kv.first)\n            parent-&gt;_right = cur;\n        else\n            parent-&gt;_left = cur;\n        cur-&gt;_parent = parent;      \n    }\nprivate:\n    Node* _root;\n};\n</code></pre> <p>\u6b63\u5f0f\u8fdb\u5165\u63d2\u5165\u73af\u8282\uff1a</p> <p>\u63d2\u5165\u65b0\u8282\u70b9\u7684\u989c\u8272\uff1a\u7ea2\u8272</p> <p>1.\u63d2\u5165\u4f4d\u7f6e\u7236\u4eb2\u7684\u989c\u8272\u662f\u9ed1\u8272\uff0c\u4e0d\u9700\u8981\u5904\u7406\uff0c\u63d2\u5165\u7ed3\u675f</p> <p>2.\u63d2\u5165\u4f4d\u7f6e\u7684\u7236\u4eb2\u989c\u8272\u662f\u7ea2\u8272\uff0c\u51fa\u73b0\u4e86\u8fde\u7eed\u7684\u7ea2\u8272\u8282\u70b9\uff0c\u9700\u8981\u5904\u7406</p> <p>\u8fd9\u91cc\u5b9a\u4e49\u7237\u7237(g)\u7684\u53e6\u5916\u4e00\u4e2a\u7ed3\u70b9\u4e3a\u53d4\u53d4\u8282\u70b9\uff0c\u7b80\u79f0uncle/u</p> <p>\u60c5\u51b5\u4e00\uff1au\u5b58\u5728\u4e14\u4e3a\u7ea2</p> <p>p/u\u53d8\u9ed1\u3001g\u53d8\u7ea2\uff08\u5982\u679cg\u662froot\uff0c\u518d\u628ag\u53d8\u6210\u9ed1\uff09=&gt; c\u53d8\u6210g\uff0cp\u53d8\u6210c\u7684\u7236\u4eb2\uff08\u4f20\u9012\u4e0a\u53bb\uff09</p> <p>\u6ce8\uff1a</p> <p>p/u\u662fg\u7684\u5de6\u53f3\u90fd\u4e0d\u5f71\u54cd</p> <p>cur\u662fp\u7684\u5de6\u53f3\u4e5f\u4e0d\u5f71\u54cd</p> <p>\u7531\u4e8e\u6839\u8282\u70b9\u6c38\u8fdc\u662f\u9ed1\u8272\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u5916\u9762\u5b9a\u4e49\u4e00\u4e0b_root-&gt;_col = BLACK</p> <p>\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>while (parent &amp;&amp; parent-&gt;_col == RED) {\n    Node* grandfather = parent-&gt;_parent;\n    if (parent == grandfather-&gt;_left) {\n        Node* uncle = grandfather-&gt;_right;\n        if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n            // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n            parent-&gt;_col = uncle-&gt;_col = BLACK;\n            grandfather-&gt;_col = RED;\n            cur = grandfather;\n            parent = cur-&gt;_parent;\n        }\n        else {\n            //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n        }\n    }\n    else {\n        Node* uncle = grandfather-&gt;_left;\n        if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n            // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n            parent-&gt;_col = uncle-&gt;_col = BLACK;\n            grandfather-&gt;_col = RED;\n            cur = grandfather;\n            parent = cur-&gt;_parent;\n        }\n        else {\n            //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n\n        }\n    }\n}\n        _root-&gt;_col = BLACK;\n</code></pre> <p>\u60c5\u51b5\u4e8c: uncle\u4e0d\u5b58\u5728\uff0c\u6216\u8005uncle\u4e3a\u9ed1\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u65cb\u8f6c+\u53d8\u8272(\u5173\u952e\u5728\u4e8e\u753b\u56fe)\uff0c\u65cb\u8f6c\u4ee3\u7801\u548cAVL\u6811\u4e00\u6837\u4e0d\u518d\u8bb2\u89e3\u3002</p> <pre><code>while (parent &amp;&amp; parent-&gt;_col == RED) {\n    Node* grandfather = parent-&gt;_parent;\n    if (parent == grandfather-&gt;_left) {\n        Node* uncle = grandfather-&gt;_right;\n        if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n            // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n            parent-&gt;_col = uncle-&gt;_col = BLACK;\n            grandfather-&gt;_col = RED;\n            cur = grandfather;\n            parent = cur-&gt;_parent;\n        }\n        else {\n            //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n            if (parent-&gt;_left == cur) {\n                //     g\n                //   p   u\n                // c\n                RotateR(grandfather);\n                parent-&gt;_col = BLACK;\n                grandfather-&gt;_col = RED;\n            }\n            else {\n                //   g\n                // p   u\n                //   c\n                RotateL(parent);\n                RotateR(grandfather);\n                cur-&gt;_col = BLACK;\n                grandfather-&gt;_col = RED;\n            }\n            break;\n        }\n    }\n    else {\n        Node* uncle = grandfather-&gt;_left;\n        if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n            // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n            parent-&gt;_col = uncle-&gt;_col = BLACK;\n            grandfather-&gt;_col = RED;\n            cur = grandfather;\n            parent = cur-&gt;_parent;\n        }\n        else {\n            //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n            if (parent-&gt;_right == cur) {\n                //   g\n                // u   p\n                //       c\n                RotateL(grandfather);\n                parent-&gt;_col = BLACK;\n                grandfather-&gt;_col = RED;\n            }\n            else {\n                //   g\n                // u   p\n                //   c\n                RotateR(parent);\n                RotateL(grandfather);\n                cur-&gt;_col = BLACK;\n                grandfather-&gt;_col = RED;\n            }\n            break;\n        }\n    }\n}\n_root-&gt;_col = BLACK;\n</code></pre>"},{"location":"C-C%2B%2B/%E7%BA%A2%E9%BB%91%E6%A0%91/#_7","title":"\u4e09\u3001\u7ea2\u9ed1\u6811\u7684\u5e73\u8861\u9a8c\u8bc1","text":"<pre><code>bool Check(Node* root, int BlackNum, int RefBlackNum) {\n    if (root == nullptr) {\n        if (BlackNum != RefBlackNum) {\n            cout &lt;&lt; \"\u9ed1\u8272\u4e2a\u6570\u4e0d\u76f8\u7b49\" &lt;&lt; endl;\n            return false;\n        }\n        return true;\n    }\n\n    if (root-&gt;_col == BLACK)\n        BlackNum++;\n\n    if (root-&gt;_col == RED &amp;&amp; root-&gt;_parent-&gt;_col == RED) {\n        cout &lt;&lt; \"\u51fa\u73b0\u8fde\u7eed\u7ea2\u8272\u8282\u70b9\" &lt;&lt; endl;\n        return false;\n    }\n\n    return Check(root-&gt;_left, BlackNum, RefBlackNum)\n        &amp;&amp; Check(root-&gt;_right, BlackNum, RefBlackNum);\n}\n\nbool IsBalance() {\n    if (_root &amp;&amp; _root-&gt;_col == RED)\n        return false;\n    int RefBlackNum = 0;\n    Node* cur = _root;\n    while (cur) {\n        if (cur-&gt;_col == BLACK)\n            RefBlackNum++;\n        cur = cur-&gt;_left;\n    }\n    return Check(_root, 0, RefBlackNum);\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E7%BA%A2%E9%BB%91%E6%A0%91/#_8","title":"\u56db\u3001\u4ee3\u7801\u6c47\u603b","text":"<pre><code>#pragma once\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;assert.h&gt;\nusing namespace std;\nenum color {\n    RED,\n    BLACK\n};\n\ntemplate&lt;class K, class V&gt; \nstruct RBTreeNode {\n    RBTreeNode&lt;K, V&gt;* _left;\n    RBTreeNode&lt;K, V&gt;* _right;\n    RBTreeNode&lt;K, V&gt;* _parent;\n    pair&lt;K, V&gt; _kv;\n    color _col;\n    RBTreeNode(const pair&lt;K, V&gt;&amp; kv)\n        :_left(nullptr)\n        ,_right(nullptr)\n        ,_parent(nullptr)\n        ,_kv(kv)\n        ,_col(RED)\n    {}\n};\n\ntemplate&lt;class K, class V&gt; \nstruct RBTree {\npublic:\n    typedef RBTreeNode&lt;K, V&gt; Node;\n    bool Insert(const pair&lt;K, V&gt;&amp; kv) {\n        if (_root == nullptr) {\n            _root = new Node(kv);\n            _root-&gt;_col = BLACK;\n            return true;\n        }\n        Node* cur = _root;\n        Node* parent = nullptr;\n        while (cur) {\n            if (cur-&gt;_kv.first &gt; kv.first) {\n                parent = cur;\n                cur = cur-&gt;_left;\n            }\n            else if (cur-&gt;_kv.first &lt; kv.first) {\n                parent = cur;\n                cur = cur-&gt;_right;\n            }\n            else\n                return false;\n        }\n        cur = new Node(kv);\n        if (parent-&gt;_kv.first &lt; kv.first)\n            parent-&gt;_right = cur;\n        else\n            parent-&gt;_left = cur;\n        cur-&gt;_parent = parent;      \n        while (parent &amp;&amp; parent-&gt;_col == RED) {\n            Node* grandfather = parent-&gt;_parent;\n            if (parent == grandfather-&gt;_left) {\n                Node* uncle = grandfather-&gt;_right;\n                if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n                    // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n                    parent-&gt;_col = uncle-&gt;_col = BLACK;\n                    grandfather-&gt;_col = RED;\n                    cur = grandfather;\n                    parent = cur-&gt;_parent;\n                }\n                else {\n                    //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n                    if (parent-&gt;_left == cur) {\n                        //     g\n                        //   p   u\n                        // c\n                        RotateR(grandfather);\n                        parent-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    else {\n                        //   g\n                        // p   u\n                        //   c\n                        RotateL(parent);\n                        RotateR(grandfather);\n                        cur-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    break;\n                }\n            }\n            else {\n                Node* uncle = grandfather-&gt;_left;\n                if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n                    // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n                    parent-&gt;_col = uncle-&gt;_col = BLACK;\n                    grandfather-&gt;_col = RED;\n                    cur = grandfather;\n                    parent = cur-&gt;_parent;\n                }\n                else {\n                    //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n                    if (parent-&gt;_right == cur) {\n                        //   g\n                        // u   p\n                        //       c\n                        RotateL(grandfather);\n                        parent-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    else {\n                        //   g\n                        // u   p\n                        //   c\n                        RotateR(parent);\n                        RotateL(grandfather);\n                        cur-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    break;\n                }\n            }\n        }\n        _root-&gt;_col = BLACK;\n        return true;\n    }\n\n    void RotateL(Node* parent)\n    {\n\n        Node* subR = parent-&gt;_right;\n        Node* subRL = subR-&gt;_left;\n\n        parent-&gt;_right = subRL;\n        if (subRL)\n            subRL-&gt;_parent = parent;\n\n        subR-&gt;_left = parent;\n        Node* ppnode = parent-&gt;_parent;\n        parent-&gt;_parent = subR;\n\n        if (parent == _root)\n        {\n            _root = subR;\n            subR-&gt;_parent = nullptr;\n        }\n        else\n        {\n            if (ppnode-&gt;_left == parent)\n            {\n                ppnode-&gt;_left = subR;\n            }\n            else\n            {\n                ppnode-&gt;_right = subR;\n            }\n            subR-&gt;_parent = ppnode;\n        }\n    }\n\n    void RotateR(Node* parent)\n    {\n        Node* subL = parent-&gt;_left;\n        Node* subLR = subL-&gt;_right;\n\n        parent-&gt;_left = subLR;\n        if (subLR)\n            subLR-&gt;_parent = parent;\n\n        subL-&gt;_right = parent;\n\n        Node* ppnode = parent-&gt;_parent;\n        parent-&gt;_parent = subL;\n\n        if (parent == _root)\n        {\n            _root = subL;\n            subL-&gt;_parent = nullptr;\n        }\n        else\n        {\n            if (ppnode-&gt;_left == parent)\n            {\n                ppnode-&gt;_left = subL;\n            }\n            else\n            {\n                ppnode-&gt;_right = subL;\n            }\n            subL-&gt;_parent = ppnode;\n        }\n    }\n\n    bool Check(Node* root, int BlackNum, int RefBlackNum) {\n        if (root == nullptr) {\n            if (BlackNum != RefBlackNum) {\n                cout &lt;&lt; \"\u9ed1\u8272\u4e2a\u6570\u4e0d\u76f8\u7b49\" &lt;&lt; endl;\n                return false;\n            }\n            return true;\n        }\n\n        if (root-&gt;_col == BLACK)\n            BlackNum++;\n\n        if (root-&gt;_col == RED &amp;&amp; root-&gt;_parent-&gt;_col == RED) {\n            cout &lt;&lt; \"\u51fa\u73b0\u8fde\u7eed\u7ea2\u8272\u8282\u70b9\" &lt;&lt; endl;\n            return false;\n        }\n\n        return Check(root-&gt;_left, BlackNum, RefBlackNum)\n            &amp;&amp; Check(root-&gt;_right, BlackNum, RefBlackNum);\n    }\n\n    bool IsBalance() {\n        if (_root &amp;&amp; _root-&gt;_col == RED)\n            return false;\n        int RefBlackNum = 0;\n        Node* cur = _root;\n        while (cur) {\n            if (cur-&gt;_col == BLACK)\n                RefBlackNum++;\n            cur = cur-&gt;_left;\n        }\n        return Check(_root, 0, RefBlackNum);\n    }\n\nprivate:\n    Node* _root = nullptr;\n};\n\nvoid TestRBTree()\n{\n    const int N = 1000000;\n    vector&lt;int&gt; v;\n    v.reserve(N);\n    srand(time(0));\n\n    for (size_t i = 0; i &lt; N; i++)\n    {\n        v.push_back(rand() + i);\n    }\n    RBTree&lt;int, int&gt; t;\n    for (auto e : v)\n    {\n        t.Insert(make_pair(e, e));\n    }\n    cout &lt;&lt; t.IsBalance() &lt;&lt; endl;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%AE%9E%E7%8E%B0map%E5%92%8Cset/","title":"\u7ea2\u9ed1\u6811\u5b9e\u73b0map\u548cset","text":"<p>\u4e3a\u4e86\u8fd0\u7528\u7ea2\u9ed1\u6811\u7684\u4e00\u5957\u5de5\u5177\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u7ea2\u9ed1\u6811\u8bbe\u7f6e\u4e3a3\u4e2a\u6a21\u7248</p> <p>\u7b2c\u4e00\u4e2a\u8868\u793akey\uff0c\u7b2c\u4e8c\u4e2a\u8868\u793akey/key_value\uff0c\u7b2c\u4e09\u4e2a\u8868\u793a\u4eff\u51fd\u6570\u6765\u89e3\u51b3key\u76f4\u63a5\u7684\u6bd4\u8f83</p> <p>\u540c\u65f6\u6dfb\u52a0\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668iterator\u6765\u4f5c\u4e3a\u8fed\u4ee3\u5668</p> <p>BRTree.h:</p> <pre><code>#pragma once\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;assert.h&gt;\nusing namespace std;\nenum color {\n    RED,\n    BLACK\n};\n\ntemplate&lt;class T&gt;\nstruct RBTreeNode {\n    RBTreeNode&lt;T&gt;* _left;\n    RBTreeNode&lt;T&gt;* _right;\n    RBTreeNode&lt;T&gt;* _parent;\n    T _data;\n    color _col;\n    RBTreeNode(const T&amp; data)\n        :_left(nullptr)\n        , _right(nullptr)\n        , _parent(nullptr)\n        , _data(data)\n        , _col(RED)\n    {}\n};\n\ntemplate&lt;class T, class Ptr, class Ref&gt; \nstruct RBTreeIterator {\n    typedef RBTreeNode&lt;T&gt; Node;\n    typedef RBTreeIterator&lt;T, Ptr, Ref&gt; Self;\n    Node* _node;\n    RBTreeIterator(Node* node)\n        :_node(node)\n    {}\n\n    Ptr operator-&gt;() {\n        return &amp;_node-&gt;_data;\n    }\n\n    Ref operator*() {\n        return _node-&gt;_data;\n    }\n\n    Self&amp; operator++() {\n        if (_node-&gt;_right) {\n            Node* SubLeft = _node-&gt;_right;\n            while (SubLeft-&gt;_left)\n                SubLeft = SubLeft-&gt;_left;\n            _node = SubLeft;\n        }\n        else {\n            Node* cur = _node;\n            Node* parent = cur-&gt;_parent;\n            while (parent &amp;&amp; cur == parent-&gt;_right) {\n                cur = parent;\n                parent = cur-&gt;_parent;\n            }\n            _node = parent;\n        }\n        return *this;\n    }\n\n    Self&amp; operator--() {\n        if (_node-&gt;_left) {\n            Node* SubRight = _node-&gt;_left;\n            while (SubRight-&gt;_right)\n                SubRight = SubRight-&gt;_right;\n            _node = SubRight;\n        }\n        else {\n            Node* cur = _node;\n            Node* parent = _node-&gt;_parent;\n            while (parent &amp;&amp; cur == parent-&gt;_left) {\n                cur = parent;\n                parent = parent-&gt;_parent;\n            }\n            _node = parent;\n        }\n        return *this;\n    }\n\n    bool operator!=(const Self&amp; s) {\n        return _node != s._node;\n    }\n\n    bool operator==(const Self&amp; s) {\n        return _node == s._node;\n    }\n};\n\ntemplate&lt;class K, class T, class KeyOfT&gt;\nstruct RBTree {\npublic:\n    typedef RBTreeNode&lt;T&gt; Node;\n    typedef RBTreeIterator&lt;T, T*, T&amp;&gt; iterator;\n    typedef RBTreeIterator&lt;T, const T*, const T&amp;&gt; const_iterator;\n    const_iterator begin() const {\n        Node* SubLeft = _root;\n        while (SubLeft &amp;&amp; SubLeft-&gt;_left)\n            SubLeft = SubLeft-&gt;_left;\n        return const_iterator(SubLeft);\n    }\n\n    const_iterator end() const {\n        const_iterator(nullptr);\n    }\n\n    iterator begin() {\n        Node* SubLeft = _root;\n        while (SubLeft &amp;&amp; SubLeft-&gt;_left)\n            SubLeft = SubLeft-&gt;_left;\n        return iterator(SubLeft);\n    }\n\n    iterator end() {\n        return iterator(nullptr);\n    }\n\n    iterator Find(const K&amp; key) {\n        KeyOfT kot;\n        Node* cur = _root;\n        while (cur) {\n            if (kot(cur-&gt;_data) &lt; key)\n                cur = cur-&gt;_right;\n            else if (kot(cur-&gt;_data) &gt; key)\n                cur = cur-&gt;_left;\n            else\n                return iterator(cur);\n        }\n        return end();\n    }\n\n    pair&lt;iterator, bool&gt; Insert(const T&amp; data) {\n        if (_root == nullptr) {\n            _root = new Node(data);\n            _root-&gt;_col = BLACK;\n            return make_pair(iterator(_root), true);\n        }\n        KeyOfT kot;\n        Node* cur = _root;\n        Node* parent = nullptr;\n        while (cur) {\n            if (kot(cur-&gt;_data) &gt; kot(data)) {\n                parent = cur;\n                cur = cur-&gt;_left;\n            }\n            else if (kot(cur-&gt;_data) &lt; kot(data)) {\n                parent = cur;\n                cur = cur-&gt;_right;\n            }\n            else\n                return make_pair(iterator(cur), false);\n        }\n        cur = new Node(data);\n        Node* newnode = cur;\n        if (kot(parent-&gt;_data) &lt; kot(data))\n            parent-&gt;_right = cur;\n        else\n            parent-&gt;_left = cur;\n        cur-&gt;_parent = parent;\n        while (parent &amp;&amp; parent-&gt;_col == RED) {\n            Node* grandfather = parent-&gt;_parent;\n            if (parent == grandfather-&gt;_left) {\n                Node* uncle = grandfather-&gt;_right;\n                if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n                    // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n                    parent-&gt;_col = uncle-&gt;_col = BLACK;\n                    grandfather-&gt;_col = RED;\n                    cur = grandfather;\n                    parent = cur-&gt;_parent;\n                }\n                else {\n                    //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n                    if (parent-&gt;_left == cur) {\n                        //     g\n                        //   p   u\n                        // c\n                        RotateR(grandfather);\n                        parent-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    else {\n                        //   g\n                        // p   u\n                        //   c\n                        RotateL(parent);\n                        RotateR(grandfather);\n                        cur-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    break;\n                }\n            }\n            else {\n                Node* uncle = grandfather-&gt;_left;\n                if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n                    // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n                    parent-&gt;_col = uncle-&gt;_col = BLACK;\n                    grandfather-&gt;_col = RED;\n                    cur = grandfather;\n                    parent = cur-&gt;_parent;\n                }\n                else {\n                    //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n                    if (parent-&gt;_right == cur) {\n                        //   g\n                        // u   p\n                        //       c\n                        RotateL(grandfather);\n                        parent-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    else {\n                        //   g\n                        // u   p\n                        //   c\n                        RotateR(parent);\n                        RotateL(grandfather);\n                        cur-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    break;\n                }\n            }\n        }\n        _root-&gt;_col = BLACK;\n        return make_pair(iterator(newnode), false);\n    }\n\n    void RotateL(Node* parent)\n    {\n\n        Node* subR = parent-&gt;_right;\n        Node* subRL = subR-&gt;_left;\n\n        parent-&gt;_right = subRL;\n        if (subRL)\n            subRL-&gt;_parent = parent;\n\n        subR-&gt;_left = parent;\n        Node* ppnode = parent-&gt;_parent;\n        parent-&gt;_parent = subR;\n\n        if (parent == _root)\n        {\n            _root = subR;\n            subR-&gt;_parent = nullptr;\n        }\n        else\n        {\n            if (ppnode-&gt;_left == parent)\n            {\n                ppnode-&gt;_left = subR;\n            }\n            else\n            {\n                ppnode-&gt;_right = subR;\n            }\n            subR-&gt;_parent = ppnode;\n        }\n    }\n\n    void RotateR(Node* parent)\n    {\n        Node* subL = parent-&gt;_left;\n        Node* subLR = subL-&gt;_right;\n\n        parent-&gt;_left = subLR;\n        if (subLR)\n            subLR-&gt;_parent = parent;\n\n        subL-&gt;_right = parent;\n\n        Node* ppnode = parent-&gt;_parent;\n        parent-&gt;_parent = subL;\n\n        if (parent == _root)\n        {\n            _root = subL;\n            subL-&gt;_parent = nullptr;\n        }\n        else\n        {\n            if (ppnode-&gt;_left == parent)\n            {\n                ppnode-&gt;_left = subL;\n            }\n            else\n            {\n                ppnode-&gt;_right = subL;\n            }\n            subL-&gt;_parent = ppnode;\n        }\n    }\n\n    bool Check(Node* root, int BlackNum, int RefBlackNum) {\n        if (root == nullptr) {\n            if (BlackNum != RefBlackNum) {\n                cout &lt;&lt; \"\u9ed1\u8272\u4e2a\u6570\u4e0d\u76f8\u7b49\" &lt;&lt; endl;\n                return false;\n            }\n            return true;\n        }\n\n        if (root-&gt;_col == BLACK)\n            BlackNum++;\n\n        if (root-&gt;_col == RED &amp;&amp; root-&gt;_parent-&gt;_col == RED) {\n            cout &lt;&lt; \"\u51fa\u73b0\u8fde\u7eed\u7ea2\u8272\u8282\u70b9\" &lt;&lt; endl;\n            return false;\n        }\n\n        return Check(root-&gt;_left, BlackNum, RefBlackNum)\n            &amp;&amp; Check(root-&gt;_right, BlackNum, RefBlackNum);\n    }\n\n    bool IsBalance() {\n        if (_root &amp;&amp; _root-&gt;_col == RED)\n            return false;\n        int RefBlackNum = 0;\n        Node* cur = _root;\n        while (cur) {\n            if (cur-&gt;_col == BLACK)\n                RefBlackNum++;\n            cur = cur-&gt;_left;\n        }\n        return Check(_root, 0, RefBlackNum);\n    }\n\nprivate:\n    Node* _root = nullptr;\n};\n\n</code></pre> <p>MyMap.h:</p> <pre><code>#pragma once\n#include\"RBTree.h\"\nnamespace lkt {\n    template&lt;class K, class V&gt;\n    class map {\n        struct MapKeyOfT {\n            const K&amp; operator()(const pair&lt;K, V&gt;&amp; kv) {\n                return kv.first;\n            }\n        };\n    public:\n        typedef typename RBTree&lt;K, pair&lt;const K, V&gt;, MapKeyOfT&gt;::iterator iterator;\n        typedef typename RBTree&lt;K, pair&lt;const K, V&gt;, MapKeyOfT&gt;::const_iterator const_iterator;\n        iterator begin() {\n            return _t.begin();\n        }\n\n        iterator end() {\n            return _t.end();\n        }\n\n        pair&lt;iterator, bool&gt; insert(const pair&lt;K, V&gt;&amp; kv) {\n            return _t.Insert(kv);\n        }\n\n        iterator find(const K&amp; key) {\n            return _t.Find(key);\n        }\n\n        V&amp; operator[] (const K&amp; key) {\n            pair&lt;iterator, bool&gt; ret = insert(make_pair(key, V()));\n            return ret.first-&gt;second;\n        }\n    private:\n        RBTree&lt;K, pair&lt;const K, V&gt;, MapKeyOfT&gt; _t;\n    };\n\n    void TestMap() {\n        map&lt;int, int&gt; m;\n        int a[] = { 4, 2, 6, 1, 3, 5, 15, 7, 16, 14 };\n        for (auto e : a)\n        {\n            m.insert(make_pair(e, e));\n        }\n\n        map&lt;int, int&gt;::iterator it = m.begin();\n        while (it != m.end())\n        {\n            //it-&gt;first += 100;\n            it-&gt;second += 100;\n\n            cout &lt;&lt; it-&gt;first &lt;&lt; \":\" &lt;&lt; it-&gt;second &lt;&lt; endl;\n            ++it;\n        }\n        cout &lt;&lt; endl;\n\n    }\n}\n\n</code></pre> <p>MySet.h:</p> <pre><code>#pragma once\n#include \"RBTree.h\"\nnamespace lkt {\n    template&lt;class K&gt;\n    class set {\n        struct SetKeyOfT {\n            const K&amp; operator() (const K&amp; key) {\n                return key;\n            }\n        };\n    public:\n\n        typedef typename RBTree&lt;K, const K, SetKeyOfT&gt;::iterator iterator;\n        typedef typename RBTree&lt;K, const K, SetKeyOfT&gt;::const_iterator const_iterator;\n\n        iterator begin() {\n            return _t.begin();\n        }\n\n        iterator end() {\n            return _t.end();\n        }\n\n        pair&lt;iterator, bool&gt; insert(const K&amp; key) {\n            return _t.Insert(key);\n        }\n\n        iterator find(const K&amp; key) {\n            return _t.Find(key);\n        }\n\n    private:\n        RBTree&lt;K, const K, SetKeyOfT&gt; _t;\n    };\n\n    void TestSet() {\n        set&lt;int&gt; s;\n        int a[] = { 4, 2, 6, 1, 3, 5, 15, 7, 16, 14 };\n        for (auto e : a)\n        {\n            s.insert(e);\n        }\n        set&lt;int&gt;::iterator it = s.begin();\n        while (it != s.end()) {\n            cout &lt;&lt; *it &lt;&lt; \" \";\n            ++it;\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\n</code></pre> <p>test.cpp:</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS 1\n#include\"MySet.h\"\n#include \"MyMap.h\"\nint main() {\n    lkt::TestSet();\n    lkt::TestMap();\n    return 0;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/","title":"\u987a\u5e8f\u8868 \u94fe\u8868","text":""},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#1","title":"1. \u7ebf\u6027\u8868","text":"<p>\u7ebf\u6027\u8868\uff08linear list\uff09\u662fn\u4e2a\u5177\u6709\u76f8\u540c\u7279\u6027\u7684\u6570\u636e\u5143\u7d20\u7684\u6709\u9650\u5e8f\u5217\u3002 \u7ebf\u6027\u8868\u662f\u4e00\u79cd\u5728\u5b9e\u9645\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u6570\u636e\u7ed3 \u6784\uff0c\u5e38\u89c1\u7684\u7ebf\u6027\u8868\uff1a\u987a\u5e8f\u8868\u3001\u94fe\u8868\u3001\u6808\u3001\u961f\u5217\u3001\u5b57\u7b26\u4e32...</p> <p>\u7ebf\u6027\u8868\u5728\u903b\u8f91\u4e0a\u662f\u7ebf\u6027\u7ed3\u6784\uff0c\u4e5f\u5c31\u8bf4\u662f\u8fde\u7eed\u7684\u4e00\u6761\u76f4\u7ebf\u3002\u4f46\u662f\u5728\u7269\u7406\u7ed3\u6784\u4e0a\u5e76\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\uff0c\u7ebf\u6027\u8868\u5728\u7269 \u7406\u4e0a\u5b58\u50a8\u65f6\uff0c\u901a\u5e38\u4ee5\u6570\u7ec4\u548c\u94fe\u5f0f\u7ed3\u6784\u7684\u5f62\u5f0f\u5b58\u50a8\u3002</p>"},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#2","title":"2. \u987a\u5e8f\u8868","text":""},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#21","title":"2.1 \u6982\u5ff5\u4ee5\u53ca\u7ed3\u6784","text":"<p>\u987a\u5e8f\u8868\u662f\u7528\u4e00\u6bb5\u7269\u7406\u5730\u5740\u8fde\u7eed\u7684\u5b58\u50a8\u5355\u5143\u4f9d\u6b21\u5b58\u50a8\u6570\u636e\u5143\u7d20\u7684\u7ebf\u6027\u7ed3\u6784\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u91c7\u7528\u6570\u7ec4\u5b58\u50a8\u3002\u5728\u6570\u7ec4 \u4e0a\u5b8c\u6210\u6570\u636e\u7684\u589e\u5220\u67e5\u6539\u3002 \u987a\u5e8f\u8868\u4e00\u822c\u53ef\u4ee5\u5206\u4e3a\uff1a</p> <p>1.\u9759\u6001\u987a\u5e8f\u8868\uff1a\u4f7f\u7528\u5b9a\u957f\u6570\u7ec4\u5b58\u50a8\u3002</p> <p>2.\u52a8\u6001\u987a\u5e8f\u8868\uff1a\u4f7f\u7528\u52a8\u6001\u5f00\u8f9f\u7684\u6570\u7ec4\u5b58\u50a8\u3002</p>"},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#22","title":"2.2 \u63a5\u53e3\u5b9e\u73b0","text":"<pre><code>typedef int SLTDateType;\ntypedef struct SListNode\n{\n    SLTDateType data;\n    struct SListNode* next;\n}SListNode;\n\n// \u52a8\u6001\u7533\u8bf7\u4e00\u4e2a\u8282\u70b9\nSListNode* BuySListNode(SLTDateType x);\n// \u5355\u94fe\u8868\u6253\u5370\nvoid SListPrint(SListNode* plist);\n// \u5355\u94fe\u8868\u5c3e\u63d2\nvoid SListPushBack(SListNode** pplist, SLTDateType x);\n// \u5355\u94fe\u8868\u7684\u5934\u63d2\nvoid SListPushFront(SListNode** pplist, SLTDateType x);\n// \u5355\u94fe\u8868\u7684\u5c3e\u5220\nvoid SListPopBack(SListNode** pplist);\n// \u5355\u94fe\u8868\u5934\u5220\nvoid SListPopFront(SListNode** pplist);\n// \u5355\u94fe\u8868\u67e5\u627e\nSListNode* SListFind(SListNode* plist, SLTDateType x);\n// \u5355\u94fe\u8868\u5728pos\u4f4d\u7f6e\u4e4b\u540e\u63d2\u5165x\n// \u5206\u6790\u601d\u8003\u4e3a\u4ec0\u4e48\u4e0d\u5728pos\u4f4d\u7f6e\u4e4b\u524d\u63d2\u5165\uff1f\nvoid SListInsertAfter(SListNode* pos, SLTDateType x);\n// \u5355\u94fe\u8868\u5220\u9664pos\u4f4d\u7f6e\u4e4b\u540e\u7684\u503c\n// \u5206\u6790\u601d\u8003\u4e3a\u4ec0\u4e48\u4e0d\u5220\u9664pos\u4f4d\u7f6e\uff1f\nvoid SListEraseAfter(SListNode* pos);\n// \u5355\u94fe\u8868\u7684\u9500\u6bc1\nvoid SListDestroy(SListNode** pplist);\n</code></pre>"},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#23","title":"2.3 \u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include\"SListNode.h\"\nSListNode* BuySListNode(SLTDateType x) {\n    SListNode* newnode = (SListNode*)malloc(sizeof(SListNode));\n    if (newnode == nullptr) {\n        printf(\"molloc fail\\n\");\n        exit(-1);\n    }\n    newnode-&gt;data = x;\n    newnode-&gt;next = nullptr;\n    return newnode;\n}\n\nvoid SListPrint(SListNode* plist) {\n    SListNode* cur = plist;\n    while (cur != nullptr) {\n        printf(\"%d-&gt;\", cur-&gt;data);\n        cur = cur-&gt;next;\n    }\n    printf(\"NULL\\n\");\n}\n\n\nvoid SListPushBack(SListNode** pplist, SLTDateType x) {\n    SListNode* newnode = BuySListNode(x);\n    if (*pplist == nullptr) *pplist = newnode;\n    else {\n        SListNode* tail = *pplist;\n        while (tail-&gt;next) tail = tail-&gt;next;\n        tail-&gt;next = newnode;\n    }\n}\n\nvoid SListPushFront(SListNode** pplist, SLTDateType x) {\n    SListNode* newnode = BuySListNode(x);\n    newnode-&gt;next = *pplist;\n    *pplist = newnode;\n}\n\nvoid SListPopBack(SListNode** pplist) {\n    assert(*pplist);\n    if ((*pplist)-&gt;next == nullptr) {\n        free(*pplist);\n        *pplist = nullptr;\n    }\n    else {\n        SListNode* tail = *pplist;\n        while (tail-&gt;next-&gt;next) tail = tail-&gt;next;\n        free(tail-&gt;next);\n        tail-&gt;next = nullptr;\n    }\n}\n\nvoid SListPopFront(SListNode** pplist) {\n    assert(*pplist);\n    SListNode* next = (*pplist)-&gt;next;\n    free(*pplist);\n    *pplist = next;\n}\n\nSListNode* SListFind(SListNode* plist, SLTDateType x) {\n    SListNode* cur = plist;\n    while (cur &amp;&amp; cur-&gt;data != x) cur = cur-&gt;next;\n    if (cur &amp;&amp; cur-&gt;data == x)return cur;\n    return nullptr;\n}\n\n\nvoid SListInsertAfter(SListNode* pos, SLTDateType x) {\n    assert(pos);\n    SListNode* newnode = BuySListNode(x);\n    newnode-&gt;next = pos-&gt;next;\n    pos-&gt;next = newnode;\n}\n\n\nvoid SListEraseAfter(SListNode* pos) {\n    assert(pos &amp;&amp; pos-&gt;next);\n    SListNode* nextNode = pos-&gt;next;\n    pos-&gt;next = nextNode-&gt;next;\n    free(nextNode);\n}\n\nvoid SListDestroy(SListNode** pplist) {\n    SListNode* cur = *pplist;\n    while (cur) {\n        SListNode* next = cur-&gt;next;\n        free(cur);\n        cur = next;\n    }\n    *pplist=nullptr;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#24","title":"2.4 \u6570\u7ec4\u76f8\u5173\u9762\u8bd5\u9898","text":"<ol> <li>\u539f\u5730\u79fb\u9664\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u5143\u7d20val\uff0c\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\u3002OJ\u94fe\u63a5</li> </ol> <pre><code>int removeElement(int* nums, int numsSize, int val){\n    int left = 0;\n    for (int right = 0; right &lt; numsSize; ++right)\n    {\n        if (nums[right] != val)\n        {\n            nums[left] = nums[right];\n            left++;\n        }\n    }\n    return left;\n}\n</code></pre> <ol> <li>\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879\u3002OJ\u94fe\u63a5</li> </ol> <pre><code>class Solution {\npublic:\n    int removeDuplicates(vector&lt;int&gt;&amp; nums) {\n        int dst = 1, src = 1;\n        while(dst &lt; nums.size()){\n           if(nums[dst] == nums[dst-1]){\n               while(dst &lt; nums.size() &amp;&amp; nums[dst] == nums[dst-1]){\n                   dst++;\n               }\n            }\n            if(dst == nums.size()) ;\n            else nums[src++]=nums[dst++];\n        }\n        return src;\n    }\n};\n</code></pre> <ol> <li>\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002OJ\u94fe\u63a5</li> </ol> <pre><code>class Solution {\npublic:\n    void merge(vector&lt;int&gt;&amp; nums1, int m, vector&lt;int&gt;&amp; nums2, int n) {\n        int a[m + n];\n        int index1 = 0,index2 = 0, k = 0;\n        while(index1 &lt; m &amp;&amp; index2 &lt; n){\n            if(nums1[index1] &lt; nums2[index2]){\n                a[k++] = nums1[index1++];\n            }\n            else{\n                a[k++] = nums2[index2++];\n            }\n        }\n        while(index1 &lt; m) a[k++] = nums1[index1++];\n        while(index2 &lt; n) a[k++] = nums2[index2++];\n        for(int i = 0;i &lt; m + n; ++i) nums1[i] = a[i]; \n    }\n};\n</code></pre> <ol> <li>\u65cb\u8f6c\u6570\u7ec4\u3002OJ\u94fe\u63a5</li> </ol> <pre><code>class Solution {\npublic:\n    void rotate(vector&lt;int&gt;&amp; nums, int k) {\n       int n=nums.size();\n        vector&lt;int&gt; newarr(n);\n        for(int i=0;i&lt;n;++i)\n        {\n            newarr[(i+k)%n]=nums[i];\n        }\n        nums.assign(newarr.begin(),newarr.end());\n    }\n};\n</code></pre> <ol> <li>\u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5\u3002OJ\u94fe\u63a5</li> </ol> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; addToArrayForm(vector&lt;int&gt;&amp; num, int k) {\n        size_t index = 0;\n        vector&lt;int&gt; v;\n        while (k) {\n            v.push_back(k % 10);\n            k /= 10;\n            index++;\n        }\n        reverse(num.begin(), num.end());\n        int Max = max(index, num.size()) + 1;\n        while (num.size() &lt; Max)num.push_back(0);\n        while (v.size() &lt; Max)v.push_back(0);\n        vector&lt;int&gt; ans(Max + 1);\n        for (int i = 0; i &lt; Max; ++i) {\n            ans[i] += num[i] + v[i];\n            ans[i + 1] = ans[i] / 10;\n            ans[i] %= 10;\n        }\n        while (ans[ans.size() - 1] == 0 &amp;&amp; ans.size() != 1) ans.pop_back();\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#25","title":"2.5 \u987a\u5e8f\u8868\u7684\u95ee\u9898\u53ca\u601d\u8003","text":"<p>\u95ee\u9898\uff1a</p> <ol> <li> <p>\u4e2d\u95f4/\u5934\u90e8\u7684\u63d2\u5165\u5220\u9664\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)</p> </li> <li> <p>\u589e\u5bb9\u9700\u8981\u7533\u8bf7\u65b0\u7a7a\u95f4\uff0c\u62f7\u8d1d\u6570\u636e\uff0c\u91ca\u653e\u65e7\u7a7a\u95f4\u3002\u4f1a\u6709\u4e0d\u5c0f\u7684\u6d88\u8017\u3002</p> </li> <li> <p>\u589e\u5bb9\u4e00\u822c\u662f\u54482\u500d\u7684\u589e\u957f\uff0c\u52bf\u5fc5\u4f1a\u6709\u4e00\u5b9a\u7684\u7a7a\u95f4\u6d6a\u8d39\u3002\u4f8b\u5982\u5f53\u524d\u5bb9\u91cf\u4e3a100\uff0c\u6ee1\u4e86\u4ee5\u540e\u589e\u5bb9\u5230200\uff0c \u6211\u4eec\u518d\u7ee7\u7eed\u63d2\u5165\u4e865\u4e2a\u6570\u636e\uff0c\u540e\u9762\u6ca1\u6709\u6570\u636e\u63d2\u5165\u4e86\uff0c\u90a3\u4e48\u5c31\u6d6a\u8d39\u4e8695\u4e2a\u6570\u636e\u7a7a\u95f4\u3002</p> </li> </ol> <p>\u601d\u8003\uff1a</p> <p>\u5982\u4f55\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898\u5462\uff1f\u4e0b\u9762\u7ed9\u51fa\u4e86\u94fe\u8868\u7684\u7ed3\u6784\u6765\u770b\u770b\u3002</p>"},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#3","title":"3. \u94fe\u8868","text":""},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#31","title":"3.1 \u94fe\u8868\u7684\u6982\u5ff5\u53ca\u7ed3\u6784","text":"<p>\u6982\u5ff5\uff1a\u94fe\u8868\u662f\u4e00\u79cd\u7269\u7406\u5b58\u50a8\u7ed3\u6784\u4e0a\u975e\u8fde\u7eed\u3001\u975e\u987a\u5e8f\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u6570\u636e\u5143\u7d20\u7684\u903b\u8f91\u987a\u5e8f\u662f\u901a\u8fc7\u94fe\u8868\u4e2d\u7684\u6307\u9488\u94fe \u63a5\u6b21\u5e8f\u5b9e\u73b0\u7684 \u3002</p> <p>\u5b9e\u9645\u4e2d\u94fe\u8868\u7684\u7ed3\u6784\u975e\u5e38\u591a\u6837\uff0c\u4ee5\u4e0b\u60c5\u51b5\u7ec4\u5408\u8d77\u6765\u5c31\u67098\u79cd\u94fe\u8868\u7ed3\u6784\uff1a</p> <ol> <li> <p>\u5355\u5411\u3001\u53cc\u5411</p> </li> <li> <p>\u5e26\u5934\u3001\u4e0d\u5e26\u5934</p> </li> <li> <p>\u5faa\u73af\u3001\u975e\u5faa\u73af </p> </li> <li> <p>\u65e0\u5934\u5355\u5411\u975e\u5faa\u73af\u94fe\u8868\uff1a\u7ed3\u6784\u7b80\u5355\uff0c\u4e00\u822c\u4e0d\u4f1a\u5355\u72ec\u7528\u6765\u5b58\u6570\u636e\u3002\u5b9e\u9645\u4e2d\u66f4\u591a\u662f\u4f5c\u4e3a\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u7684\u5b50\u7ed3 \u6784\uff0c\u5982\u54c8\u5e0c\u6876\u3001\u56fe\u7684\u90bb\u63a5\u8868\u7b49\u7b49\u3002\u53e6\u5916\u8fd9\u79cd\u7ed3\u6784\u5728\u7b14\u8bd5\u9762\u8bd5\u4e2d\u51fa\u73b0\u5f88\u591a\u3002</p> </li> <li> <p>\u5e26\u5934\u53cc\u5411\u5faa\u73af\u94fe\u8868\uff1a\u7ed3\u6784\u6700\u590d\u6742\uff0c\u4e00\u822c\u7528\u5728\u5355\u72ec\u5b58\u50a8\u6570\u636e\u3002\u5b9e\u9645\u4e2d\u4f7f\u7528\u7684\u94fe\u8868\u6570\u636e\u7ed3\u6784\uff0c\u90fd\u662f\u5e26\u5934\u53cc\u5411 \u5faa\u73af\u94fe\u8868\u3002\u53e6\u5916\u8fd9\u4e2a\u7ed3\u6784\u867d\u7136\u7ed3\u6784\u590d\u6742\uff0c\u4f46\u662f\u4f7f\u7528\u4ee3\u7801\u5b9e\u73b0\u4ee5\u540e\u4f1a\u53d1\u73b0\u7ed3\u6784\u4f1a\u5e26\u6765\u5f88\u591a\u4f18\u52bf\uff0c\u5b9e\u73b0\u53cd\u800c \u7b80\u5355\u4e86\uff0c\u540e\u9762\u6211\u4eec\u4ee3\u7801\u5b9e\u73b0\u4e86\u5c31\u77e5\u9053\u4e86\u3002</p> </li> </ol>"},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#32","title":"3.2 \u94fe\u8868\u7684\u5b9e\u73b0","text":"<pre><code>typedef int SLTDateType;\ntypedef struct SListNode\n{\n    SLTDateType data;\n    struct SListNode* next;\n}SListNode;\n\n// \u52a8\u6001\u7533\u8bf7\u4e00\u4e2a\u8282\u70b9\nSListNode* BuySListNode(SLTDateType x);\n// \u5355\u94fe\u8868\u6253\u5370\nvoid SListPrint(SListNode* plist);\n// \u5355\u94fe\u8868\u5c3e\u63d2\nvoid SListPushBack(SListNode** pplist, SLTDateType x);\n// \u5355\u94fe\u8868\u7684\u5934\u63d2\nvoid SListPushFront(SListNode** pplist, SLTDateType x);\n// \u5355\u94fe\u8868\u7684\u5c3e\u5220\nvoid SListPopBack(SListNode** pplist);\n// \u5355\u94fe\u8868\u5934\u5220\nvoid SListPopFront(SListNode** pplist);\n// \u5355\u94fe\u8868\u67e5\u627e\nSListNode* SListFind(SListNode* plist, SLTDateType x);\n// \u5355\u94fe\u8868\u5728pos\u4f4d\u7f6e\u4e4b\u540e\u63d2\u5165x\n// \u5206\u6790\u601d\u8003\u4e3a\u4ec0\u4e48\u4e0d\u5728pos\u4f4d\u7f6e\u4e4b\u524d\u63d2\u5165\uff1f\nvoid SListInsertAfter(SListNode* pos, SLTDateType x);\n// \u5355\u94fe\u8868\u5220\u9664pos\u4f4d\u7f6e\u4e4b\u540e\u7684\u503c\n// \u5206\u6790\u601d\u8003\u4e3a\u4ec0\u4e48\u4e0d\u5220\u9664pos\u4f4d\u7f6e\uff1f\nvoid SListEraseAfter(SListNode* pos);\n// \u5355\u94fe\u8868\u7684\u9500\u6bc1\nvoid SListDestroy(SList* plist);\n</code></pre>"},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#33","title":"3.3 \u94fe\u8868\u7684\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include \"SList.h\"\n\nSListNode* BuySListNode(SLTDateType x)\n{\n    SListNode* node = (SListNode*)malloc(sizeof(SListNode));\n    node-&gt;data = x;\n    node-&gt;next = NULL;\n\n    return node;\n}\n\nvoid SListPrint(SListNode* plist)\n{\n    SListNode* cur = plist;\n    while (cur)\n    //while (cur != NULL)\n    {\n        printf(\"%d-&gt;\", cur-&gt;data);\n        cur = cur-&gt;next;\n    }\n    printf(\"NULL\\n\");\n}\n\nvoid SListPushBack(SListNode** pplist, SLTDateType x)\n{\n    SListNode* newnode = BuySListNode(x);\n    if (*pplist == NULL)\n    {\n        *pplist = newnode;\n    }\n    else\n    {\n        SListNode* tail = *pplist;\n        while (tail-&gt;next != NULL)\n        {\n            tail = tail-&gt;next;\n        }\n\n        tail-&gt;next = newnode;\n    }\n}\n\nvoid SListPopBack(SListNode** pplist)\n{\n    SListNode* prev = NULL;\n    SListNode* tail = *pplist;\n    // 1.\u7a7a\u3001\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\n    // 2.\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u8282\u70b9\n    if (tail == NULL || tail-&gt;next == NULL)\n    {\n        free(tail);\n        *pplist = NULL;\n    }\n    else\n    {\n        while (tail-&gt;next)\n        {\n            prev = tail;\n            tail = tail-&gt;next;\n        }\n\n        free(tail);\n        tail = NULL;\n\n        prev-&gt;next = NULL;\n    }\n}\n\n\nvoid SListPushFront(SListNode** pplist, SLTDateType x)\n{\n    assert(pplist);\n\n    // 1.\u7a7a\n    // 2.\u975e\u7a7a\n    SListNode* newnode = BuySListNode(x);\n    if (*pplist == NULL)\n    {\n        *pplist = newnode;\n    }\n    else\n    {\n        newnode-&gt;next = *pplist;\n        *pplist = newnode;\n    }\n}\n\nvoid SListPopFront(SListNode** pplist)\n{\n    // 1.\u7a7a\n    // 2.\u4e00\u4e2a\n    // 3.\u4e24\u4e2a\u53ca\u4ee5\u4e0a\n    SListNode* first = *pplist;\n    if (first == NULL)\n    {\n        return;\n    }\n    else if (first-&gt;next == NULL)\n    {\n        free(first);\n        *pplist = NULL;\n    }\n    else\n    {\n        SListNode* next = first-&gt;next;\n        free(first);\n        *pplist = next;\n    }\n}\n\nSListNode* SListFind(SListNode* plist, SLTDateType x)\n{\n    SListNode* cur = plist;\n    while (cur)\n    {\n        if (cur-&gt;data == x)\n            return cur;\n\n        cur = cur-&gt;next;\n    }\n\n    return NULL;\n}\n\nvoid SListInsertAfter(SListNode* pos, SLTDateType x)\n{\n    assert(pos);\n    SListNode* next = pos-&gt;next;\n    // pos newnode next\n    SListNode* newnode = BuySListNode(x);\n    pos-&gt;next = newnode;\n    newnode-&gt;next = next;\n}\n\nvoid SListEraseAfter(SListNode* pos)\n{\n    assert(pos);\n    // pos next nextnext\n    SListNode* next = pos-&gt;next;\n\n    if (next != NULL)\n    {\n        SListNode* nextnext = next-&gt;next;\n        free(next);\n        pos-&gt;next = nextnext;\n    }\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#34","title":"3.4 \u94fe\u8868\u9762\u8bd5\u9898","text":"<p>1.\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c\u00a0val\u00a0\u7684\u6240\u6709\u8282\u70b9\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        ListNode* newHead, * newTail;\n        newHead = newTail = (ListNode*)malloc(sizeof(ListNode));\n        ListNode* cur = head;\n        bool flag = true, one = true;\n        while (cur) {\n            if (cur-&gt;val != val) {\n                flag = false;\n                if (!one) {\n                    newTail-&gt;next = cur;\n                    newTail = newTail-&gt;next;\n                }\n                if (one) newHead = newTail = cur, one = false;\n            }\n            cur = cur-&gt;next;\n        }\n        if (newTail) newTail-&gt;next = nullptr;\n        if (flag) return nullptr;\n        return newHead;\n    }\n};\n</code></pre> <p>2.\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if(!head) return nullptr;\n        ListNode* n1, *n2, *n3;\n        n1 = nullptr;\n        n2 = head;\n        n3 = head-&gt;next;  \n        while(n2){\n            n2-&gt;next = n1;\n            n1 = n2;\n            n2 = n3;\n            if(n3) n3 = n3-&gt;next;\n        }\n        return n1;\n    }\n};\n</code></pre> <p>3.\u7ed9\u5b9a\u4e00\u4e2a\u5e26\u6709\u5934\u7ed3\u70b9 head \u7684\u975e\u7a7a\u5355\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\u3002\u5982\u679c\u6709\u4e24\u4e2a\u4e2d\u95f4\u7ed3\u70b9\uff0c\u5219\u8fd4\u56de\u7b2c\u4e8c\u4e2a \u4e2d\u95f4\u7ed3\u70b9\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* middleNode(ListNode* head) {\n        ListNode* slow, *fast;\n        slow = fast = head;\n        while(fast &amp;&amp; fast-&gt;next){\n            slow = slow-&gt;next;\n            fast = fast-&gt;next-&gt;next;\n        }\n        return slow;\n    }\n};\n</code></pre> <p>4.\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) {\n        if(!pListHead) return nullptr;\n        ListNode* slow, *fast;\n        slow = fast = pListHead;\n        for (int i = 1; i &lt;= k; ++i) {\n            if (!fast) return nullptr;\n            fast = fast-&gt;next;\n        }\n        while(fast) slow = slow-&gt;next,fast = fast-&gt;next;\n        return slow;\n    }\n};\n</code></pre> <p>5.\u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210 \u7684\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* guard, *tail;\n        guard = tail = (ListNode*)malloc(sizeof(ListNode));\n        while (list1 &amp;&amp; list2){\n            if (list1-&gt;val &lt; list2-&gt;val){\n                tail-&gt;next = list1;\n                list1 = list1-&gt;next; \n                tail = tail-&gt;next;\n            }else{\n                tail-&gt;next = list2;\n                list2 = list2-&gt;next; \n                tail = tail-&gt;next;\n            }\n        }\n        while (list1){\n            tail-&gt;next = list1;\n            list1 = list1-&gt;next; \n            tail = tail-&gt;next;\n        }\n        while (list2){\n            tail-&gt;next = list2;\n            list2 = list2-&gt;next;\n            tail = tail-&gt;next;\n        }\n        tail-&gt;next = nullptr;\n        ListNode* head = guard-&gt;next;\n        free(guard);\n        return head;\n    }\n};\n</code></pre> <p>6.\u7f16\u5199\u4ee3\u7801\uff0c\u4ee5\u7ed9\u5b9a\u503cx\u4e3a\u57fa\u51c6\u5c06\u94fe\u8868\u5206\u5272\u6210\u4e24\u90e8\u5206\uff0c\u6240\u6709\u5c0f\u4e8ex\u7684\u7ed3\u70b9\u6392\u5728\u5927\u4e8e\u6216\u7b49\u4e8ex\u7684\u7ed3\u70b9\u4e4b\u524d \u3002OJ\u94fe\u63a5</p> <pre><code>class Partition {\npublic:\n    ListNode* partition(ListNode* pHead, int x) {\n        ListNode* guard1, *tail1, *guard2, *tail2;\n        guard1 = tail1 = (ListNode*)malloc(sizeof(ListNode));\n        guard2 = tail2 = (ListNode*)malloc(sizeof(ListNode));\n        while (pHead){\n            if (pHead-&gt;val &lt; x){\n                tail1-&gt;next = pHead;\n                tail1 = tail1-&gt;next;\n            }else{\n                tail2-&gt;next = pHead;\n                tail2 = tail2-&gt;next;\n            }\n            pHead = pHead-&gt;next;\n        }\n        tail1-&gt;next = guard2-&gt;next;\n        tail2-&gt;next = nullptr;\n        pHead = guard1-&gt;next;\n        free(guard1);\n        free(guard2);\n        return pHead;\n    }\n};\n</code></pre> <p>7.\u94fe\u8868\u7684\u56de\u6587\u7ed3\u6784\u3002OJ\u94fe\u63a5</p> <pre><code>ListNode* middleNode(ListNode* head) {\n    ListNode* slow, *fast;\n    slow = fast = head;\n    while (fast &amp;&amp; fast-&gt;next) {\n        slow = slow-&gt;next;\n        fast = fast-&gt;next-&gt;next;\n    }\n    return slow;\n}\n\nListNode* reverseList(ListNode* head) {\n    if (!head) return nullptr;\n    ListNode* n1, *n2, *n3;\n    n1 = nullptr;\n    n2 = head;\n    n3 = head-&gt;next;\n    while (n2) {\n        n2-&gt;next = n1;\n        n1 = n2;\n        n2 = n3;\n        if (n3) n3 = n3-&gt;next;\n    }\n    return n1;\n}\nclass PalindromeList {\npublic:\n    bool chkPalindrome(ListNode* A) {\n        if (!A) return true;\n        ListNode* head1 = A, *mid = middleNode(A), *head2;\n        head2 = reverseList(mid);\n        while (head1-&gt;next &amp;&amp; head2-&gt;next){\n            if(head1-&gt;val != head2-&gt;val) return false;\n            head1 = head1-&gt;next;\n            head2 = head2-&gt;next;\n        }\n        return true;\n    }\n};\n</code></pre> <p>8.\u8f93\u5165\u4e24\u4e2a\u94fe\u8868\uff0c\u627e\u51fa\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode* curA = headA, *curB = headB;\n        int stepA = 0, stepB = 0;\n        while (curA) stepA++, curA = curA-&gt;next;\n        while (curB) stepB++, curB = curB-&gt;next;\n        if (stepA &lt; stepB) for (int i = 1; i &lt;= abs(stepA - stepB); ++i) headB = headB-&gt;next;\n        else for (int i = 1; i &lt;= abs(stepA - stepB); ++i) headA = headA-&gt;next;\n        while (headA){\n            if(headA == headB) return headA;\n            headA = headA-&gt;next;\n            headB = headB-&gt;next;\n        }\n        return nullptr;\n    }\n};\n</code></pre> <p>9.\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode *slow, *fast;\n        slow = fast = head;\n        while(fast  &amp;&amp; fast-&gt;next){\n            slow = slow-&gt;next;\n            fast = fast-&gt;next-&gt;next;\n            if(slow == fast) return true;\n        }\n        return false;\n    }\n};\n</code></pre> <p>10.\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002\u00a0\u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de\u00a0NULLOJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode *slow, *fast;\n        slow = fast = head;\n        while(fast &amp;&amp; fast-&gt;next){\n            slow = slow-&gt;next;\n            fast = fast-&gt;next-&gt;next;\n            if(slow == fast){\n                ListNode *meet = slow; \n                while(true){\n                    if(meet == head) return meet;\n                    meet = meet-&gt;next;\n                    head = head-&gt;next;\n                }\n            }\n        }\n        return nullptr;\n    }\n};\n</code></pre> <p>11.\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u989d\u5916\u589e\u52a0\u7684\u968f\u673a\u6307\u9488\uff0c\u8be5\u6307\u9488\u53ef\u4ee5\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u6216\u7a7a\u8282\u70b9\u3002 \u8981\u6c42\u8fd4\u56de\u8fd9\u4e2a\u94fe\u8868\u7684\u6df1\u5ea6\u62f7\u8d1d\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        Node* cur = head;\n        while (cur){\n            Node* next = cur-&gt;next;\n            Node* copy = (Node*)malloc(sizeof(Node));\n            cur-&gt;next = copy;\n            copy-&gt;val = cur-&gt;val;\n            copy-&gt;next = next;\n            cur = next;\n        }\n        cur = head;\n        while (cur){\n            if (cur-&gt;random) cur-&gt;next-&gt;random = cur-&gt;random-&gt;next;\n            else cur-&gt;next-&gt;random = nullptr;\n            cur = cur-&gt;next-&gt;next;\n        }\n        cur = head;\n        Node* guard ,*copyTail;\n        guard = copyTail = (Node*)malloc(sizeof(Node));\n        while (cur){\n            Node* copy = cur-&gt;next;\n            Node* next = copy-&gt;next;\n            copyTail-&gt;next = copy;\n            copyTail = copyTail-&gt;next;\n            cur-&gt;next = next;\n            cur = next;\n        }\n        copyTail-&gt;next = nullptr;\n        Node* copyHead = guard-&gt;next;\n        free(guard);\n        return copyHead;\n    }\n};\n</code></pre> <p>12.\u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* insertionSortList(ListNode* head) {\n        if (head == nullptr) return head;\n        ListNode* sortHead = head;\n        ListNode* cur = head-&gt;next;\n        head-&gt;next = nullptr;\n        while (cur){\n            ListNode* next = cur-&gt;next;\n            ListNode* prevA = nullptr, *curA = sortHead;\n            while (curA){\n                if (curA-&gt;val &gt; cur-&gt;val) break;\n                else prevA = curA, curA = curA-&gt;next;\n            }\n            if (!prevA) cur-&gt;next = curA, sortHead = cur;\n            else prevA-&gt;next = cur, cur-&gt;next = curA;\n            cur = next;\n        }\n        return sortHead;\n    }\n};\n</code></pre> <p>13.\u5728\u4e00\u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u4e2d\uff0c\u5b58\u5728\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u8bf7\u5220\u9664\u8be5\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u91cd\u590d\u7684\u7ed3\u70b9\u4e0d\u4fdd\u7559\uff0c\u8fd4\u56de\u94fe\u8868\u5934 \u6307\u9488\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* deleteDuplication(ListNode* pHead) {\n        if (pHead == nullptr || pHead-&gt;next == nullptr) return pHead;\n        ListNode* cur = pHead, *next = cur-&gt;next;\n        ListNode* guard, *tail;\n        guard = tail = (ListNode*)malloc(sizeof(ListNode));\n        bool flag = false;\n        while(next){\n            if(cur-&gt;val == next-&gt;val){\n                flag = true;\n                cur-&gt;next = next-&gt;next;\n                free(next);\n                next = cur-&gt;next;\n            }\n            else{\n                if (flag) {\n                    ListNode* del = cur;\n                    cur = cur-&gt;next;\n                    next = next-&gt;next;\n                    free(del);\n                }\n                //\u5982\u679cnext\u4e3a\u7a7anext-&gt;val\u5c31\u4e0d\u80fd\u8bbf\u95ee\uff0c\u4e14cur\u53ef\u4ee5\u5b58\u50a8\n                if (next == nullptr || cur-&gt;val != next-&gt;val){\n                    tail-&gt;next = cur;\n                    tail = tail-&gt;next;\n                    cur = next;\n                    if (next) next = next-&gt;next;\n                    if (!next) tail-&gt;next = cur, tail = tail-&gt;next;\n                //\u6392\u96641,2\u7684\u60c5\u51b5\u53ea\u5b58\u50a8\u4e861,2\u6ca1\u5b58\u50a8\u5c31\u9000\u51fa\u4e86\u3002\n                }\n                flag = false;\n            }\n        }\n        if (tail)tail-&gt;next = nullptr;//\u6392\u9664tail==\u7a7a\u7684\u60c5\u51b5(1,1,2)\n        pHead = guard-&gt;next;\n        free(guard);\n        return pHead;\n    }\n};\n</code></pre>"},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#35","title":"3.5 \u53cc\u5411\u94fe\u8868\u7684\u5b9e\u73b0","text":"<pre><code>#pragma once\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;assert.h&gt;\ntypedef int LTDateType;\ntypedef struct ListNode\n{\n    struct ListNode* next;\n    struct ListNode* prev;\n    LTDateType date;\n}ListNode;\n\nListNode* BuyListNode(LTDateType x);\n\nListNode* InitList();\n\nvoid ListPushBack(ListNode* phead, LTDateType x);\n\nvoid ListPrint(ListNode* phead);\n\nvoid ListPushFront(ListNode* phead, LTDateType x);\n\nvoid ListPopBack(ListNode* phead);\n\nvoid ListPopFront(ListNode* phead);\n\nListNode* ListFind(ListNode* phead, LTDateType x);\n\n//\u524d\u63d2\nvoid ListInert(ListNode* pos, LTDateType x);\n\nvoid ListErase(ListNode* pos);\n\nint ListEmpty(ListNode* phead);\n\nint ListSize(ListNode* phead);\n\nvoid ListDestory(ListNode* phead);\n</code></pre>"},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#36","title":"3.6 \u53cc\u5411\u94fe\u8868\u7684\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include\"List.h\"\nListNode* BuyListNode(LTDateType x)\n{\n    ListNode* node = (ListNode*)malloc(sizeof(ListNode));\n    node-&gt;prev = NULL;\n    node-&gt;next = NULL;\n    node-&gt;date = x;\n    return node;\n}\n\nListNode* InitList()\n{\n    ListNode* phead = BuyListNode(0);\n    phead-&gt;next = phead;\n    phead-&gt;prev = phead;\n    return phead;\n}\n\nvoid ListPushBack(ListNode* phead, LTDateType x)\n{\n    //ListNode* tail = phead-&gt;prev;\n    //ListNode* newnode = BuyListNode(x);\n    //tail-&gt;next = newnode;\n    //newnode-&gt;prev = tail;\n    //phead-&gt;prev = newnode;\n    //newnode-&gt;next = phead;\n    ListInert(phead, x);\n}\n\nvoid ListPrint(ListNode* phead)\n{\n    ListNode* cur = phead-&gt;next;\n    while (cur != phead)\n    {\n        printf(\"%d \", cur-&gt;date);\n        cur = cur-&gt;next;\n    }\n    printf(\"\\n\");\n}\n\n\nvoid ListPushFront(ListNode* phead, LTDateType x)\n{\n    //ListNode* newnode = BuyListNode(x);\n    //ListNode* first = phead-&gt;next;\n    //phead-&gt;next = newnode;\n    //newnode-&gt;prev = phead;\n    //newnode-&gt;next = first;\n    //first-&gt;prev = newnode;\n    ListInert(phead-&gt;next, x);\n}\n\nvoid ListPopBack(ListNode* phead)\n{\n    //assert(phead != phead-&gt;next);\n    //ListNode* tail = phead-&gt;prev;\n    //ListNode* tailPrev = tail-&gt;prev;\n    //free(tail);\n    //phead-&gt;prev = tailPrev;\n    //tailPrev-&gt;next = phead;\n    ListErase(phead-&gt;prev);\n}\n\nvoid ListPopFront(ListNode* phead)\n{\n    //assert(phead != phead-&gt;next);\n    //ListNode* cur = phead-&gt;next;\n    //ListNode* next = cur-&gt;next;\n    //free(cur);\n    //phead-&gt;next = next;\n    //next-&gt;prev = phead;\n    ListErase(phead-&gt;next);\n}\n\nListNode* ListFind(ListNode* phead, LTDateType x)\n{\n    ListNode* cur = phead-&gt;next;\n    while (cur!=phead)\n    {\n        if (cur-&gt;date == x)\n        {\n            return cur;\n        }\n        cur = cur-&gt;next;\n    }\n    return NULL;\n}\n\n//\u63d2\u5165phead\uff0c\u76f8\u5f53\u4e8e\u5c3e\u63d2\nvoid ListInert(ListNode* pos, LTDateType x)\n{\n    ListNode* prev = pos-&gt;prev;\n    ListNode* newnode = BuyListNode(x);\n    prev-&gt;next = newnode;\n    newnode-&gt;prev = prev;\n    newnode-&gt;next = pos;\n    pos-&gt;prev = newnode;\n}\n\nvoid ListErase(ListNode* pos)\n{\n    ListNode* prev = pos-&gt;prev;\n    ListNode* next = pos-&gt;next;\n    free(pos);\n    prev-&gt;next = next;\n    next-&gt;prev = prev;\n}\n\nint ListEmpty(ListNode* phead)\n{\n    //\u662f\u7a7a\u8fd4\u56de1\uff0c\u4e0d\u662f\u7a7a\u8fd4\u56de0,\u65e0C99\n    return phead-&gt;next == phead ? 1 : 0;\n}\n\nint ListSize(ListNode* phead)\n{\n    ListNode* cur = phead-&gt;next;\n    int size = 0;\n    while (cur != phead)\n    {\n        ++size;\n        cur = cur-&gt;next;\n    }\n    printf(\"%d\\n\",size);\n}\n\nvoid ListDestory(ListNode* phead)\n{\n    ListNode* cur = phead-&gt;next;\n    while (cur != phead)\n    {\n        ListNode* next = cur-&gt;next;\n        free(cur);\n        cur = next;\n    }\n    free(phead);\n    phead = NULL;\n}\n</code></pre>"},{"location":"C-C%2B%2B/%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#37","title":"3.7 \u987a\u5e8f\u8868\u548c\u94fe\u8868\u7684\u533a\u522b\u548c\u8054\u7cfb","text":"<p>\u987a\u5e8f\u8868\uff1a</p> <p>\u4f18\u70b9\uff1a\u7a7a\u95f4\u8fde\u7eed\u3001\u652f\u6301\u968f\u673a\u8bbf\u95ee</p> <p>\u7f3a\u70b9\uff1a1.\u4e2d\u95f4\u6216\u524d\u9762\u90e8\u5206\u7684\u63d2\u5165\u5220\u9664\u65f6\u95f4\u590d\u6742\u5ea6O(N) 2.\u589e\u5bb9\u7684\u4ee3\u4ef7\u6bd4\u8f83\u5927\u3002</p> <p>\u94fe\u8868\uff1a</p> <p>\u7f3a\u70b9\uff1a\u4ee5\u8282\u70b9\u4e3a\u5355\u4f4d\u5b58\u50a8\uff0c\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee</p> <p>\u4f18\u70b9\uff1a1.\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5220\u9664\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1) 2.\u6ca1\u6709\u589e\u5bb9\u95ee\u9898\uff0c\u63d2\u5165\u4e00\u4e2a\u5f00\u8f9f\u4e00\u4e2a\u7a7a\u95f4\u3002</p>"},{"location":"Linux/Inter-process%20communication/","title":"\u8fdb\u7a0b\u95f4\u901a\u4fe1","text":""},{"location":"Linux/Network%20Fundamentals1/","title":"\u7f51\u7edc\u57fa\u7840(\u4e00)","text":""},{"location":"Linux/Network%20Fundamentals1/#_2","title":"\u8ba1\u7b97\u673a\u7f51\u7edc\u80cc\u666f","text":"<p>\u72ec\u7acb\u6a21\u5f0f: \u8ba1\u7b97\u673a\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb;</p> <p>\u7f51\u7edc\u4e92\u8054: \u591a\u53f0\u8ba1\u7b97\u673a\u8fde\u63a5\u5728\u4e00\u8d77, \u5b8c\u6210\u6570\u636e\u5171\u4eab;</p> <p>\u5c40\u57df\u7f51LAN: \u8ba1\u7b97\u673a\u6570\u91cf\u66f4\u591a\u4e86, \u901a\u8fc7\u4ea4\u6362\u673a\u548c\u8def\u7531\u5668\u94fe\u63a5\u5728\u4e00\u8d77;</p> <p>\u5e7f\u57df\u7f51WAN: \u5c06\u8fdc\u9694\u5343\u91cc\u7684\u8ba1\u7b97\u673a\u90fd\u8fde\u5728\u4e00\u8d77;</p> <p>\u6240\u8c13 \"\u5c40\u57df\u7f51\" \u548c \"\u5e7f\u57df\u7f51\" \u53ea\u662f\u4e00\u4e2a\u76f8\u5bf9\u7684\u6982\u5ff5;</p> <p>\u5e7f\u57df\u7f51, \u6709\u65f6\u4e5f\u53ef\u4ee5\u770b\u505a\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u5c40\u57df\u7f51;</p>"},{"location":"Linux/Network%20Fundamentals1/#_3","title":"\u534f\u8bae","text":"<ol> <li>\u64cd\u4f5c\u7cfb\u7edf\u8981\u8fdb\u884c\u534f\u8bae\u7ba1\u7406 -- \u5148\u63cf\u8ff0\uff0c\u5728\u7ec4\u7ec7</li> <li>\u534f\u8bae\u672c\u8d28\u5c31\u662f\u8f6f\u4ef6, \u8f6f\u4ef6\u662f\u53ef\u4ee5\"\u5206\u5c42\"</li> <li>\u534f\u8bae\u5728\u8bbe\u8ba1\u7684\u65f6\u5019, \u5c31\u662f\u88ab\u5c42\u72b6\u5212\u5206\u7684</li> <li>\u4e3a\u4ec0\u4e48\u8981\u5212\u5206\u6210\u5c42\u72b6\u7ed3\u6784\u5462? a.\u573a\u666f\u590d\u6742 b.\u529f\u80fd\u89e3\u8026,\u4fbf\u4e8e\u4eba\u4eec\u8fdb\u884c\u5404\u79cd\u7ef4\u62a4</li> </ol> <p>\u901a\u4fe1\u7684\u590d\u6742, \u672c\u8d28\u662f\u548c\u8ddd\u79bb\u6210\u6b63\u76f8\u5173.</p> <p>\u590d\u6742\u4f53\u73b0\u5728\u54ea\u91cc? -- \u534f\u8bae\u6808\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5417?</p> <p>\u5e94\u7528\u8303\u7574:</p> <ol> <li>\u5982\u4f55\u5904\u7406\u6570\u636e  --- \u5e94\u7528\u5c42 (\u7cfb\u7edf\u8c03\u7528)</li> </ol> <p>\u901a\u4fe1\u8303\u7574:</p> <ol> <li>\u4e22\u5305  --- \u4f20\u8f93\u5c42(\u64cd\u4f5c\u7cfb\u7edf)</li> <li>\u5b9a\u4f4d\u95ee\u9898 --- \u7f51\u7edc\u5c42(\u64cd\u4f5c\u7cfb\u7edf)</li> <li>\u89e3\u51b3\u4e0b\u4e00\u8df3\u4e3b\u673a\u7684\u95ee\u9898 --- \u6570\u636e\u94fe\u8def\u5c42(\u9a71\u52a8)\u3001\u7269\u7406\u5c42(\u786c\u4ef6)</li> </ol> <p>0-3\uff1aTCP/IP\u534f\u8bae</p> <p>\u5c40\u57df\u7f51\u4e2d\u4e24\u53f0\u4e3b\u673a\u662f\u53ef\u4ee5\u76f4\u63a5\u901a\u4fe1\u7684</p> <p>\u6bcf\u5c42\u90fd\u6709\u81ea\u5df1\u7684\u534f\u8bae\u5b9a\u5236\u65b9\u6848</p> <p>\u6bcf\u5c42\u90fd\u8981\u6709\u81ea\u5df1\u7684\u534f\u8bae\u62a5\u5934</p> <p>\u4ece\u4e0a\u5230\u4e0b\u4ea4\u4ed8\u6570\u636e\u7684\u65f6\u5019,\u8981\u6dfb\u52a0\u62a5\u5934</p> <p>\u4ece\u4e0b\u5230\u4e0a\u9012\u4ea4\u6570\u636e\u7684\u65f6\u5019,\u8981\u53bb\u6389\u62a5\u5934</p> <p>\u62a5\u5934\u7c7b\u4f3c\u6211\u4eec\u53d6\u5feb\u9012\u7684\u5feb\u9012\u5355</p> <p>\u5c01\u88c5:\u81ea\u9876\u5411\u4e0b\u6dfb\u52a0\u62a5\u5934\u7684\u8fc7\u7a0b</p> <p>\u89e3\u5305:\u81ea\u5e95\u5411\u4e0a\u53bb\u6389\u62a5\u5934,\u5c55\u5f00\u5206\u6790</p> <p>\u5c40\u57df\u7f51\u4e2d\u8868\u793a\u4e3b\u673a\u7684\u552f\u4e00\u6027: MAC\u5730\u5740</p> <p>mac\u5730\u5740\u548cip\u5730\u5740\u7684\u533a\u522b:</p> <p>\u7c7b\u4f3cA-&gt;Z(\u6e90IP-&gt;\u76ee\u6807IP), \u5f53\u4f60\u5728C\u7684\u65f6\u5019,\u4e0b\u4e00\u7ad9\u662fD(\u6e90Mac\u5730\u5740-&gt;\u4e0b\u4e00\u7ad9Mac\u5730\u5740)</p> <p>\u603b\u7ed3:\u5728\u4f7f\u7528tcp/ip\u534f\u8bae\u7684\u7f51\u7edc\u4e2d,IP\u53ca\u5176\u5411\u4e0a\u7684\u534f\u8bae,\u770b\u5230\u7684\u62a5\u6587\u90fd\u662f\u4e00\u6837\u7684.</p>"},{"location":"Linux/Network%20Fundamentals1/#osi","title":"OSI\u4e03\u5c42\u6a21\u578b","text":"<ul> <li>OSI\uff08Open\u00a0System\u00a0Interconnection\uff0c\u5f00\u653e\u7cfb\u7edf\u4e92\u8fde\uff09\u4e03\u5c42\u7f51\u7edc\u6a21\u578b\u79f0\u4e3a\u5f00\u653e\u5f0f\u7cfb\u7edf\u4e92\u8054\u53c2\u8003\u6a21\u578b\uff0c \u662f\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684\u5b9a\u4e49\u548c\u89c4\u8303;</li> <li>\u628a\u7f51\u7edc\u4ece\u903b\u8f91\u4e0a\u5206\u4e3a\u4e867\u5c42. \u6bcf\u4e00\u5c42\u90fd\u6709\u76f8\u5173\u3001\u76f8\u5bf9\u5e94\u7684\u7269\u7406\u8bbe\u5907\uff0c\u6bd4\u5982\u8def\u7531\u5668\uff0c\u4ea4\u6362\u673a;</li> <li>OSI\u00a0\u4e03\u5c42\u6a21\u578b\u662f\u4e00\u79cd\u6846\u67b6\u6027\u7684\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u5176\u6700\u4e3b\u8981\u7684\u529f\u80fd\u4f7f\u5c31\u662f\u5e2e\u52a9\u4e0d\u540c\u7c7b\u578b\u7684\u4e3b\u673a\u5b9e\u73b0\u6570\u636e\u4f20\u8f93; </li> <li>\u5b83\u7684\u6700\u5927\u4f18\u70b9\u662f\u5c06\u670d\u52a1\u3001\u63a5\u53e3\u548c\u534f\u8bae\u8fd9\u4e09\u4e2a\u6982\u5ff5\u660e\u786e\u5730\u533a\u5206\u5f00\u6765\uff0c\u6982\u5ff5\u6e05\u695a\uff0c\u7406\u8bba\u4e5f\u6bd4\u8f83\u5b8c\u6574. \u901a\u8fc7\u4e03 \u4e2a\u5c42\u6b21\u5316\u7684\u7ed3\u6784\u6a21\u578b\u4f7f\u4e0d\u540c\u7684\u7cfb\u7edf\u4e0d\u540c\u7684\u7f51\u7edc\u4e4b\u95f4\u5b9e\u73b0\u53ef\u9760\u7684\u901a\u8baf;</li> <li>\u4f46\u662f, \u5b83\u65e2\u590d\u6742\u53c8\u4e0d\u5b9e\u7528; \u6240\u4ee5\u6211\u4eec\u6309\u7167TCP/IP\u56db\u5c42\u6a21\u578b\u6765\u8bb2\u89e3.</li> </ul>"},{"location":"Linux/Network%20Fundamentals1/#tcpip","title":"TCP/IP\u4e94\u5c42(\u6216\u56db\u5c42)\u6a21\u578b","text":"<p>TCP/IP\u662f\u4e00\u7ec4\u534f\u8bae\u7684\u4ee3\u540d\u8bcd\uff0c\u5b83\u8fd8\u5305\u62ec\u8bb8\u591a\u534f\u8bae\uff0c\u7ec4\u6210\u4e86TCP/IP\u534f\u8bae\u7c07.  TCP/IP\u901a\u8baf\u534f\u8bae\u91c7\u7528\u4e865\u5c42\u7684\u5c42\u7ea7\u7ed3\u6784\uff0c\u6bcf\u4e00\u5c42\u90fd\u547c\u53eb\u5b83\u7684\u4e0b\u4e00\u5c42\u6240\u63d0\u4f9b\u7684\u7f51\u7edc\u6765\u5b8c\u6210\u81ea\u5df1\u7684\u9700\u6c42.</p> <ul> <li>\u7269\u7406\u5c42: \u8d1f\u8d23\u5149/\u7535\u4fe1\u53f7\u7684\u4f20\u9012\u65b9\u5f0f. \u6bd4\u5982\u73b0\u5728\u4ee5\u592a\u7f51\u901a\u7528\u7684\u7f51\u7ebf(\u53cc\u7ede \u7ebf)\u3001\u65e9\u671f\u4ee5\u592a\u7f51\u91c7\u7528\u7684\u7684\u540c\u8f74\u7535\u7f06 (\u73b0\u5728\u4e3b\u8981\u7528\u4e8e\u6709\u7ebf\u7535\u89c6)\u3001\u5149\u7ea4, \u73b0\u5728\u7684wifi\u65e0\u7ebf\u7f51\u4f7f\u7528\u7535\u78c1\u6ce2\u7b49\u90fd\u5c5e\u4e8e\u7269\u7406\u5c42\u7684\u6982\u5ff5\u3002\u7269\u7406\u5c42\u7684\u80fd\u529b\u51b3 \u5b9a\u4e86\u6700\u5927\u4f20\u8f93\u901f\u7387\u3001\u4f20\u8f93\u8ddd\u79bb\u3001\u6297\u5e72\u6270\u6027\u7b49. \u96c6\u7ebf\u5668(Hub)\u5de5\u4f5c\u5728\u7269\u7406\u5c42.</li> <li>\u6570\u636e\u94fe\u8def\u5c42: \u8d1f\u8d23\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u5e27\u7684\u4f20\u9001\u548c\u8bc6\u522b. \u4f8b\u5982\u7f51\u5361\u8bbe\u5907\u7684\u9a71\u52a8\u3001\u5e27\u540c\u6b65(\u5c31\u662f\u8bf4\u4ece\u7f51\u7ebf\u4e0a\u68c0\u6d4b \u5230\u4ec0\u4e48\u4fe1\u53f7\u7b97\u4f5c\u65b0\u5e27\u7684\u5f00\u59cb)\u3001\u51b2\u7a81\u68c0\u6d4b(\u5982\u679c\u68c0\u6d4b\u5230\u51b2\u7a81\u5c31\u81ea\u52a8\u91cd\u53d1)\u3001\u6570\u636e\u5dee\u9519\u6821\u9a8c\u7b49\u5de5\u4f5c. \u6709\u4ee5\u592a \u7f51\u3001\u4ee4\u724c\u73af\u7f51, \u65e0\u7ebfLAN\u7b49\u6807\u51c6. \u4ea4\u6362\u673a(Switch)\u5de5\u4f5c\u5728\u6570\u636e\u94fe\u8def\u5c42.</li> <li>\u7f51\u7edc\u5c42: \u8d1f\u8d23\u5730\u5740\u7ba1\u7406\u548c\u8def\u7531\u9009\u62e9. \u4f8b\u5982\u5728IP\u534f\u8bae\u4e2d, \u901a\u8fc7IP\u5730\u5740\u6765\u6807\u8bc6\u4e00\u53f0\u4e3b\u673a, \u5e76\u901a\u8fc7\u8def\u7531\u8868\u7684\u65b9\u5f0f\u89c4 \u5212\u51fa\u4e24\u53f0\u4e3b\u673a\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u7684\u7ebf\u8def(\u8def\u7531). \u8def\u7531\u5668(Router)\u5de5\u4f5c\u5728\u7f51\u8def\u5c42.</li> <li>\u4f20\u8f93\u5c42: \u8d1f\u8d23\u4e24\u53f0\u4e3b\u673a\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93. \u5982\u4f20\u8f93\u63a7\u5236\u534f\u8bae (TCP), \u80fd\u591f\u786e\u4fdd\u6570\u636e\u53ef\u9760\u7684\u4ece\u6e90\u4e3b\u673a\u53d1\u9001\u5230\u76ee\u6807 \u4e3b\u673a.</li> <li>\u5e94\u7528\u5c42: \u8d1f\u8d23\u5e94\u7528\u7a0b\u5e8f\u95f4\u6c9f\u901a\uff0c\u5982\u7b80\u5355\u7535\u5b50\u90ae\u4ef6\u4f20\u8f93\uff08SMTP\uff09\u3001\u6587\u4ef6\u4f20\u8f93\u534f\u8bae\uff08FTP\uff09\u3001\u7f51\u7edc\u8fdc\u7a0b\u8bbf\u95ee \u534f\u8bae\uff08Telnet\uff09\u7b49. \u6211\u4eec\u7684\u7f51\u7edc\u7f16\u7a0b\u4e3b\u8981\u5c31\u662f\u9488\u5bf9\u5e94\u7528\u5c42.</li> </ul> <p>\u7269\u7406\u5c42\u6211\u4eec\u8003\u8651\u7684\u6bd4\u8f83\u5c11. \u56e0\u6b64\u5f88\u591a\u65f6\u5019\u4e5f\u53ef\u4ee5\u79f0\u4e3a TCP/IP\u56db\u5c42\u6a21\u578b.</p> <p>\u4e00\u822c\u800c\u8a00</p> <ul> <li>\u5bf9\u4e8e\u4e00\u53f0\u4e3b\u673a, \u5b83\u7684\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5b9e\u73b0\u4e86\u4ece\u4f20\u8f93\u5c42\u5230\u7269\u7406\u5c42\u7684\u5185\u5bb9;</li> <li>\u5bf9\u4e8e\u4e00\u53f0\u8def\u7531\u5668, \u5b83\u5b9e\u73b0\u4e86\u4ece\u7f51\u7edc\u5c42\u5230\u7269\u7406\u5c42;</li> <li>\u5bf9\u4e8e\u4e00\u53f0\u4ea4\u6362\u673a, \u5b83\u5b9e\u73b0\u4e86\u4ece\u6570\u636e\u94fe\u8def\u5c42\u5230\u7269\u7406\u5c42;</li> <li>\u5bf9\u4e8e\u96c6\u7ebf\u5668, \u5b83\u53ea\u5b9e\u73b0\u4e86\u7269\u7406\u5c42;</li> </ul> <p>\u4f46\u662f\u5e76\u4e0d\u7edd\u5bf9. \u5f88\u591a\u4ea4\u6362\u673a\u4e5f\u5b9e\u73b0\u4e86\u7f51\u7edc\u5c42\u7684\u8f6c\u53d1; \u5f88\u591a\u8def\u7531\u5668\u4e5f\u5b9e\u73b0\u4e86\u90e8\u5206\u4f20\u8f93\u5c42\u7684\u5185\u5bb9(\u6bd4\u5982\u7aef\u53e3\u8f6c\u53d1);</p>"},{"location":"Linux/Network%20Fundamentals1/#_4","title":"\u6570\u636e\u5305\u5c01\u88c5\u548c\u5206\u7528","text":"<ul> <li>\u4e0d\u540c\u7684\u534f\u8bae\u5c42\u5bf9\u6570\u636e\u5305\u6709\u4e0d\u540c\u7684\u79f0\u8c13,\u5728\u4f20\u8f93\u5c42\u53eb\u505a\u6bb5(segment),\u5728\u7f51\u7edc\u5c42\u53eb\u505a\u6570\u636e\u62a5 (datagram),\u5728\u94fe \u8def\u5c42\u53eb\u505a\u5e27(frame).</li> <li>\u5e94\u7528\u5c42\u6570\u636e\u901a\u8fc7\u534f\u8bae\u6808\u53d1\u5230\u7f51\u7edc\u4e0a\u65f6,\u6bcf\u5c42\u534f\u8bae\u90fd\u8981\u52a0\u4e0a\u4e00\u4e2a\u6570\u636e\u9996\u90e8(header),\u79f0\u4e3a\u5c01\u88c5 (Encapsulation). </li> <li>\u9996\u90e8\u4fe1\u606f\u4e2d\u5305\u542b\u4e86\u4e00\u4e9b\u7c7b\u4f3c\u4e8e\u9996\u90e8\u6709\u591a\u957f, \u8f7d\u8377(payload)\u6709\u591a\u957f, \u4e0a\u5c42\u534f\u8bae\u662f\u4ec0\u4e48\u7b49\u4fe1\u606f.</li> <li>\u6570\u636e\u5c01\u88c5\u6210\u5e27\u540e\u53d1\u5230\u4f20\u8f93\u4ecb\u8d28\u4e0a,\u5230\u8fbe\u76ee\u7684\u4e3b\u673a\u540e\u6bcf\u5c42\u534f\u8bae\u518d\u5265\u6389\u76f8\u5e94\u7684\u9996\u90e8, \u6839\u636e\u9996\u90e8\u4e2d\u7684 \"\u4e0a\u5c42\u534f\u8bae \u5b57\u6bb5\" \u5c06\u6570\u636e\u4ea4\u7ed9\u5bf9\u5e94\u7684\u4e0a\u5c42\u534f\u8bae\u5904\u7406</li> </ul>"},{"location":"Linux/Network%20Fundamentals1/#_5","title":"\u7f51\u7edc\u4e2d\u7684\u5730\u5740\u7ba1\u7406","text":"<p>\u8ba4\u8bc6IP\u5730\u5740</p> <p>IP\u534f\u8bae\u6709\u4e24\u4e2a\u7248\u672c, IPv4\u548cIPv6. \u6211\u4eec\u6574\u4e2a\u7684\u8bfe\u7a0b, \u51e1\u662f\u63d0\u5230IP\u534f\u8bae, \u6ca1\u6709\u7279\u6b8a\u8bf4\u660e\u7684, \u9ed8\u8ba4\u90fd\u662f\u6307IPv4</p> <ul> <li>IP\u5730\u5740\u662f\u5728IP\u534f\u8bae\u4e2d, \u7528\u6765\u6807\u8bc6\u7f51\u7edc\u4e2d\u4e0d\u540c\u4e3b\u673a\u7684\u5730\u5740;</li> <li>\u5bf9\u4e8eIPv4\u6765\u8bf4, IP\u5730\u5740\u662f\u4e00\u4e2a4\u5b57\u8282, 32\u4f4d\u7684\u6574\u6570;</li> <li>\u6211\u4eec\u901a\u5e38\u4e5f\u4f7f\u7528 \"\u70b9\u5206\u5341\u8fdb\u5236\" \u7684\u5b57\u7b26\u4e32\u8868\u793aIP\u5730\u5740, \u4f8b\u5982 192.168.0.1 ; \u7528\u70b9\u5206\u5272\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\u8868\u793a\u4e00\u4e2a \u5b57\u8282, \u8303\u56f4\u662f 0 - 255;</li> </ul> <p>\u8ba4\u8bc6MAC\u5730\u5740 </p> <ul> <li>MAC\u5730\u5740\u7528\u6765\u8bc6\u522b\u6570\u636e\u94fe\u8def\u5c42\u4e2d\u76f8\u8fde\u7684\u8282\u70b9;</li> <li>\u957f\u5ea6\u4e3a48\u4f4d, \u53ca6\u4e2a\u5b57\u8282. \u4e00\u822c\u752816\u8fdb\u5236\u6570\u5b57\u52a0\u4e0a\u5192\u53f7\u7684\u5f62\u5f0f\u6765\u8868\u793a(\u4f8b\u5982: 08:00:27:03:fb:19)</li> <li>\u5728\u7f51\u5361\u51fa\u5382\u65f6\u5c31\u786e\u5b9a\u4e86, \u4e0d\u80fd\u4fee\u6539. mac\u5730\u5740\u901a\u5e38\u662f\u552f\u4e00\u7684(\u865a\u62df\u673a\u4e2d\u7684mac\u5730\u5740\u4e0d\u662f\u771f\u5b9e\u7684mac\u5730\u5740, \u53ef \u80fd\u4f1a\u51b2\u7a81; \u4e5f\u6709\u4e9b\u7f51\u5361\u652f\u6301\u7528\u6237\u914d\u7f6emac\u5730\u5740)</li> </ul> <p>\u4e2d\u56fd\u662f\u6700\u591a\u4f7f\u7528ipv6\u7684\u56fd\u5bb6</p>"},{"location":"Linux/Network%20programming%20sockets/","title":"\u7f51\u7edc\u7f16\u7a0b\u5957\u63a5","text":""},{"location":"Linux/Processcontrol/","title":"\u8fdb\u7a0b\u63a7\u5236","text":""},{"location":"Linux/juniorIO/","title":"\u57fa\u7840IO","text":""},{"location":"Linux/juniorIO/#_1","title":"\u94fa\u57ab","text":"<p>\u95ee\uff1a\u5efa\u7acb\u4e00\u4e2a\u7a7a\u6587\u4ef6\u9700\u8981\u4e0d\u8981\u5728\u78c1\u76d8\u4e0a\u5360\u636e\u7a7a\u95f4\uff1f</p> <p>\u7b54\uff1a\u8981\u5360\u636e\u3002</p> <p>a. \u6587\u4ef6 = \u5185\u5bb9 + \u5c5e\u6027\u3002</p> <p>b. \u8bbf\u95ee\u6587\u4ef6\u4e4b\u524d\uff0c\u5f97\u5148\u6253\u5f00\u6587\u4ef6\u3002\u800c\u4fee\u6539\u6587\u4ef6\u65f6\uff0c\u6587\u4ef6\u5fc5\u987b\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u3002\u65e0\u6cd5\u76f4\u63a5\u4fee\u6539\u786c\u4ef6\u4e0a\u7684\u6587\u4ef6\u3002</p> <p>\u95ee\uff1a\u8c01\u6765\u6253\u5f00\u6587\u4ef6\uff1f</p> <p>\u7b54. \u8fdb\u7a0b\u5728\u6253\u5f00\u6587\u4ef6\u3002</p> <p>\u95ee\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u6253\u5f00\u591a\u5c11\u4e2a\u6587\u4ef6\uff1f</p> <p>\u7b54. \u8fdb\u7a0b\u53ef\u4ee5\u6253\u5f00\u591a\u4e2a\u6587\u4ef6\u3002</p> <p>\u95ee\uff1a\u4e00\u5b9a\u65f6\u95f4\u6bb5\u5185\uff0c\u7cfb\u7edf\u4e2d\u5b58\u5728\u591a\u4e2a\u8fdb\u7a0b\uff0c\u4e5f\u53ef\u80fd\u5b58\u5728\u66f4\u591a\u7684\u88ab\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8981\u4e0d\u8981\u7ba1\u7406\u591a\u4e2a\u88ab\u8fdb\u7a0b\u6253\u5f00\u7684\u6587\u4ef6\u5462\uff1f</p> <p>\u7b54. \u80af\u5b9a\u8981\u3002</p> <p>\u95ee\uff1a\u64cd\u4f5c\u7cfb\u7edf\u5982\u4f55\u7ba1\u7406\u5462\uff1f</p> <p>\u7b54. \u5148\u63cf\u8ff0\uff0c\u5728\u7ec4\u7ec7\uff08\u5185\u6838\u4e2d\u4e00\u5b9a\u8981\u6709\u63cf\u8ff0\u88ab\u6253\u5f00\u6587\u4ef6\u7684\u7ed3\u6784\u4f53\uff0c\u5e76\u7528\u5176\u5b9a\u4e49\u5bf9\u8c61\uff09</p> <p>\u5230\u8fd9\u91cc\u6211\u4eec\u5c31\u660e\u767d\u5b66\u4e60\u6587\u4ef6\u5c31\u662f\u5f04\u6e05\u695a\u8fdb\u7a0b\u548c\u6587\u4ef6\u7684\u5173\u7cfb\uff0cstruct task_struct \u548c struct XXX\u7684\u5173\u7cfb\uff1f</p> <p>\u95ee\uff1a\u7cfb\u7edf\u4e2d\u662f\u4e0d\u662f\u6240\u6709\u6587\u4ef6\u90fd\u88ab\u8fdb\u7a0b\u6253\u5f00\u4e86\u5462\uff1f</p> <p>\u7b54\uff1a\u4e0d\u662f</p> <p>\u95ee\uff1a\u6ca1\u6709\u88ab\u6253\u5f00\u7684\u6587\u4ef6\u5728\u54ea\uff1f</p> <p>\u7b54\uff1a \u5728\u78c1\u76d8\u4e2d\uff0c\u53eb\u505a\u78c1\u76d8\u6587\u4ef6\u3002\u4e0a\u9762\u7684\u53eb\u505a\u5185\u5b58\u6587\u4ef6\u3002</p>"},{"location":"Linux/juniorIO/#c-","title":"\u91cd\u65b0\u4f7f\u7528C\u6587\u4ef6\u63a5\u53e3 --- \u5bf9\u6bd4\u4e00\u4e0b\u91cd\u5b9a\u5411","text":"<p>\u5148\u4f7f\u7528\u57fa\u672c\u7684C\u8bed\u8a00\u5199\u4e00\u6bb5\u4ee3\u7801  \u8fd0\u884c\u4e4b\u540e\u51fa\u73b0  \u7136\u540e\u5c06str\u5220\u6389\uff0c\u7ed3\u679clog.txt\u91cc\u9762\u5c31\u662f\u7a7a\uff0c\u8bf4\u660ew\u5199\u6587\u4ef6\u4f1a\u6e05\u7a7a\u539f\u59cb\u6587\u4ef6,\u90a3\u4e48\u518d\u8ba9\u6211\u4eec\u91cd\u65b0\u5199\u4e00\u4e0b\u91cd\u5b9a\u5411  \u6211\u4eec\u73b0\u5728\u628aw\u6539\u6210a   \u53d1\u73b0\u6709\u975e\u5e38\u76f8\u4f3c\u4e4b\u5904</p>"},{"location":"Linux/juniorIO/#_2","title":"\u8ba4\u8bc6\u6587\u4ef6\u64cd\u4f5c\u7684\u7cfb\u7edf\u63a5\u53e3","text":"<p>\u73b0\u5728\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0bfwrite</p> <p>size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );</p> <p>ptr\u662f\u8bfb\u53d6\u6587\u4ef6, size\u662f\u8bfb\u53d6\u6587\u4ef6\u5927\u5c0f, count\u662f\u8bfb\u53d6\u51e0\u4e2a\u8fd9\u6837\u7684\u5927\u5c0f, stream\u662f\u5199\u5165\u6587\u4ef6, \u8fd4\u56de\u503c\u662fcount\u3002</p> <p></p> <p>\u95ee\uff1a\u4ec0\u4e48\u53eb\u505a\u5f53\u524d\u8def\u5f84\uff1f</p> <p>\u73b0\u5728\u6211\u4eec\u7528getpid\u83b7\u53d6\u4ed6\u7684pid\uff0c\u7136\u540e\u6211\u4eecls proc/pid -l, \u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2acwd -&gt; \u5f53\u524d\u8def\u5f84</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u51fd\u6570\u53eb\u505achdir(\u8def\u5f84),\u53ef\u4ee5\u4fee\u6539\u5f53\u524d\u8def\u5f84\u3002\u4f46\u662f\u6211\u4eec\u67e5\u770blog.txt\u91cc\u9762\u7684\u5185\u5bb9\u8fd8\u662f0\uff0c\u77e5\u9053\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u675f\u624d\u53ef\u4ee5\u770b\u5230\u91cc\u9762\u6709\u5185\u5bb9\u3002</p> <p>\u4e0b\u9762\u6211\u4eec\u6765\u4ecb\u7ecdfopen\u7684r\u6a21\u5f0f</p> <p>\u4e00\u884c\u4e00\u884c\u8bfb\u53d6,\u7528fgets</p> <p>char * fgets ( char * str, int num, FILE * stream );</p> <p>str:\u8bfb\u53d6\u7684\u6587\u4ef6\u5185\u5bb9\u653e\u5165\u7684\u5730\u65b9\u3002</p> <p>num:\u8be5\u5730\u65b9\u7684\u5927\u5c0f\u3002</p> <p>stream: \u4ece\u54ea\u91cc\u8bfb\u5165\u3002</p> <p>\u95ee\uff1a\u7a0b\u5e8f\u9ed8\u8ba4\u6253\u5f00\u7684\u6587\u4ef6\u6d41\uff1f</p> <p>stdin(\u6807\u51c6\u8f93\u5165,\u952e\u76d8\u8bbe\u5907)</p> <p>stdout(\u6807\u51c6\u8f93\u51fa, \u663e\u793a\u5668\u8bbe\u5907)</p> <p>stderr(\u6807\u51c6\u9519\u8bef, \u663e\u793a\u5668\u8bbe\u5907)</p> <p>stdin\u3001stdout\u3001stderr\u90fd\u53ef\u4ee5\u76f4\u63a5\u88ab\u4f7f\u7528</p> <p>\u8bbf\u95ee\u6587\u4ef6\u4e0d\u4ec5\u4ec5\u6709C\u8bed\u8a00\u7684\u63a5\u53e3\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5fc5\u987b\u63d0\u4f9b\u5bf9\u5e94\u7684\u8bbf\u95ee\u6587\u4ef6\u7684\u7cfb\u7edf\u8c03\u7528\u3002</p> <p>\u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0bopen\u51fd\u6570</p> <p>int open(const char *pathname, int flags);</p> <p>int open(const char *pathname, int flags, mode_t mode);</p> <p>flag\u662f\u7528\u4f4d\u56fe\u7684\u65b9\u5f0f\u6765\u786e\u5b9a\u662f\u5426\u8c03\u7528\u5185\u90e8\u51fd\u6570,\u7528 | \u64cd\u4f5c\u7b26\u5c31\u53ef\u4ee5\uff0cmode\u662f\u4e3a\u4e86O_CREAT\u521b\u5efa\u65b0\u6587\u4ef6\u7ed9\u6743\u9650\u7684(\u6240\u7ed9\u6743\u9650\u8fd8\u53d7umask\u5f71\u54cd)\u3002</p> <p>\u4ee5O_WDNOLY\u6253\u5f00\u4e0d\u4f1a\u6e05\u7a7a\u5148\u524d\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u8981\u52a0\u4e0aO_TRUNC\u624d\u80fd\u6e05\u7a7a\u3002 O_APPEND\u662f\u8ffd\u52a0\u3002</p> <p>fd\u9ed8\u8ba4\u524d1\u30012\u30013\u88ab\u79f0\u4e4b\u4e3a\uff1a\u6807\u51c6\u8f93\u5165\u3001\u6807\u51c6\u8f93\u51fa\u3001\u6807\u51c6\u9519\u8bef\u3002open\u8fd4\u56de\u503c\u524d3\u4e2a\u5df2\u7ecf\u88ab\u5360\u53d6\uff0c\u6240\u4ee5\u6211\u4eec\u6253\u5f00\u6587\u4ef6fd\u90fd\u662f\u4ece3\u5f00\u59cb\u3002</p> <p>\u7ed3\u8bba\uff1aC\u8bed\u8a00\u7684\u6587\u4ef6\u63a5\u53e3\uff0c\u672c\u8d28\u5c31\u662f\u5c01\u88c5\u4e86\u7cfb\u7edf\u8c03\u7528\u3002</p> <p>\u95ee\uff1aFILE\u662f\u4ec0\u4e48\uff1f</p> <p>\u7b54\uff1aFILE\u662fC\u8bed\u8a00\u6807\u51c6\u5e93\u81ea\u5df1\u5c01\u88c5\u7684\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5fc5\u5b9a\u8981\u5c01\u88c5\u7279\u5b9a\u7684fd!!!\u6253\u5370stdin-&gt;fileno\u5c31\u53ef\u4ee5\u67e5\u770bno;</p> <p>\u95ee\uff1a\u4e3a\u4ec0\u4e48C\u8bed\u8a00\u8981\u5c01\u88c5?</p> <p>\u7b54\uff1a\u4e3a\u4e86\u4fdd\u8bc1\u81ea\u5df1\u7684\u8de8\u5e73\u53f0\u6027\u3002</p>"},{"location":"Linux/juniorIO/#fd","title":"\u5f15\u5165\u6587\u4ef6\u63cf\u8ff0\u7b26fd &amp;&amp; \u5bf9\u6587\u4ef6\u7684\u7406\u89e3","text":"<p>\u95ee\uff1a\u8fdb\u7a0b\u600e\u4e48\u77e5\u9053\u6253\u5f00\u4e86\u90a3\u4e9b\u6587\u4ef6\uff1f\u4e3a\u4ec0\u4e48\u540e\u7eed\u8bbf\u95ee\u6587\u4ef6\uff0c\u7528\u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\uff0c\u90fd\u5fc5\u987b\u4f7f\u7528fd\u5462\uff1f</p> <p>\u7b54\uff1atask_struct \u662f\u8fdb\u7a0b\u7ba1\u7406\u91cc\u9762\u5b58\u5728struct file_struct *files\u6307\u5411struct files_struct\u3002files_struct \u91cc\u9762\u8fd8\u5305\u542b\u4e86 struct file * fd_array[] \u4e00\u4e2a\u6307\u9488\u6570\u7ec4\u3002\u6307\u9488\u6570\u7ec4\u6307\u5411\u7684\u5c31\u662f\u6bcf\u4e00\u4e2astruct file.\u7136\u540e\u4fee\u6539\u6587\u4ef6\u7684\u7f13\u51b2\u533a\uff0c\u6700\u540e\u52a0\u8f7d\u5230\u78c1\u76d8\u4e0a\u3002</p> <p>\u7ed3\u8bba\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u672c\u8d28\uff0c\u5c31\u662f\u6570\u7ec4\u4e0b\u6807\u3002</p> <p>\u95ee\uff1a\u5982\u4f55\u7406\u89e3\u4e00\u5207\u7686\u6587\u4ef6\uff1f</p> <p>\u7b54\uff1a\u5c31\u662f\u51fd\u6570\u6307\u9488\uff0c\u6765\u63a5\u53d7\u5199\u7684\uff0c\u8bfb\u7684\u6765\u83b7\u53d6\uff0c\u5c4f\u853d\u4e86\u786c\u4ef6\u7684\u5dee\u5f02\u3002</p> <p>fd\u7684\u5206\u914d\u89c4\u5219\uff1a \u6700\u5c0f\u7684\u6ca1\u6709\u88ab\u4f7f\u7528\u7684\u6570\u7ec4\u4e0b\u6807\uff0c\u4f1a\u5206\u914d\u7ed9\u6700\u65b0\u6253\u5f00\u7684\u6587\u4ef6\u3002</p>"},{"location":"Linux/juniorIO/#_3","title":"\u7406\u89e3\u91cd\u5b9a\u5411 \u7406\u89e3\u7f13\u51b2\u533a","text":"<p>close(1),\u7136\u540e\u518dopen\u4e00\u4e2a\u65b0\u6587\u4ef6\uff0c\u7136\u540e\u5728printf\uff0c\u5c31\u4f1a\u53d1\u73b0printf\u5199\u5165\u7684\u662f\u90a3\u4e2a\u65b0\u6587\u4ef6\uff0c\u8fd9\u662f\u7531\u4e8efd = 1\u7684stdout\u88ab\u6539\u6210\u4e86\u65b0\u6587\u4ef6\uff0c \u6240\u4ee5\u5199\u5165\u7684\u662f\u65b0\u6587\u4ef6\u3002\u4f46\u662f\u8fd9\u6837\u5199\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u6709\u4e00\u4e2aint dup2(int oldfd, int newfd);\u5c06old\u62f7\u8d1d\u5230new\uff0c\u6240\u4ee5dup2(fd, 1) \u5c31\u53ef\u4ee5\u5b8c\u6210\u7f13\u51b2\u533a\u3002</p>"},{"location":"algorithm/monotony%20stack%20queue/","title":"\u5355\u8c03\u6808\u5355\u8c03\u961f\u5217","text":"<p>\u5355\u8c03\u6808\uff0c\u5c31\u662f\u6ee1\u8db3\u6808\u4e2d\u5143\u7d20\u662f\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf\u7684\u7ebf\u6027\u6570\u636e\u7ed3\u6784\u3002 \u5229\u7528\u6808\u5148\u8fdb\u540e\u51fa\u7684\u7279\u70b9\u548c\u5176\u4e2d\u5143\u7d20\u7684\u5355\u8c03\u6027\u53ef\u4ee5\u89e3\u51b3\u8bb8\u591a\u95ee\u9898</p>"},{"location":"algorithm/monotony%20stack%20queue/#_2","title":"\u6c42\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570","text":"<p>\u7ed9\u4f60 n \u4e2a\u6574\u6570 a1,a2,\u2026,an\uff0c\u8bf7\u95ee\u4ece\u6bcf\u4e2a\u6570\u5b57\u5f80\u540e\u770b\uff0c\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u6570\u5b57\u7684\u4e0b\u6807\u662f\u591a\u5c11\uff1f\u5982\u679c\u540e\u9762\u6ca1\u6709\u6bd4\u5b83\u5927\u7684\u6570\u5b57\uff0c\u5219\u8f93\u51fa 0\u3002</p> <p>\u65b9\u6cd5\u4e00\uff1a\u4ece\u5de6\u5411\u53f3,\u5efa\u7acb\u5355\u8c03\u9012\u51cf\u6808</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nll n, top, s[200001], a[200001], ans[200001];\nint main() {\n    scanf(\"%lld\", &amp;n);\n    for (ll i = 1; i &lt;= n; ++i)\n        scanf(\"%lld\", &amp;a[i]);\n    for (ll i = 1; i &lt;= n; ++i) {\n        while (top &amp;&amp; a[i] &gt; a[s[top]]) {\n            ans[s[top]] = i;\n            --top;\n        }\n        s[++top] = i;\n    }\n    for (ll i = 1; i &lt;= top; ++i)\n        ans[s[i]] = 0;\n    for (ll i = 1; i &lt;= n; ++i)\n        printf(\"%lld \", ans[i]);\n    printf(\"\\n\");\n    return 0;\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u4ece\u53f3\u5f80\u5de6,\u5efa\u7acb\u5355\u8c03\u9012\u51cf\u6808</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nll n, top, s[200001], a[200001], ans[200001];\nint main() {\n    scanf(\"%lld\", &amp;n);\n    for (ll i = 1; i &lt;= n; ++i)\n        scanf(\"%lld\", &amp;a[i]);\n    for (ll i = n; i; --i) {\n        while (top &amp;&amp; a[i] &gt;= a[s[top]])\n            --top;\n        if (top)\n            ans[i] = s[top];\n        else\n            ans[i] = 0;\n        s[++top] = i;\n    } \n    for (ll i = 1; i &lt;= n; ++i)\n        printf(\"%lld \", ans[i]);\n    printf(\"\\n\");\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/monotony%20stack%20queue/#_3","title":"\u6700\u5927\u77e9\u5f62\u9762\u79ef","text":"<p>\u6709\u4e00\u5f20 n\u5217\u7684\u7f51\u683c\u56fe\uff0c\u6bcf\u5217\u6709\u4e00\u4e9b\u683c\u5b50\u88ab\u5c0f\u8717\u4ece\u5e95\u5411\u4e0a\u6d82\u4e86\u8272\u3002\u73b0\u5728\u7ed9\u4f60\u6bcf\u4e00\u5217\u88ab\u6d82\u8272\u7684\u683c\u5b50\u7684\u9ad8\u5ea6 ai\uff0c\u8bf7\u4f60\u6c42\u51fa\u88ab\u6d82\u8272\u7684\u683c\u5b50\u7ec4\u6210\u7684\u6700\u5927\u77e9\u5f62\u7684\u9762\u79ef\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nll n, top, l[200001], a[200001], r[200001], s[200001];\nint main() {\n    scanf(\"%lld\", &amp;n);\n    for (ll i = 1; i &lt;= n; ++i)\n        scanf(\"%lld\", &amp;a[i]);\n    for (ll i = 1; i &lt;= n; ++i) {\n        while (top &amp;&amp; a[i] &lt;= a[s[top]])\n            --top;\n        if (top)\n            l[i] = s[top];\n        else\n            l[i] = 0;\n        s[++top] = i;\n    }\n    top = 0;\n    for (ll i = n; i; --i) {\n        while (top &amp;&amp; a[i] &lt;= a[s[top]])\n            --top;\n        if (top)\n            r[i] = s[top];\n        else\n            r[i] = n + 1;\n        s[++top] = i;\n    }\n    ll ans = 0;\n    for (ll i = 1; i &lt;= n; ++i)\n        ans = max(ans, (r[i] - l[i] - 1) * a[i]);\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/monotony%20stack%20queue/#_4","title":"\u6570\u5bf9\u7edf\u8ba1","text":"<p>\u7ed9\u4f60 n\u4e2a\u6570\u5b57 a1,a2,\u2026,an\uff0c\u8fd9\u4e9b\u6570\u5b57\u5404\u4e0d\u76f8\u540c\u3002\u8be2\u95ee\u5171\u6709\u591a\u5c11\u5bf9\u6570\u5b57 (i,j) (1\u2264i&lt;j\u2264n)\uff0c\u6ee1\u8db3 ai \u5230 aj \u4e2d\u6ca1\u6709\u6570\u5b57\u6bd4 ai \u6216 aj \u5927\u3002 \u5373\u5bf9\u6240\u6709\u4f4d\u7f6e k (i&lt;k&lt;j)\uff0c\u6ee1\u8db3 ak&lt;min(ai,aj)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nll n, top, a[200001], s[200001];\nint main() {\n    scanf(\"%lld\", &amp;n);\n    for (ll i = 1; i &lt;= n; ++i)\n        scanf(\"%lld\", &amp;a[i]);\n    ll ans = 0;\n    for (ll i = 1; i &lt;= n; ++i) {\n        while (top &amp;&amp; a[i] &gt; a[s[top]])\n            --top, ++ans;\n        if (top)\n            ++ans;\n        s[++top] = i;\n    }\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n</code></pre> <p>\u5355\u8c03\u961f\u5217:\u5c31\u662f\u6ee1\u8db3\u961f\u5217\u4e2d\u5143\u7d20\u662f\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf\u7684\u7ebf\u6027\u6570\u636e\u7ed3\u6784</p>"},{"location":"algorithm/monotony%20stack%20queue/#_5","title":"\u52a8\u6001\u533a\u95f4\u6700\u5927\u6570","text":"<p>\u7ed9\u4f60 n\u4e2a\u6570\u5b57 a1,a2,...,an\uff0c\u8bf7\u4ece\u5de6\u5230\u53f3\u8f93\u51fa\u6bcf\u4e2a\u957f\u5ea6\u4e3a m \u7684\u6570\u5217\u6bb5\u5185\u7684\u6700\u5927\u6570\u3002\u8fd9\u4e9b\u6570\u5217\u6bb5\u5206\u522b\u4e3a [1,m],[2,m+1],...,[n\u2212m+1,n]\uff0c\u5171 n\u2212m+1 \u4e2a\u3002</p> <p>\u89e3\u6790:\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u9012\u51cf\u7684\u961f\u5217\u5373\u53ef</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nll n, m, a[200001], q[200001], front = 1, rear = 0;\nint main() {\n    scanf(\"%lld%lld\", &amp;n, &amp;m);\n    for (ll i = 1; i &lt;= n; ++i)\n        scanf(\"%lld\", &amp;a[i]);\n    for (ll i = 1; i &lt;= n; ++i) {\n        while (front &lt;= rear &amp;&amp; a[q[rear]] &lt;= a[i])\n            --rear;\n        q[++rear] = i;\n        if (q[front] &lt; i - m + 1)\n            ++front;\n        if (i &gt;= m)\n            printf(\"%lld \", a[q[front]]);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/monotony%20stack%20queue/#_6","title":"\u6700\u5927\u8fde\u7eed\u533a\u95f4\u548c","text":"<p>\u7ed9\u4f60 n \u4e2a\u6570\u5b57 a1,a2,...,an \u548c\u4e24\u4e2a\u6574\u6570 l,r\uff0c\u4f60\u9700\u8981\u5728 a1,a2,...,an \u4e2d\u9009\u51fa\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\u6ee1\u8db3\u533a\u95f4\u957f\u5ea6 \u2208[l,r] \u5e76\u4e14\u533a\u95f4\u5185\u7684\u6570\u5b57\u7684\u548c\u6700\u5927\u3002\u8bf7\u6c42\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5927\u8fde\u7eed\u533a\u95f4\u548c\u3002</p> <p>\u89e3\u6790: i\u56fa\u5b9a\u65f6,\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c,\u518d\u5229\u7528\u524d\u7f00\u548c\u6c42\u6700\u5927.</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nll n, l, r, front = 1, rear = 0, a[200001], s[200001], q[200001];\nint main() {\n    scanf(\"%lld%lld%lld\", &amp;n, &amp;l, &amp;r);\n    for (ll i = 1; i &lt;= n; ++i)\n        scanf(\"%lld\", &amp;a[i]);\n    for (ll i = 1; i &lt;= n; ++i)\n        s[i] = s[i - 1] + a[i];\n    ll x = l, ans = - 1 &lt;&lt; 30;\n    for (ll i = 1; i + l - 1 &lt;= n; ++i) {\n        while (x &lt;= i + r - 1 &amp;&amp; x &lt;= n) {\n            while (front &lt;= rear &amp;&amp; s[q[rear]] &lt;= s[x]) \n                --rear;\n            q[++rear] = x;\n            ++x;\n        }\n        if (q[front] &lt; i + l - 1)\n            ++front;\n        ans = max(ans, s[q[front]] - s[i - 1]);\n    }\n    printf(\"%lld\\n\", ans);\n    return 0;\n} \n</code></pre>"},{"location":"algorithm/quicksort/","title":"\u5feb\u901f\u6392\u5e8f","text":""},{"location":"algorithm/stack/","title":"\u6808","text":""},{"location":"algorithm/stack/#_2","title":"\u6808\u7684\u7b80\u4ecb","text":"<ul> <li>\u6536\u5feb\u9012\u7bb1\u5b50, \u6211\u4eec\u4f1a\u628a\u7bb1\u5b50\u4ece\u4e0b\u5f80\u4e0a\u4e00\u4e2a\u4e00\u4e2a\u5806\u8d77\u6765</li> <li>\u7bb1\u5b50\u5806\u7ed3\u6784\u7a33\u5b9a, \u4e00\u822c\u60c5\u51b5\u4e0b\u5c31\u53ea\u80fd\u52a8\u6700\u4e0a\u9762\u7684\u7bb1\u5b50, \u6bd4\u5982\u62ff\u8d70\u5b83\u6216\u8005\u5806\u65b0\u7684\u7bb1\u5b50\u4e0a\u53bb</li> <li> <p>\u5982\u679c\u8bd5\u56fe\u76f4\u63a5\u4ece\u4e2d\u95f4\u62bd\u8d70\u4e00\u4e2a\u7bb1\u5b50\uff0c\u6574\u5806\u7bb1\u5b50\u5c31\u4f1a\u5012\u584c</p> </li> <li> <p>\u6808(Stack)\u662f\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u7bb1\u5b50\u5806\u6216\u50a8\u7269\u6876\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u53ef\u4ee5\u5f80\u91cc\u9762\u5b58\u5165\u6216\u53d6\u51fa\u6570\u636e</p> </li> <li>\u6808\u6309\u7167\u5148\u8fdb\u540e\u51fa\u7684\u539f\u5219\u5b58\u50a8\u6570\u636e\uff0c\u6bcf\u6b21\u65b0\u8fdb\u5165\u7684\u6570\u636e\u90fd\u4f1a\u88ab\u653e\u5728\u6700\u4e0a\u9762\uff0c\u8d8a\u5148\u8fdb\u5165\u7684\u6570\u636e\u5728\u8d8a\u4e0b\u9762\uff0c\u8d8a\u540e\u8fdb\u5165\u7684\u6570\u636e\u5728\u8d8a\u4e0a\u9762</li> <li>\u6211\u4eec\u53ea\u80fd\u5bf9\u6700\u4e0a\u9762\u7684\u6570\u636e\u8fdb\u884c\u64cd\u4f5c</li> <li>\u6808\u7684\u4e24\u5927\u5143\u7d20:\u6808\u7684\u5927\u5c0f\u548c\u6808\u9876\u6307\u9488Top(\u6307\u5411\u6808\u6700\u4e0a\u9762\u7684\u4f4d\u7f6e)\u3002 </li> </ul>"},{"location":"algorithm/stack/#_3","title":"\u6808\u7684\u57fa\u672c\u64cd\u4f5c","text":"<ul> <li>\u65b0\u5efa</li> <li>\u63d2\u5165\u6570\u636e</li> <li>\u5220\u9664\u6808\u9876\u6570\u636e</li> <li>\u5982\u4f55\u67e5\u8be2\u6808\u9876\u6570\u636e\uff1f</li> <li>\u5982\u4f55\u6e05\u7a7a\u4e00\u4e2a\u6808\uff1f</li> <li>\u5b9e\u73b0\u6808\u7684\u51e0\u4e2a\u57fa\u672c\u64cd\u4f5c:</li> </ul> <p>push x: \u5c06x\u8fd9\u4e2a\u5143\u7d20\u653e\u5230\u6808\u9876</p> <p>pop: \u5c06\u6808\u9876\u5143\u7d20\u5220\u9664</p> <p>top: \u8be2\u95ee\u6808\u9876\u5143\u7d20\u662f\u591a\u5c11</p> <pre><code>\u6837\u4f8b\u8f93\u5165:          \u6837\u4f8b\u8f93\u51fa:\n10                 2\npush 1             1\npush 2             3\ntop                4\npop\ntop\npush 3\ntop\npop\npush 4\ntop\n</code></pre> <p>\u65b0\u5efa:</p> <pre><code>int s[10];\nint top = 0;\n</code></pre> <p>Push</p> <pre><code>void Push(int x) {\n    s[++top] = x;\n}\n</code></pre> <p>Pop</p> <pre><code>void Pop() {\n    if (top == 0)\n        Error;\n    --top;\n}\n</code></pre>"},{"location":"algorithm/stack/#_4","title":"\u4f8b\u9898\u4e00:","text":"<p>\u6808\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002\u73b0\u5728\u4f60\u8981\u652f\u6301\u51e0\u79cd\u64cd\u4f5c\uff1a</p> <ul> <li>push x\uff0c\u5c06x\u8fd9\u4e2a\u5143\u7d20\u653e\u5230\u6808\u9876\u3002</li> <li>pop\uff0c\u5c06\u6808\u9876\u5143\u7d20\u5220\u9664\u3002</li> <li>top\uff0c\u8be2\u95ee\u6808\u9876\u5143\u7d20\u662f\u591a\u5c11\u3002</li> </ul> <p>\u8f93\u5165\u683c\u5f0f: \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 m\uff0c\u8868\u793a\u64cd\u4f5c\u4e2a\u6570\u3002</p> <p>\u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u4e0a\u9762\u6240\u8ff0\u7684\u64cd\u4f5c\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f: \u8f93\u51fa\u82e5\u5e72\u884c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\u64cd\u4f5c\uff0c\u8f93\u51fa\u7b54\u6848\u3002</p> <pre><code>\u6837\u4f8b\u8f93\u5165          \u6837\u4f8b\u8f93\u51fa\n10                2\npush 1            1\npush 2            3\ntop               4\npop\ntop\npush 3\ntop\npop\npush 4\ntop\n</code></pre> <p>\u6570\u636e\u89c4\u6a21</p> <p>\u5bf9\u4e8e 100%\u7684\u6570\u636e\uff0c\u4fdd\u8bc1 1\u2264m\u22641e5\u3002</p> <p>\u5bf9\u4e8e push \u64cd\u4f5c\uff0c\u4fdd\u8bc1 1\u2264x\u22641e9\u3002</p> <p>\u5bf9\u4e8e pop \u548c top \u64cd\u4f5c\uff0c\u4fdd\u8bc1\u6808\u975e\u7a7a\u3002</p> <p>AC\u4ee3\u7801:</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nll a[100001], m, top;\nchar s[11];\nint main() {\n    scanf(\"%lld\", &amp;m);\n    while (m--) {\n        scanf(\"%s\", s);\n        if (s[1] == 'u') {\n            ll x;\n            scanf(\"%lld\", &amp;x);\n            a[++top] = x;\n        }\n        else if (s[0] == 't')\n            printf(\"%lld\\n\", a[top]);\n        else \n            --top;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"mysqldatabase/Built-in%20functions/","title":"MySQL\u5185\u7f6e\u51fd\u6570","text":""},{"location":"mysqldatabase/Built-in%20functions/#_1","title":"\u65e5\u671f\u51fd\u6570","text":"\u51fd\u6570\u540d\u79f0 \u63cf\u8ff0 current_date() \u5f53\u524d\u65e5\u671f current_time() \u5f53\u524d\u65f6\u95f4 current_timestamp() \u5f53\u524d\u65f6\u95f4\u6233 date(datetime) \u8fd4\u56dedatetime\u53c2\u6570\u7684\u65e5\u671f\u90e8\u5206 date_add(date, interval d_value_type) \u5728date\u4e2d\u6dfb\u52a0\u65e5\u671f\u6216\u65f6\u95f4 interval\u540e\u7684\u6570\u503c\u5355\u4f4d\u53ef\u4ee5\u662f:year minute second day date_sub(date, interval d_value_type) \u5728date\u4e2d\u51cf\u53bb\u65e5\u671f\u6216\u65f6\u95f4 interval\u540e\u7684\u6570\u503c\u5355\u4f4d\u53ef\u4ee5\u662f:year minute second day datediff(date1, date2) \u4e24\u4e2a\u65e5\u671f\u7684\u5dee,\u5355\u4f4d\u662f\u5929 now() \u5f53\u524d\u65e5\u671f\u65f6\u95f4 <p>\u6848\u4f8b: </p> <p>\u521b\u5efa\u4e00\u4e2a\u8868, \u67e5\u8be2\u4e24\u5206\u949f\u4ee5\u524d\u589e\u52a0\u7684\u5185\u5bb9:select * from msg where date_add(sendtime, interval 2 minute) &gt; now();</p>"},{"location":"mysqldatabase/Built-in%20functions/#_2","title":"\u5b57\u7b26\u4e32\u51fd\u6570","text":"\u51fd\u6570\u540d\u79f0 \u63cf\u8ff0 charset(str) \u8fd4\u56de\u5b57\u7b26\u4e32\u5b57\u7b26\u96c6 concat(string1, string2, ...) \u8fde\u63a5\u5b57\u7b26\u4e32 instr(string, substring) \u8fd4\u56desubstring\u5728string\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e,\u6ca1\u6709\u8fd4\u56de0 ucase(string1) \u8f6c\u6362\u6210\u5927\u5199 lcase(string1) \u8f6c\u6362\u6210\u5c0f\u5199 left(string1, length) \u4ecestring1\u4e2d\u5de6\u8fb9\u8d77\u53d6length\u4e2a\u5b57\u7b26 length(string) string\u7684\u957f\u5ea6 replace(str, search_str, replace_str) \u5728str\u4e2d\u7528replace_str\u66ff\u6362search_str strcmp(string1, string2) \u9010\u5b57\u7b26\u6bd4\u8f83\u4e24\u5b57\u7b26\u7684\u5927\u5c0f substring(str, position [,length]) \u4ecestr\u7684position\u5f00\u59cb,\u53d6length\u4e2a\u5b57\u7b26 ltrim(string) rtrim(string) trim(string) \u53bb\u9664\u524d\u7a7a\u683c\u6216\u540e\u7a7a\u683c <p>\u6848\u4f8b:</p> <p>\u83b7\u53d6emp\u8868\u7684ename\u5217\u7684\u5b57\u7b26\u96c6:select charset(ename) from EMP;</p> <p>\u8981\u6c42\u663e\u793astudent\u8868\u4e2d\u7684\u4fe1\u606f\uff0c\u663e\u793a\u683c\u5f0f\uff1a\u201cXXX\u7684\u8bed\u6587\u662fXXX\u5206\uff0c\u6570\u5b66XXX\u5206\uff0c\u82f1\u8bedXXX\u5206\u201d:select concat(name, '\u7684\u8bed\u6587\u662f',chinese,'\u5206\uff0c\u6570\u5b66\u662f',math,'\u5206') as '\u5206\u6570' from student;</p> <p>\u6c42\u5b66\u751f\u8868\u4e2d\u5b66\u751f\u59d3\u540d\u5360\u7528\u7684\u5b57\u8282\u6570:select length(name), name from student;</p> <p>\u5c06EMP\u8868\u4e2d\u6240\u6709\u540d\u5b57\u4e2d\u6709S\u7684\u66ff\u6362\u6210'\u4e0a\u6d77':select replace(ename, 'S', '\u4e0a\u6d77') ,ename from EMP;</p> <p>\u622a\u53d6EMP\u8868\u4e2dename\u5b57\u6bb5\u7684\u7b2c\u4e8c\u4e2a\u5230\u7b2c\u4e09\u4e2a\u5b57\u7b26:select substring(ename, 2, 2), ename from EMP;</p> <p>\u4ee5\u9996\u5b57\u6bcd\u5c0f\u5199\u7684\u65b9\u5f0f\u663e\u793a\u6240\u6709\u5458\u5de5\u7684\u59d3\u540d:select concat(lcase(substring(ename, 1, 1)),substring(ename,2)) from EMP;</p>"},{"location":"mysqldatabase/Built-in%20functions/#_3","title":"\u6570\u5b66\u51fd\u6570","text":"\u51fd\u6570\u540d\u79f0 \u63cf\u8ff0 abs(number) \u7edd\u5bf9\u503c\u51fd\u6570 bin(decimal_number) \u5341\u8fdb\u5236\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236 hex(decimalNumber) \u8f6c\u6362\u6210\u5341\u516d\u8fdb\u5236 conv(number, from_base, to_base) \u8fdb\u5236\u8f6c\u6362 celling(number) \u5411\u4e0a\u53d6\u6574 floor(number) \u5411\u4e0b\u53d6\u6574 format(number, decimal_places) \u683c\u5f0f\u5316, \u4fdd\u7559\u5c0f\u6570\u4f4d\u6570 rand() \u8fd4\u56de\u968f\u673a\u6d6e\u70b9\u6570,\u8303\u56f4[0.0, 1.0) mod(number, denominator) \u53d6\u6a21,\u6c42\u4f59"},{"location":"mysqldatabase/Built-in%20functions/#_4","title":"\u5176\u4ed6\u51fd\u6570","text":"<ul> <li> <p>user():\u67e5\u8be2\u5f53\u524d\u7528\u6237</p> </li> <li> <p>md5(str):\u5bf9\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u6458\u8981,\u6458\u8981\u540e\u5f97\u5230\u4e00\u4e2a32\u4f4d\u5b57\u7b26\u4e32</p> </li> <li> <p>database():\u663e\u793a\u5f53\u524d\u6b63\u5728\u4f7f\u7528\u7684\u6570\u636e\u5e93</p> </li> <li> <p>password():MySQL\u6570\u636e\u5e93\u4f7f\u7528\u8be5\u51fd\u6570\u5bf9\u7528\u6237\u52a0\u5bc6</p> </li> <li> <p>ifnull(val1\uff0c val2):\u5982\u679cval1\u4e3anull\uff0c\u8fd4\u56deval2\uff0c\u5426\u5219\u8fd4\u56deval1\u7684\u503c</p> </li> </ul>"},{"location":"mysqldatabase/Composite%20Query/","title":"\u590d\u5408\u67e5\u8be2","text":""},{"location":"mysqldatabase/Composite%20Query/#_2","title":"\u57fa\u672c\u67e5\u8be2\u56de\u987e","text":"<p>\u67e5\u8be2\u5de5\u8d44\u9ad8\u4e8e500\u6216\u5c97\u4f4d\u4e3aMANAGER\u7684\u96c7\u5458\uff0c\u540c\u65f6\u8fd8\u8981\u6ee1\u8db3\u4ed6\u4eec\u7684\u59d3\u540d\u9996\u5b57\u6bcd\u4e3a\u5927\u5199\u7684J:select * from EMP where (sal&gt;500 or job='MANAGER') and ename like 'J%';</p> <p>\u6309\u7167\u90e8\u95e8\u53f7\u5347\u5e8f\u800c\u96c7\u5458\u7684\u5de5\u8d44\u964d\u5e8f\u6392\u5e8f:select * from EMP order by deptno, sal desc;</p> <p>\u4f7f\u7528\u5e74\u85aa\u8fdb\u884c\u964d\u5e8f\u6392\u5e8f:select ename, sal*12+ifnull(comm,0) as '\u5e74\u85aa' from EMP order by \u5e74\u85aa desc;</p> <p>\u663e\u793a\u5de5\u8d44\u6700\u9ad8\u7684\u5458\u5de5\u7684\u540d\u5b57\u548c\u5de5\u4f5c\u5c97\u4f4d:select ename, job from EMP where sal = (select max(sal) from EMP);</p> <p>\u663e\u793a\u5de5\u8d44\u9ad8\u4e8e\u5e73\u5747\u5de5\u8d44\u7684\u5458\u5de5\u4fe1\u606f:select ename, sal from EMP where sal&gt;(select avg(sal) from EMP);</p> <p>\u663e\u793a\u6bcf\u4e2a\u90e8\u95e8\u7684\u5e73\u5747\u5de5\u8d44\u548c\u6700\u9ad8\u5de5\u8d44:select deptno, format(avg(sal), 2) , max(sal) from EMP group by deptno;</p> <p>\u663e\u793a\u5e73\u5747\u5de5\u8d44\u4f4e\u4e8e2000\u7684\u90e8\u95e8\u53f7\u548c\u5b83\u7684\u5e73\u5747\u5de5\u8d44:select deptno, format(avg(sal), 2) , max(sal) from EMP group by deptno;</p> <p>\u663e\u793a\u5e73\u5747\u5de5\u8d44\u4f4e\u4e8e2000\u7684\u90e8\u95e8\u53f7\u548c\u5b83\u7684\u5e73\u5747\u5de5\u8d44:select deptno, avg(sal) as avg_sal from EMP group by deptno having avg_sal&lt;2000;</p> <p>\u663e\u793a\u6bcf\u79cd\u5c97\u4f4d\u7684\u96c7\u5458\u603b\u6570\uff0c\u5e73\u5747\u5de5\u8d44:select job,count(*), format(avg(sal),2) from EMP group by job;</p>"},{"location":"mysqldatabase/Composite%20Query/#_3","title":"\u591a\u8868\u67e5\u8be2","text":""},{"location":"mysqldatabase/MYSQLinstall/","title":"MySQL\u5b89\u88c5","text":"<ul> <li> <p>\u5b89\u88c5\u4e0e\u5378\u8f7d\u4e2d\uff0c\u7528\u6237\u5168\u90e8\u5207\u6362\u6210\u4e3aroot\uff0c\u4e00\u65e6\u5b89\u88c5\uff0c\u666e\u901a\u7528\u6237\u80fd\u4f7f\u7528\u7684.</p> </li> <li> <p>\u521d\u671f\u7ec3\u4e60\uff0cmysql\u4e0d\u8fdb\u884c\u7528\u6237\u7ba1\u7406\uff0c\u5168\u90e8\u4f7f\u7528root\u8fdb\u884c\uff0c\u5c3d\u5feb\u9002\u5e94mysql\u8bed\u53e5\uff0c\u540e\u9762\u5b66\u4e86\u7528\u6237\u7ba1\u7406\uff0c\u5728\u8003\u8651\u65b0\u5efa\u666e\u901a\u7528\u6237</p> </li> </ul>"},{"location":"mysqldatabase/MYSQLinstall/#_1","title":"\u5378\u8f7d\u4e0d\u9700\u8981\u7684\u73af\u5883","text":"<p>\u67e5\u770b\u662f\u5426\u6709mysql:ps ajx | grep mysql / ps ajx | grep mariadb</p> <p>\u5207\u6362\u6210\u8d85\u7ea7\u7528\u6237root</p> <p>\u5220\u9664\u524d\uff0c\u5148\u5173\u95ed:systemctl stop mysqld</p> <p>\u67e5\u8be2mysql\u6587\u4ef6: rpm -qa | grep mysql</p> <p>\u5378\u8f7dmysql\u76f8\u5173\u6587\u4ef6: rpm -qa | grep mysql | xargs yum -y remove</p> <p>\u4e4b\u540e\u67e5\u8be2\u5c31\u6ca1\u6709\u6587\u4ef6\u4e86,\u7136\u540e\u8fd8\u6709\u4e00\u4ef6\u4e8b\u8981\u786e\u8ba4\u4e00\u4e0b:</p> <p>\u770b\u770b\u6709\u6ca1\u6709: ls /etc/my.cnf,\u4f46\u662fls var/lib/mysql\u53ef\u80fd\u8fd8\u4f1a\u6709\u4e0a\u4e2amysql\u7684\u6b8b\u7559\u6587\u4ef6 </p>"},{"location":"mysqldatabase/MYSQLinstall/#yum","title":"\u4e0b\u8f7dyum\u6e90","text":"<p>\u6253\u5f00\u7f51\u7ad9http://repo.mysql.com/,\u8fdb\u53bb\u4e4b\u540e\u4f1a\u770b\u4e0d\u5168,\u6240\u4ee5\u8fdb\u53bb\u53f3\u952e\uff0c\u67e5\u770b\u7f51\u9875\u6e90\u4ee3\u7801</p> <p>\u67e5\u8be2\u81ea\u5df1\u7684\u7248\u672c:cat /etc/redhat-release</p> <p>\u6211\u4eec\u9009\u62e9MySQL\u8981\u90095.7\u7248\u672c\u7684\uff0c\u4e0d\u90098.0,\u5982\u679c\u6709\u5bf9\u5e94\u7248\u672c\u5c31\u9009\u5bf9\u5e94\u7248\u672c,\u5426\u5219\u9009mysql57-community-release-el7.rpm(centos)</p> <p>\u7136\u540e\u6211\u4eec\u5728Linux\u73af\u5883\u91cc\u9762\u8f93\u5165:rz.\u4e0a\u4f20\u521a\u521a\u4e0b\u597d\u7684\u6587\u4ef6</p> <p>\u5728\u5b89\u88c5\u4e4b\u524d\u6211\u4eec\u5148: ls /etc/yum.repos.d/ -l,\u67e5\u770b\u4e00\u4e0byum\u6e90\u6e05\u5355\u91cc\u9762\u662f\u5426\u6709MySQL,\u5982\u679c\u6ca1\u6709\u53ef\u80fd\u4f1a\u5b89\u88c5\u4e0d\u4e0a</p> <p>\u6ca1\u6709\u7684\u8bdd\u5c31:rpm -ivh mysql57-community-release-el7.rpm(\u521a\u521arz\u4e0a\u4f20\u4e0a\u53bb\u7684\u90a3\u4e2a\u6587\u4ef6\u540d),\u7136\u540e\u518d\u6b21\u67e5\u8be2(ls /etc/yum.repos.d/ -l)\u5c31\u4f1a\u51fa\u73b0\u4e86</p> <p>vim /etc/yum.repos.d/mysql-community.repo\u8fd9\u4e2a\u6587\u4ef6\u53d1\u73b0\u6709\u5404\u79cd\u5404\u6837\u7684\u5de5\u5177\u548cMySQL,\u4f46\u662f\u6211\u4eec\u4e0d\u9700\u8981\u7ba1\uff0c\u4ed6\u4f1a\u81ea\u52a8\u7ed9\u6211\u4eec\u5339\u914dyum\u6e90\u6765\u5339\u914d\u7cfb\u7edf</p> <p>yum list | grep mysql\u67e5\u770bMySQL\u7684\u5185\u5bb9,\u5982\u679c\u51fa\u73b0\u8bf4\u660e\u6211\u4eec\u4e0b\u7684yum\u6e90\u5df2\u7ecf\u751f\u6548\u4e86,\u7136\u540e\u5c31\u53ef\u4ee5\u628arm mysql57-community-release-el7.rpm(\u521a\u521arz\u4e0a\u4f20\u7684\u90a3\u4e2a\u6587\u4ef6)</p>"},{"location":"mysqldatabase/MYSQLinstall/#_2","title":"\u5f00\u59cb\u5b89\u88c5","text":"<p>yum install -y mysql-community-server</p> <p>\u5b89\u88c5\u4f1a\u51fa\u73b0\u7684\u95ee\u9898</p> <p>GPG Keys are configured as: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql ,GPG\u8fc7\u671f\u4e86</p> <p>\u90a3\u4e48\u6211\u4eec\u8fd0\u884c\u8fd9\u6bb5\u7684\u4ee3\u7801\u5c31\u884c\u4e86:rpm --import http://repo.mysql.com/RPM-GPG-KEY-mysql-2022</p> <p>\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u524d\u9762\u7684yum\u6e90\u4e0b\u9519\u4e86,\u4e5f\u4f1a\u5bfc\u81f4\u67d0\u4e9b\u95ee\u9898</p> <p>\u786e\u8ba4\u5b89\u88c5\u6210\u529f:\u770b\u770b\u662f\u5426\u6709ls /etc/my.cnf,which mysqld(\u670d\u52a1\u7aef),which mysql(\u5ba2\u6237\u7aef)</p> <p>\u542f\u52a8\u4e00\u4e0bmysql:systemctl start mysqld</p> <p>\u7136\u540e\u6211\u4eec\u67e5\u770b ps ajx | grep mysqld\u5c31\u770b\u5f97\u5230\u4e00\u4e2a\u8fdb\u7a0b\u4e86,netstat -nltp\u670d\u52a1\u7aef\u53e3\u53f7</p> <p>\u6211\u4eec\u5c1d\u8bd5\u767b\u5165\u4e00\u4e0b: mysql -uroot -p,\u767b\u5165\u4e0d\u4e0a\u53bb</p>"},{"location":"mysqldatabase/MYSQLinstall/#_3","title":"\u5f00\u59cb\u767b\u5165","text":"<ol> <li>\u83b7\u53d6\u4e34\u65f6root\u5bc6\u7801:sudo grep 'temporary password' /var/log/mysqld.log</li> <li>\u76f4\u63a5mysql -uroot -p\u767b\u5165</li> <li>vim /etc/my.cnf, \u6700\u540e\u65b0\u8d77\u4e00\u884c\u52a0\u5165\u4e00\u53e5skip-grant-tables, \u7136\u540e\u91cd\u542f\u4e00\u4e0bmysql:systemctl restart mysqld</li> </ol> <p>\u5f53\u662f\u7b2c\u4e00\u79cd\u7684\u65f6\u5019,\u8fd8\u9700\u66f4\u6539\u4e00\u4e0b\u5bc6\u7801\uff1a</p> <p>\u2460 set global validate_password_policy=0;</p> <p>\u2461 set global validate_password_length=1;</p> <p>\u2462 alter user 'root'@'localhost' identified by '\u5bc6\u7801@';</p> <p>\u2463 flush privileges;</p>"},{"location":"mysqldatabase/MYSQLinstall/#_4","title":"\u8bbe\u7f6e\u914d\u7f6e\u6587\u4ef6","text":"<p>\u5728/etc/my.cnf\u91cc\u9762</p> <p>port:\u7aef\u53e3\u53f7</p> <p>datadir:\u672a\u6765MySQL\u5efa\u8868\u5efa\u5e93\u7684\u5730\u65b9</p> <p>\u52a0\u5165:character-set-server=utf8\u3001default-storage-engine=innodb,\u914d\u7f6e\u4e4b\u540e\u91cd\u542f\u4e00\u4e0bMySQL\u5c31\u884c\u4e86</p> <p>\u5f00\u673a\u81ea\u52a8\u542f\u52a8:systemctl enable mysqld\u3001systemctl daemon-reload</p>"},{"location":"mysqldatabase/MySQL%20basic%20queries/","title":"MySQL\u7684\u57fa\u672c\u67e5\u8be2","text":""},{"location":"mysqldatabase/MySQL%20basic%20queries/#insert","title":"\u57fa\u672cInsert","text":"<pre><code>CREATE TABLE students (\nid INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,\nsn INT NOT NULL UNIQUE COMMENT '\u5b66\u53f7',\nname VARCHAR(20) NOT NULL,\nqq VARCHAR(20)\n);\n</code></pre> <p>INSERT [INTO] table_name[(column [, column] ...)] VALUES (value_list) [, (value_list)] ...</p> <p>\u6307\u5b9a\u4e86column\u5c31\u53ea\u80fd\u6307\u5b9a\u63d2\u5165,\u5982\u679c\u4e0d\u5199column\u90a3\u4e48\u5c31\u662f\u5168\u5217\u63d2\u5165,values\u540e\u9762\u53ef\u4ee5\u52a0\u5165\u591a\u7ec4\u6570\u636e,\u8981\u52a0\u9017\u53f7\u5206\u9694\u5f00.</p> <p>\u63d2\u5165\u66ff\u63621</p> <p>insert into students (id, sn, name) values (100, 10010, '\u5510\u5927\u5e08') on duplicate key update sn = 10010, name = '\u5510\u5927\u5e08';</p> <p>-- 0 row affected: \u8868\u4e2d\u6709\u51b2\u7a81\u6570\u636e\uff0c\u4f46\u51b2\u7a81\u6570\u636e\u7684\u503c\u548c update \u7684\u503c\u76f8\u7b49</p> <p>-- 1 row affected: \u8868\u4e2d\u6ca1\u6709\u51b2\u7a81\u6570\u636e\uff0c\u6570\u636e\u88ab\u63d2\u5165</p> <p>-- 2 row affected: \u8868\u4e2d\u6709\u51b2\u7a81\u6570\u636e\uff0c\u5e76\u4e14\u6570\u636e\u5df2\u7ecf\u88ab\u66f4\u65b0</p> <p>-- \u901a\u8fc7 MySQL \u51fd\u6570\u83b7\u53d6\u53d7\u5230\u5f71\u54cd\u7684\u6570\u636e\u884c\u6570 SELECT ROW_COUNT();</p> <p>\u63d2\u5165\u66ff\u63622</p> <p>replace into students (sn, name) values (20001,'\u66f9\u64cd');</p> <p>-- 1 row affected: \u8868\u4e2d\u6ca1\u6709\u51b2\u7a81\u6570\u636e\uff0c\u6570\u636e\u88ab\u63d2\u5165 -- 2 row affected: \u8868\u4e2d\u6709\u51b2\u7a81\u6570\u636e\uff0c\u5220\u9664\u540e\u91cd\u65b0\u63d2\u5165</p>"},{"location":"mysqldatabase/MySQL%20basic%20queries/#select","title":"\u57fa\u672cselect","text":"<pre><code>CREATE TABLE exam_result (\nid INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,\nname VARCHAR(20) NOT NULL COMMENT '\u540c\u5b66\u59d3\u540d',\nchinese float DEFAULT 0.0 COMMENT '\u8bed\u6587\u6210\u7ee9',\nmath float DEFAULT 0.0 COMMENT '\u6570\u5b66\u6210\u7ee9',\nenglish float DEFAULT 0.0 COMMENT '\u82f1\u8bed\u6210\u7ee9'\n);\n\n\nINSERT INTO exam_result (name, chinese, math, english) VALUES\n('\u5510\u4e09\u85cf', 67, 98, 56),\n('\u5b59\u609f\u7a7a', 87, 78, 77),\n('\u732a\u609f\u80fd', 88, 98, 90),\n('\u66f9\u5b5f\u5fb7', 82, 84, 67),\n('\u5218\u7384\u5fb7', 55, 85, 45),\n('\u5b59\u6743', 70, 73, 78),\n('\u5b8b\u516c\u660e', 75, 65, 30);\n</code></pre> <p>\u5168\u5217\u67e5\u8be2:SELECT * FROM exam_result;</p> <p>\u6307\u5b9a\u5217\u67e5\u8be2:SELECT id, name, english FROM exam_result;</p> <p>\u67e5\u8be2\u5b57\u6bb5\u4e3a\u8868\u8fbe\u5f0f:SELECT id, name, chinese+math+english FROM exam_result;</p> <p>\u4e3a\u67e5\u8be2\u7ed3\u679c\u6307\u5b9a\u522b\u540d:SELECT id, name, chinese + math + english \u603b\u5206 FROM exam_result;</p> <p>\u7ed3\u679c\u53bb\u91cd:select distinct math from exam_result;</p> <p>where\u6761\u4ef6</p> \u8fd0\u7b97\u7b26 \u8bf4\u660e &gt;, &gt;=, &lt;, &lt;= \u5927\u4e8e\uff0c\u5927\u4e8e\u7b49\u4e8e\uff0c\u5c0f\u4e8e\uff0c\u5c0f\u4e8e\u7b49\u4e8e = \u7b49\u4e8e\uff0cNULL \u4e0d\u5b89\u5168\uff0c\u4f8b\u5982 NULL = NULL \u7684\u7ed3\u679c\u662f NULL &lt;=&gt; \u7b49\u4e8e\uff0cNULL \u5b89\u5168\uff0c\u4f8b\u5982 NULL &lt;=&gt; NULL \u7684\u7ed3\u679c\u662f TRUE(1) !=, &lt;&gt; \u4e0d\u7b49\u4e8e BETWEEN a0 AND a1 \u8303\u56f4\u5339\u914d\uff0c[a0, a1]\uff0c\u5982\u679c a0 &lt;= value &lt;= a1\uff0c\u8fd4\u56de TRUE(1) IN (option, ...) \u5982\u679c\u662f option \u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\uff0c\u8fd4\u56de TRUE(1) IS NULL \u662f NULL IS NOT NULL \u4e0d\u662f NULL LIKE \u6a21\u7cca\u5339\u914d\u3002% \u8868\u793a\u4efb\u610f\u591a\u4e2a\uff08\u5305\u62ec 0 \u4e2a\uff09\u4efb\u610f\u5b57\u7b26\uff1b_ \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26 <p>\u903b\u8f91\u8fd0\u7b97\u7b26:</p> \u8fd0\u7b97\u7b26 \u8bf4\u660e AND \u591a\u4e2a\u6761\u4ef6\u5fc5\u987b\u90fd\u4e3a TRUE(1)\uff0c\u7ed3\u679c\u624d\u662f TRUE(1) OR \u4efb\u610f\u4e00\u4e2a\u6761\u4ef6\u4e3a TRUE(1), \u7ed3\u679c\u4e3a TRUE(1) NOT \u6761\u4ef6\u4e3a TRUE(1)\uff0c\u7ed3\u679c\u4e3a FALSE(0) <p>\u82f1\u8bed\u4e0d\u53ca\u683c\u7684\u540c\u5b66\u53ca\u82f1\u8bed\u6210\u7ee9:select name english from exam_result where english &lt; 60;</p> <p>\u8bed\u6587\u6210\u7ee9\u5728 [80, 90] \u5206\u7684\u540c\u5b66\u53ca\u8bed\u6587\u6210\u7ee9:SELECT name, chinese FROM exam_result WHERE chinese &gt;= 80 AND chinese &lt;= 90;</p> <p>\u6570\u5b66\u6210\u7ee9\u662f 58 \u6216\u8005 59 \u6216\u8005 98 \u6216\u8005 99 \u5206\u7684\u540c\u5b66\u53ca\u6570\u5b66\u6210\u7ee9:SELECT name, math FROM exam_result WHERE math IN (58, 59, 98, 99);</p> <p>\u59d3\u5b59\u7684\u540c\u5b66 \u53ca \u5b59\u67d0\u540c\u5b66:SELECT name FROM exam_result WHERE name LIKE '\u5b59%';SELECT name FROM exam_result WHERE name LIKE '\u5b59_';</p> <p>\u8bed\u6587\u6210\u7ee9\u597d\u4e8e\u82f1\u8bed\u6210\u7ee9\u7684\u540c\u5b66:SELECT name, chinese, english FROM exam_result WHERE chinese &gt; english;</p> <p>\u603b\u5206\u5728 200 \u5206\u4ee5\u4e0b\u7684\u540c\u5b66:SELECT name, chinese + math + english \u603b\u5206 FROM exam_result WHERE chinese + math + english &lt; 200;</p> <p>\u6ce8:Chinese + math + english &lt; 200 \u4e0d\u80fd\u7b80\u5199,\u5148from exam_result , \u518d Chinese + math + english &lt; 200, \u6700\u540e\u624d\u662fselect\u641c\u7d22</p> <p>\u8bed\u6587\u6210\u7ee9 &gt; 80 \u5e76\u4e14\u4e0d\u59d3\u5b59\u7684\u540c\u5b66:SELECT name, chinese FROM exam_result WHERE chinese &gt; 80 AND name NOT LIKE '\u5b59%';</p> <p>\u5b59\u67d0\u540c\u5b66\uff0c\u5426\u5219\u8981\u6c42\u603b\u6210\u7ee9 &gt; 200 \u5e76\u4e14 \u8bed\u6587\u6210\u7ee9 &lt; \u6570\u5b66\u6210\u7ee9 \u5e76\u4e14 \u82f1\u8bed\u6210\u7ee9 &gt; 80:</p> <pre><code>SELECT name, chinese, math, english, chinese + math + english \u603b\u5206\nFROM exam_result\nWHERE name LIKE '\u5b59_' OR (\nchinese + math + english &gt; 200 AND chinese &lt; math AND english &gt; 80\n);\n</code></pre> <p>NULL \u7684\u67e5\u8be2:SELECT name, qq FROM students WHERE qq IS NOT NULL;</p> <p>\u7ed3\u679c\u6392\u5e8f</p> <p>\u8bed\u6cd5:</p> <pre><code>SELECT ... FROM table_name [WHERE ...] ORDER BY column [ASC|DESC], [...];\n</code></pre> <ul> <li>\u9ed8\u8ba4\u662f\u5347\u5e8f</li> <li>NULL \u89c6\u4e3a\u6bd4\u4efb\u4f55\u503c\u90fd\u5c0f\uff0c\u5347\u5e8f\u51fa\u73b0\u5728\u6700\u4e0a\u9762</li> <li>ORDER BY \u4e2d\u53ef\u4ee5\u4f7f\u7528\u8868\u8fbe\u5f0f</li> <li>ORDER BY \u5b50\u53e5\u4e2d\u53ef\u4ee5\u4f7f\u7528\u5217\u522b\u540d(\u56e0\u4e3a\u662f\u73b0\u6709\u6570\u636e\uff0c\u624d\u6765\u6392\u5e8f)</li> </ul> <p>limit:</p> <p>\u4ece 0 \u5f00\u59cb\uff0c\u7b5b\u9009 n \u6761\u7ed3\u679c:limit n</p> <p>\u4ece s \u5f00\u59cb\uff0c\u7b5b\u9009 n \u6761\u7ed3\u679c:limit s, n</p> <p>\u4ece s \u5f00\u59cb\uff0c\u7b5b\u9009 n \u6761\u7ed3\u679c\uff0c\u6bd4\u7b2c\u4e8c\u79cd\u7528\u6cd5\u66f4\u660e\u786e\uff0c\u5efa\u8bae\u4f7f\u7528: limit n offset s</p> <p>\u5efa\u8bae\uff1a\u5bf9\u672a\u77e5\u8868\u8fdb\u884c\u67e5\u8be2\u65f6\uff0c\u6700\u597d\u52a0\u4e00\u6761 LIMIT 1\uff0c\u907f\u514d\u56e0\u4e3a\u8868\u4e2d\u6570\u636e\u8fc7\u5927\uff0c\u67e5\u8be2\u5168\u8868\u6570\u636e\u5bfc\u81f4\u6570\u636e\u5e93\u5361\u6b7b</p>"},{"location":"mysqldatabase/MySQL%20basic%20queries/#update","title":"update","text":"<p>\u8bed\u6cd5:UPDATE table_name SET column = expr [, column = expr ...][WHERE ...] [ORDER BY ...] [LIMIT ...]</p> <p>\u5c06\u5b59\u609f\u7a7a\u540c\u5b66\u7684\u6570\u5b66\u6210\u7ee9\u53d8\u66f4\u4e3a 80 \u5206:SELECT name, math FROM exam_result WHERE name = '\u5b59\u609f\u7a7a';</p> <p>\u5c06\u603b\u6210\u7ee9\u5012\u6570\u524d\u4e09\u7684 3 \u4f4d\u540c\u5b66\u7684\u6570\u5b66\u6210\u7ee9\u52a0\u4e0a 30 \u5206:UPDATE exam_result SET math = math + 30 ORDER BY chinese + math + english LIMIT 3;</p> <p>\u5c06\u6240\u6709\u540c\u5b66\u7684\u8bed\u6587\u6210\u7ee9\u66f4\u65b0\u4e3a\u539f\u6765\u7684 2 \u500d: UPDATE exam_result SET chinese = chinese * 2;</p> <p>\u6ce8:MySQL\u91cc\u9762\u4e0d\u80fd\u7b80\u5199*=\u7c7b\u4f3c\u8fd9\u7c7b</p>"},{"location":"mysqldatabase/MySQL%20basic%20queries/#delete","title":"delete","text":"<p>\u8bed\u6cd5:DELETE FROM table_name [WHERE ...] [ORDER BY ...] [LIMIT ...]</p> <p>\u5220\u9664\u5b59\u609f\u7a7a\u540c\u5b66\u7684\u8003\u8bd5\u6210\u7ee9:DELETE FROM exam_result WHERE name = '\u5b59\u609f\u7a7a';</p> <p>\u5220\u9664\u6574\u8868\u6570\u636e:DELETE FROM for_delete;</p> <p>\u622a\u65ad\u6574\u8868\u6570\u636e\uff0c\u6ce8\u610f\u5f71\u54cd\u884c\u6570\u662f 0:TRUNCATE [TABLE] table_name</p> <p>truncate:</p> <ol> <li>\u53ea\u80fd\u5bf9\u6574\u8868\u64cd\u4f5c\uff0c\u4e0d\u80fd\u50cf DELETE \u4e00\u6837\u9488\u5bf9\u90e8\u5206\u6570\u636e\u64cd\u4f5c\uff1b</li> <li>\u5b9e\u9645\u4e0a MySQL \u4e0d\u5bf9\u6570\u636e\u64cd\u4f5c(\u4e0d\u4f1a\u8bb0\u5f55\u5728\u65e5\u5fd7\u91cc)\uff0c\u6240\u4ee5\u6bd4 DELETE \u66f4\u5feb\uff0c\u4f46\u662fTRUNCATE\u5728\u5220\u9664\u6570\u636e\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u7ecf\u8fc7\u771f\u6b63\u7684\u4e8b \u7269\uff0c\u6240\u4ee5\u65e0\u6cd5\u56de\u6eda</li> <li>\u4f1a\u91cd\u7f6e AUTO_INCREMENT \u9879(delete\u4e0d\u4f1a\u91cd\u7f6e)</li> </ol> <p>\u65e5\u5fd7:</p> <p>bin log(1.\u5386\u53f2\u4e0a\u6240\u64cd\u4f5c\u7684\u6240\u4ee5\u8bed\u53e5,MySQL\u4f18\u5316\u540e,\u4f1a\u4fdd\u7559\u4e0b\u6765 2.\u8bb0\u5f55\u6570\u636e\u672c\u8eab \u4ece\u800c\u4e3b\u4ece\u540c\u6b65)/redo log(\u91cd\u505a\u65e5\u5fd7,\u4fdd\u8bc1MySQL\u5b95\u673a,\u4fdd\u5b58\u4e0b\u6765)/undo log(\u4e8b\u52a1\u56de\u6eda,\u4e8b\u52a1\u7684\u9694\u79bb\u6027)</p> <p>\u53bb\u91cd\u8868\u64cd\u4f5c:</p> <ol> <li>CREATE TABLE no_duplicate_table LIKE duplicate_table;(\u7a7a\u8868,\u4f46\u7ed3\u6784\u548cduplicate_table\u4e00\u6837)</li> <li>INSERT INTO no_duplicate_table SELECT DISTINCT * FROM duplicate_table;(distinct\u53bb\u91cd)</li> <li>RENAME TABLE duplicate_table TO old_duplicate_table, no_duplicate_table TO duplicate_table;(\u91cd\u547d\u540d)</li> </ol> <p>\u4e3a\u4ec0\u4e48\u6700\u540e\u662frename\u65b9\u5f0f\u8fdb\u884c\u7684\uff1f\u5c31\u662f\u5355\u7eaf\u7684\u7b49\u4e00\u5207\u90fd\u5c31\u7eea\u4e86\uff0c\u7136\u540e\u7edf\u4e00\u653e\u5165\u3001\u66f4\u65b0\u3001\u751f\u6548.</p>"},{"location":"mysqldatabase/MySQL%20basic%20queries/#_1","title":"\u805a\u5408\u51fd\u6570","text":"\u51fd\u6570 \u8bf4\u660e COUNT([DISTINCT] expr) \u8fd4\u56de\u67e5\u8be2\u5230\u7684\u6570\u636e\u7684 \u6570\u91cf SUM([DISTINCT] expr) \u8fd4\u56de\u67e5\u8be2\u5230\u7684\u6570\u636e\u7684 \u603b\u548c\uff0c\u4e0d\u662f\u6570\u5b57\u6ca1\u6709\u610f\u4e49 AVG([DISTINCT] expr) \u8fd4\u56de\u67e5\u8be2\u5230\u7684\u6570\u636e\u7684 \u5e73\u5747\u503c\uff0c\u4e0d\u662f\u6570\u5b57\u6ca1\u6709\u610f\u4e49 MAX([DISTINCT] expr) \u8fd4\u56de\u67e5\u8be2\u5230\u7684\u6570\u636e\u7684 \u6700\u5927\u503c\uff0c\u4e0d\u662f\u6570\u5b57\u6ca1\u6709\u610f\u4e49 MIN([DISTINCT] expr) \u8fd4\u56de\u67e5\u8be2\u5230\u7684\u6570\u636e\u7684 \u6700\u5c0f\u503c\uff0c\u4e0d\u662f\u6570\u5b57\u6ca1\u6709\u610f\u4e49 <p>\u7edf\u8ba1\u73ed\u7ea7\u5171\u6709\u591a\u5c11\u540c\u5b66:SELECT COUNT(*) FROM students;</p> <p>\u7edf\u8ba1\u6570\u5b66\u6210\u7ee9\u603b\u5206:SELECT SUM(math) FROM exam_result;</p> <p>\u7edf\u8ba1\u5e73\u5747\u603b\u5206:SELECT AVG(chinese + math + english) \u5e73\u5747\u603b\u5206 FROM exam_result;</p> <p>\u82f1\u8bed\u6700\u9ad8\u5206:SELECT MAX(english) FROM exam_result;</p> <p>\u8fd4\u56de &gt; 70 \u5206\u4ee5\u4e0a\u7684\u6570\u5b66\u6700\u4f4e\u5206:SELECT MIN(math) FROM exam_result WHERE math &gt; 70;</p>"},{"location":"mysqldatabase/MySQL%20basic%20queries/#_2","title":"\u5206\u7ec4\u805a\u5408\u7edf\u8ba1","text":"<p>group by</p> <p>\u8bed\u6cd5:select column1, column2, .. from table group by column;</p> <p>\u5206\u7ec4\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u8fdb\u884c\u5206\u7ec4\u4e4b\u540e\uff0c\u65b9\u4fbf\u8fdb\u884c\u805a\u5408\u7edf\u8ba1</p> <p>\u6307\u5b9a\u5217\u540d\uff0c\u5b9e\u9645\u5206\u7ec4\uff0c\u662f\u7528\u8be5\u5217\u7684\u4e0d\u540c\u884c\u6570\u636e\u6765\u8fdb\u884c\u5206\u7ec4\uff0c\u7ec4\u5185\u7684\u6761\u4ef6\u4e00\u5b9a\u662f\u76f8\u540c\u7684--\u53ef\u4ee5\u88ab\u805a\u5408\u538b\u7f29</p> <p>\u5206\u7ec4\u5c31\u662f\u628a\u4e00\u7ec4\u6309\u6761\u4ef6\u62c6\u5206\u6210\u4e86\u591a\u4e2a\u7ec4\uff0c\u8fdb\u884c\u5404\u81ea\u7ec4\u5185\u7684\u7edf\u8ba1\uff0c\u5206\u7ec4(\u5206\u8868)\uff0c\u4e0d\u5c31\u662f\u628a\u4e00\u5f20\u8868\u5b89\u88c5\u6761\u4ef6\u5728\u903b\u8f91\u4e0a\u62c6\u6210\u4e86\u591a\u4e2a\u5b50\u8868\uff0c\u7136\u540e\u5206\u522b\u5bf9\u5404\u81ea\u7684\u5b50\u8868\u8fdb\u884c\u805a\u5408\u7edf\u8ba1</p> <p>having</p> <p>\u662f\u5bf9\u805a\u5408\u540e\u7684\u7edf\u8ba1\u6570\u636e,\u6761\u4ef6\u7b5b\u9009</p> <p>where\u548chaving\u7684\u533a\u522b:</p> <p>where:\u5bf9\u5177\u4f53\u7684\u4efb\u610f\u5217\u8fdb\u884c\u6761\u4ef6\u7b5b\u9009</p> <p>having:\u5bf9\u5206\u7ec4\u4e4b\u540e\u7684\u7ed3\u679c\u8fdb\u884c\u6761\u4ef6\u7b5b\u9009 </p> <p>\u9636\u6bb5:from-&gt;where-&gt;gourp by-&gt;select-&gt;having</p> <p>\u4e0d\u8981\u5355\u7eaf\u8ba4\u4e3a,\u53ea\u6709\u78c1\u76d8\u4e0a\u7684\u8868\u7ed3\u6784\u5bfc\u5165\u5230MySQL\uff0c\u771f\u5b9e\u5b58\u5728\u7684\u8868\uff0c\u624d\u53eb\u505a\u8868</p> <p>\u4e2d\u95f4\u7b5b\u9009\u51fa\u6765\u7684\uff0c\u5305\u62ec\u6700\u7ec8\u7ed3\u679c\uff0c\u5168\u90e8\u90fd\u662f\u903b\u8f91\u4e0a\u7684\u8868\uff01\u201cMySQL\u4e00\u5207\u7686\u8868\u201d</p> <p>\u672a\u6765\u53ea\u8981\u6211\u4eec\u80fd\u591f\u5904\u7406\u597d\u5355\u8868\u7684CURD\uff0c\u6240\u6709\u7684sql\u573a\u666f\uff0c\u6211\u4eec\u90fd\u80fd\u7528\u7edf\u4e00\u7684\u65b9\u5f0f\u8fdb\u884c</p>"},{"location":"mysqldatabase/Table%20constraints/","title":"MySQL\u8868\u7684\u7ea6\u675f","text":""},{"location":"mysqldatabase/Table%20constraints/#_1","title":"\u6982\u5ff5","text":"<p>\u8868\u7684\u7ea6\u675f:\u8868\u4e2d\u4e00\u5b9a\u8981\u5404\u79cd\u7ea6\u675f,\u901a\u8fc7\u7ea6\u675f,\u8ba9\u6211\u4eec\u672a\u6765\u63d2\u5165\u6570\u636e\u5e93\u8868\u4e2d\u7684\u6570\u636e\u662f\u7b26\u5408\u9884\u671f\u7684.\u7ea6\u675f\u672c\u8d28\u662f\u901a\u8fc7\u6280\u672f\u624b\u6bb5,\u5012\u903c\u7a0b\u5e8f\u5458,\u63d2\u5165\u6b63\u786e\u7684\u6570\u636e.\u53cd\u8fc7\u6765,\u7ad9\u5728MySQL\u7684\u89c6\u89d2, \u51e1\u662f\u63d2\u5165\u8fdb\u6765\u7684\u6570\u636e,\u90fd\u662f\u7b26\u5408\u6570\u636e\u7ea6\u675f\u7684.</p> <p>\u7ea6\u675f\u7684\u6700\u7ec8\u76ee\u7684:\u4fdd\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\u548c\u53ef\u9884\u671f\u6027.</p>"},{"location":"mysqldatabase/Table%20constraints/#_2","title":"\u975e\u7a7a\u7ea6\u675f","text":"<ul> <li>\u4e24\u4e2a\u503c\uff1anull\uff08\u9ed8\u8ba4\u7684\uff09\u548cnot null(\u4e0d\u4e3a\u7a7a)</li> <li>\u6570\u636e\u5e93\u9ed8\u8ba4\u5b57\u6bb5\u57fa\u672c\u90fd\u662f\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u4f46\u662f\u5b9e\u9645\u5f00\u53d1\u65f6\uff0c\u5c3d\u53ef\u80fd\u4fdd\u8bc1\u5b57\u6bb5\u4e0d\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u6570\u636e\u4e3a\u7a7a\u6ca1\u529e\u6cd5\u53c2\u4e0e\u8fd0 \u7b97\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>create table myclass(\n class_name varchar(20) not null,\n class_room varchar(10) not null);\n</code></pre> <p>\u63d2\u5165\u4e3a\u7a7a\u5c31\u62a5\u9519,\u793a\u4f8b:</p> <pre><code>mysql&gt; insert into myclass(class_name) values('class1');\nERROR 1364 (HY000): Field 'class_room' doesn't have a default value\n</code></pre>"},{"location":"mysqldatabase/Table%20constraints/#default","title":"default\u7ea6\u675f","text":"<p>default:\u5982\u679c\u8bbe\u7f6e\u4e86,\u7528\u6237\u5c06\u6765\u63d2\u5165.\u6709\u5177\u4f53\u6570\u636e,\u5c31\u7528\u7528\u6237\u7684,\u6ca1\u6709\u5c31\u9ed8\u8ba4\u7684.</p> <p>\u5982\u679c\u6211\u4eec\u6ca1\u6709\u660e\u786e\u6307\u5b9a\u4e00\u5217\u8981\u63d2\u5165,\u7528\u7684\u662fdefault,\u5982\u679c\u5efa\u8868\u4e2d,\u5bf9\u5e94\u5217\u9ed8\u8ba4\u6ca1\u6709default\u503c,\u65e0\u6cd5\u76f4\u63a5\u63d2\u5165.</p> <p>default\u548cnot null\u4e0d\u51b2\u7a81,\u800c\u662f\u76f8\u4e92\u8865\u5145\u7684.\u5f53\u7528\u6237\u60f3\u63d2\u5165(NULL, \u5408\u6cd5\u6570\u636e).\u5f53\u7528\u6237\u5ffd\u7565\u8fd9\u4e00\u5217\u7684\u65f6\u5019,\u4f7f\u7528\u9ed8\u8ba4\u503c(\u5982\u679c\u8bbe\u7f6e\u4e86),\u5982\u679c\u7528\u6237\u6ca1\u6709\u8bbe\u7f6e,\u76f4\u63a5\u62a5\u9519.</p> <p>\u5982\u679c\u6ca1\u6709\u5199not null\u3001\u4e5f\u6ca1\u6709\u5199default,\u4ed6\u9ed8\u8ba4\u4f1a\u751f\u6210\u4e00\u4e2adefault NULL,\u5982\u679c\u5199\u4e86not null\uff0c\u90a3\u4e48\u4e0d\u518d\u751f\u6210default,\u9700\u8981\u81ea\u5df1\u6dfb\u52a0,\u6216\u8005\u5728\u5199\u5165\u65f6\u4e0d\u7701\u7565\u6539\u5217.</p>"},{"location":"mysqldatabase/Table%20constraints/#_3","title":"\u5217\u63cf\u8ff0","text":"<p>\u5217\u63cf\u8ff0\uff1acomment\uff0c\u6ca1\u6709\u5b9e\u9645\u542b\u4e49\uff0c\u4e13\u95e8\u7528\u6765\u63cf\u8ff0\u5b57\u6bb5\uff0c\u4f1a\u6839\u636e\u8868\u521b\u5efa\u8bed\u53e5\u4fdd\u5b58\uff0c\u7528\u6765\u7ed9\u7a0b\u5e8f\u5458\u6216DBA\u6765\u8fdb\u884c\u4e86 \u89e3\u3002</p>"},{"location":"mysqldatabase/Table%20constraints/#zerofill","title":"zerofill","text":"<pre><code>Create Table: CREATE TABLE `tt3` (\n`a` int(5) unsigned zerofill DEFAULT NULL, --\u5177\u6709\u4e86zerofill\n`b` int(10) unsigned DEFAULT NULL\n);\n</code></pre> <p>\u539f\u6765\u76841\u53d8\u621000001\uff0c\u8fd9\u5c31\u662fzerofill\u5c5e\u6027\u7684\u4f5c\u7528\uff0c\u5982\u679c\u5bbd\u5ea6\u5c0f\u4e8e\u8bbe\u5b9a\u7684\u5bbd\u5ea6\uff08\u8fd9\u91cc\u8bbe\u7f6e\u7684\u662f 5\uff09\uff0c\u81ea\u52a8\u586b\u51450\u3002\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u53ea\u662f\u6700\u540e\u663e\u793a\u7684\u7ed3\u679c\uff0c\u5728MySQL\u4e2d\u5b9e\u9645\u5b58\u50a8\u7684\u8fd8\u662f1\u3002</p>"},{"location":"mysqldatabase/Table%20constraints/#_4","title":"\u4e3b\u952e","text":"<p>\u4e3b\u952e\uff1aprimary key\u7528\u6765\u552f\u4e00\u7684\u7ea6\u675f\u8be5\u5b57\u6bb5\u91cc\u9762\u7684\u6570\u636e\uff0c\u4e0d\u80fd\u91cd\u590d\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e00\u5f20\u8868\u4e2d\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u952e\uff1b\u4e3b\u952e \u6240\u5728\u7684\u5217\u901a\u5e38\u662f\u6574\u6570\u7c7b\u578b\u3002</p> <ul> <li>\u521b\u5efa\u8868\u7684\u65f6\u5019\u76f4\u63a5\u5728\u5b57\u6bb5\u4e0a\u6307\u5b9a\u4e3b\u952e</li> </ul> <pre><code>create table tt13 (\n id int unsigned primary key comment '\u5b66\u53f7\u4e0d\u80fd\u4e3a\u7a7a',\n name varchar(20) not null\n);\n</code></pre> <ul> <li> <p>\u4e3b\u952e\u7ea6\u675f\uff1a\u4e3b\u952e\u5bf9\u5e94\u7684\u5b57\u6bb5\u4e2d\u4e0d\u80fd\u91cd\u590d\uff0c\u4e00\u65e6\u91cd\u590d\uff0c\u64cd\u4f5c\u5931\u8d25\u3002</p> </li> <li> <p>\u5f53\u8868\u521b\u5efa\u597d\u4ee5\u540e\u4f46\u662f\u6ca1\u6709\u4e3b\u952e\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u518d\u6b21\u8ffd\u52a0\u4e3b\u952e</p> </li> </ul> <p>alter table \u8868\u540d add primary key(\u5b57\u6bb5\u5217\u8868)</p> <ul> <li>\u5220\u9664\u4e3b\u952e</li> </ul> <p>alter table \u8868\u540d drop primary key;</p> <ul> <li>\u590d\u5408\u4e3b\u952e</li> </ul> <p>\u5728\u521b\u5efa\u8868\u7684\u65f6\u5019\uff0c\u5728\u6240\u6709\u5b57\u6bb5\u4e4b\u540e\uff0c\u4f7f\u7528primary key(\u4e3b\u952e\u5b57\u6bb5\u5217\u8868)\u6765\u521b\u5efa\u4e3b\u952e\uff0c\u5982\u679c\u6709\u591a\u4e2a\u5b57\u6bb5\u4f5c\u4e3a\u4e3b\u952e\uff0c \u53ef\u4ee5\u4f7f\u7528\u590d\u5408\u4e3b\u952e\u3002</p> <pre><code>mysql&gt; create table tt14(\n id int unsigned,\n course char(10) comment '\u8bfe\u7a0b\u4ee3\u7801',\n score tinyint unsigned default 60 comment '\u6210\u7ee9',\n primary key(id, course) -- id\u548ccourse\u4e3a\u590d\u5408\u4e3b\u952e\n);\n</code></pre>"},{"location":"mysqldatabase/Table%20constraints/#_5","title":"\u81ea\u589e\u957f","text":"<p>auto_increment\uff1a\u5f53\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u4e0d\u7ed9\u503c\uff0c\u4f1a\u81ea\u52a8\u7684\u88ab\u7cfb\u7edf\u89e6\u53d1\uff0c\u7cfb\u7edf\u4f1a\u4ece\u5f53\u524d\u5b57\u6bb5\u4e2d\u5df2\u7ecf\u6709\u7684\u6700\u5927\u503c+1\u64cd\u4f5c\uff0c\u5f97 \u5230\u4e00\u4e2a\u65b0\u7684\u4e0d\u540c\u7684\u503c\u3002\u901a\u5e38\u548c\u4e3b\u952e\u642d\u914d\u4f7f\u7528\uff0c\u4f5c\u4e3a\u903b\u8f91\u4e3b\u952e.</p> <p>\u81ea\u589e\u957f\u7684\u7279\u70b9: + \u4efb\u4f55\u4e00\u4e2a\u5b57\u6bb5\u8981\u505a\u81ea\u589e\u957f\uff0c\u524d\u63d0\u662f\u672c\u8eab\u662f\u4e00\u4e2a\u7d22\u5f15\uff08key\u4e00\u680f\u6709\u503c\uff09 + \u81ea\u589e\u957f\u5b57\u6bb5\u5fc5\u987b\u662f\u6574\u6570 + \u4e00\u5f20\u8868\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u81ea\u589e\u957f + \u5728\u63d2\u5165\u540e\u83b7\u53d6\u4e0a\u6b21\u63d2\u5165\u7684 AUTO_INCREMENT \u7684\u503c\uff08\u6279\u91cf\u63d2\u5165\u83b7\u53d6\u7684\u662f\u7b2c\u4e00\u4e2a\u503c\uff09</p> <pre><code>create table tt21(\n id int unsigned primary key auto_increment,\n name varchar(10) not null default ''\n )auto_increment = 500;\n ```\n\n select last_insert_id():\u6700\u65b0\u8868\u7684auto_increment\u7684\u503c.\n\n ## \u552f\u4e00\u952e\n\n \u4e00\u5f20\u8868\u4e2d\u6709\u5f80\u5f80\u6709\u5f88\u591a\u5b57\u6bb5\u9700\u8981\u552f\u4e00\u6027\uff0c\u6570\u636e\u4e0d\u80fd\u91cd\u590d\uff0c\u4f46\u662f\u4e00\u5f20\u8868\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u952e\uff1a\u552f\u4e00\u952e\u5c31\u53ef\u4ee5\u89e3\u51b3\u8868\u4e2d\u6709\u591a\u4e2a\u5b57\u6bb5\u9700\u8981\u552f\u4e00\u6027\u7ea6\u675f\u7684\u95ee\u9898\u3002\n\n\u552f\u4e00\u952e\u7684\u672c\u8d28\u548c\u4e3b\u952e\u5dee\u4e0d\u591a\uff0c\u552f\u4e00\u952e\u5141\u8bb8\u4e3a\u7a7a\uff0c\u800c\u4e14\u53ef\u4ee5\u591a\u4e2a\u4e3a\u7a7a\uff0c\u7a7a\u5b57\u6bb5\u4e0d\u505a\u552f\u4e00\u6027\u6bd4\u8f83\u3002\n\n\u5173\u4e8e\u552f\u4e00\u952e\u548c\u4e3b\u952e\u7684\u533a\u522b\uff1a\n\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u6210\uff0c\u4e3b\u952e\u66f4\u591a\u7684\u662f\u6807\u8bc6\u552f\u4e00\u6027\u7684\u3002\u800c\u552f\u4e00\u952e\u66f4\u591a\u7684\u662f\u4fdd\u8bc1\u5728\u4e1a\u52a1\u4e0a\uff0c\u4e0d\u8981\u548c\u522b\u7684\u4fe1\u606f\u51fa\u73b0\u91cd\u590d\u3002\n\n## \u5916\u952e\n\n\u5916\u952e\u7528\u4e8e\u5b9a\u4e49\u4e3b\u8868\u548c\u4ece\u8868\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a\u5916\u952e\u7ea6\u675f\u4e3b\u8981\u5b9a\u4e49\u5728\u4ece\u8868\u4e0a\uff0c\u4e3b\u8868\u5219\u5fc5\u987b\u662f\u6709\u4e3b\u952e\u7ea6\u675f\u6216unique\u7ea6\u675f\u3002\u5f53\u5b9a\n\u4e49\u5916\u952e\u540e\uff0c\u8981\u6c42\u5916\u952e\u5217\u6570\u636e\u5fc5\u987b\u5728\u4e3b\u8868\u7684\u4e3b\u952e\u5217\u5b58\u5728\u6216\u4e3anull\u3002\n\n**\u8bed\u6cd5**:foreign key (\u5b57\u6bb5\u540d) references \u4e3b\u8868(\u5217)\n\n**\u5148\u521b\u7acb\u4e3b\u952e\u8868**\n```sql\ncreate table myclass (\n    id int primary key,\n    name varchar(30) not null comment'\u73ed\u7ea7\u540d'\n);\n</code></pre> <p>\u518d\u521b\u7acb\u4ece\u8868</p> <pre><code>create table stu (\nid int primary key,\n    name varchar(30) not null comment '\u5b66\u751f\u540d',\n    class_id int,\n    foreign key (class_id) references myclass(id)\n);\n</code></pre> <p>\u6b63\u5e38\u63d2\u5165\u6570\u636e</p> <pre><code>insert into myclass values(10, 'C++\u5927\u725b\u73ed'),(20, 'java\u5927\u795e\u73ed');\n</code></pre> <p>\u63d2\u5165\u4e00\u4e2a\u73ed\u7ea7\u53f7\u4e3a30\u7684\u5b66\u751f\uff0c\u56e0\u4e3a\u6ca1\u6709\u8fd9\u4e2a\u73ed\u7ea7\uff0c\u6240\u4ee5\u63d2\u5165\u4e0d\u6210\u529f</p> <pre><code>insert into stu values(102, 'wangwu',30);\n</code></pre> <p>\u63d2\u5165\u73ed\u7ea7id\u4e3anull\uff0c\u6bd4\u5982\u6765\u4e86\u4e00\u4e2a\u5b66\u751f\uff0c\u76ee\u524d\u8fd8\u6ca1\u6709\u5206\u914d\u73ed\u7ea7</p> <pre><code>insert into stu values(102, 'wangwu', null);\n</code></pre> <p>\u5982\u4f55\u7406\u89e3\u5916\u952e\u7ea6\u675f \u9996\u5148\u6211\u4eec\u627f\u8ba4\uff0c\u8fd9\u4e2a\u4e16\u754c\u662f\u6570\u636e\u5f88\u591a\u90fd\u662f\u76f8\u5173\u6027\u7684\u3002</p> <p>\u7406\u8bba\u4e0a\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u4e0d\u521b\u5efa\u5916\u952e\u7ea6\u675f\uff0c\u5c31\u6b63\u5e38\u5efa\u7acb\u5b66\u751f\u8868\uff0c\u4ee5\u53ca\u73ed\u7ea7\u8868\uff0c\u8be5\u6709\u7684\u5b57\u6bb5\u6211\u4eec\u90fd\u6709\u3002 \u6b64\u65f6\uff0c\u5728\u5b9e\u9645\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4ec0\u4e48\u95ee\u9898\uff1f</p> <p>\u6709\u6ca1\u6709\u53ef\u80fd\u63d2\u5165\u7684\u5b66\u751f\u4fe1\u606f\u4e2d\u6709\u5177\u4f53\u7684\u73ed\u7ea7\uff0c\u4f46\u662f\u8be5\u73ed\u7ea7\u5374\u6ca1\u6709\u5728\u73ed\u7ea7\u8868\u4e2d\uff1f</p> <p>\u6bd4\u5982\u73ed\u7ea7\u53ea\u5f00\u4e86100\u73ed\uff0c101\u73ed\uff0c\u4f46\u662f\u5728\u4e0a\u8bfe\u7684\u5b66\u751f\u91cc\u9762\u7adf\u7136\u6709102\u73ed\u7684\u5b66\u751f(\u8fd9\u4e2a\u73ed\u76ee\u524d\u5e76\u4e0d\u5b58\u5728)\uff0c\u8fd9\u5f88 \u660e\u663e\u662f\u6709\u95ee\u9898\u7684\u3002</p> <p>\u56e0\u4e3a\u6b64\u65f6\u4e24\u5f20\u8868\u5728\u4e1a\u52a1\u4e0a\u662f\u6709\u76f8\u5173\u6027\u7684\uff0c\u4f46\u662f\u5728\u4e1a\u52a1\u4e0a\u6ca1\u6709\u5efa\u7acb\u7ea6\u675f\u5173\u7cfb\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u51fa\u73b0\u95ee\u9898\u3002</p> <p>\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u901a\u8fc7\u5916\u952e\u5b8c\u6210\u7684\u3002\u5efa\u7acb\u5916\u952e\u7684\u672c\u8d28\u5176\u5b9e\u5c31\u662f\u628a\u76f8\u5173\u6027\u4ea4\u7ed9mysql\u53bb\u5ba1\u6838\u4e86\uff0c\u63d0\u524d\u544a\u8bc9mysql\u8868\u4e4b\u95f4\u7684\u7ea6\u675f\u5173 \u7cfb\uff0c\u90a3\u4e48\u5f53\u7528\u6237\u63d2\u5165\u4e0d\u7b26\u5408\u4e1a\u52a1\u903b\u8f91\u7684\u6570\u636e\u7684\u65f6\u5019\uff0cmysql\u4e0d\u5141\u8bb8\u4f60\u63d2\u5165\u3002</p>"},{"location":"mysqldatabase/Table%20operations/","title":"\u8868\u7684\u64cd\u4f5c","text":""},{"location":"mysqldatabase/Table%20operations/#_2","title":"\u521b\u5efa\u8868","text":"<p>\u8bed\u6cd5:</p> <pre><code>CREATE TABLE table_name (\nfield1 datatype,\nfield2 datatype,\nfield3 datatype\n) character set \u5b57\u7b26\u96c6 collate \u6821\u9a8c\u89c4\u5219 engine \u5b58\u50a8\u5f15\u64ce;\n</code></pre> <ul> <li>field \u8868\u793a\u5217\u540d</li> <li>datatype \u8868\u793a\u5217\u7684\u7c7b\u578b</li> <li>character set \u5b57\u7b26\u96c6\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5b57\u7b26\u96c6\uff0c\u5219\u4ee5\u6240\u5728\u6570\u636e\u5e93\u7684\u5b57\u7b26\u96c6\u4e3a\u51c6</li> <li>collate \u6821\u9a8c\u89c4\u5219\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u6821\u9a8c\u89c4\u5219\uff0c\u5219\u4ee5\u6240\u5728\u6570\u636e\u5e93\u7684\u6821\u9a8c\u89c4\u5219\u4e3a\u51c6</li> </ul> <p>\u521b\u5efa\u8868\u6848\u4f8b</p> <p>MyIsam\u5f15\u64ce</p> <pre><code>create table user1 (\nid int,\nname varchar(20) comment '\u7528\u6237\u540d',\npassword char(32) comment '\u5bc6\u7801',\nbirthday date comment '\u751f\u65e5'\n) character set utf8 engine MyIsam;\n</code></pre> <p>/var/lib/mysql/\u6570\u636e\u5e93\u540d\u4f1a\u51fa\u73b0user1.frm\u3001user1.MYD\u3001user1.MYI</p> <p>user1.frm\uff1a\u8868\u7ed3\u6784 user2.MYD\uff1a\u8868\u6570\u636e user3.MYI\uff1a\u8868\u7d22\u5f15</p> <p>innodb\u5f15\u64ce</p> <pre><code>create table user2 (\nid int,\nname varchar(20) comment '\u7528\u6237\u540d',\npassword char(32) comment '\u5bc6\u7801',\nbirthday date comment '\u751f\u65e5'\n) character set utf8 engine=InnoDB;\n</code></pre> <p>/var/lib/mysql/\u6570\u636e\u5e93\u540d\u4f1a\u51fa\u73b0user2.frm\u3001user2.ibd</p>"},{"location":"mysqldatabase/Table%20operations/#_3","title":"\u67e5\u770b\u8868","text":"<p>desc \u8868\u540d;</p>"},{"location":"mysqldatabase/Table%20operations/#_4","title":"\u4fee\u6539\u8868","text":"<p>\u5728user1\u8868\u6dfb\u52a0\u4e8c\u6761\u8bb0\u5f55</p> <p>insert into user1 values(1, '\u5f20\u4e09', '12345', '2010-1-15');</p> <p>insert into user1 values(2, '\u674e\u56db', '54321', '2015-1-15');</p> <p>\u5728user1\u8868\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bb5\uff0c\u7528\u4e8e\u4fdd\u5b58\u56fe\u7247\u8def\u5f84</p> <p>alter table user1 add asserts varchar(100) comment '\u56fe\u7247\u8def\u5f84' after birthday;</p> <p>\u4fee\u6539name\uff0c\u5c06\u5176\u957f\u5ea6\u6539\u621060</p> <p>alter table user1 modify name varchar(60);</p> <p>\u5220\u9664password\u5217</p> <p>\u6ce8\u610f\uff1a\u5220\u9664\u5b57\u6bb5\u4e00\u5b9a\u8981\u5c0f\u5fc3\uff0c\u5220\u9664\u5b57\u6bb5\u53ca\u5176\u5bf9\u5e94\u7684\u5217\u6570\u636e\u90fd\u6ca1\u4e86</p> <p>alter table user1 drop password;</p> <p>\u4fee\u6539\u8868\u540d\u4e3alkt</p> <p>alter table user1 rename to lkt;</p> <p>or</p> <p>alter table user1 rename lkt;</p> <p>\u5c06name\u5217\u4fee\u6539\u4e3axingming</p> <p>alter table lkt change name xingming varchar(60);</p> <p>\u6ce8\u610f:\u4e0d\u8981\u968f\u610f\u6539\u548c\u5220</p>"},{"location":"mysqldatabase/mysql%20Database%20Basics/","title":"\u6570\u636e\u5e93\u57fa\u7840","text":""},{"location":"mysqldatabase/mysql%20Database%20Basics/#_2","title":"\u767b\u5165\u4ecb\u7ecd","text":"<p>MySQL\u76f8\u5173\u7684\u767b\u5165\u9009\u9879</p> <p>-h: \u8fde\u63a5\u7684\u4e3b\u673a</p> <p>-P(\u5927\u5199): \u8bbf\u95ee\u7684\u7aef\u53e3\u53f7</p> <p>-u: \u4ee5\u4ec0\u4e48\u8eab\u4efd\u767b\u5165</p> <p>-p: \u5bc6\u7801</p> <pre><code>mysql -h 127.0.0.1 -P 3306 -u root -p\n</code></pre> <ol> <li>\u76ee\u524d\u662f\u514d\u5bc6\u7801\u767b\u5165\u7684,\u540e\u9762\u5fc5\u987b\u8bbe\u7f6e\u5bc6\u7801</li> <li>\u5bc6\u7801\u8f93\u5165\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u4f1a\u663e\u793a\u7684</li> </ol>"},{"location":"mysqldatabase/mysql%20Database%20Basics/#_3","title":"\u4ec0\u4e48\u662f\u6570\u636e\u5e93","text":"<ol> <li>mysql\u5b83\u662f\u6570\u636e\u5e93\u670d\u52a1\u7684\u5ba2\u6237\u7aef</li> <li>mysql\u5b83\u662f\u6570\u636e\u5e93\u670d\u52a1\u7684\u670d\u52a1\u5668\u7aef</li> <li>mysql\u672c\u8d28: \u57fa\u4e8eC(mysql) S(mysqld)\u6a21\u5f0f\u7684\u4e00\u79cd\u7f51\u7edc\u670d\u52a1</li> </ol> <p>mysql\u662f\u4e00\u5957\u7ed9\u6211\u63d0\u4f9b\u6570\u636e\u5b58\u53d6\u7684\u670d\u52a1\u7684\u7f51\u7edc\u7a0b\u5e8f \u6570\u636e\u5e93\u4e00\u822c\u6307\u7684\u662f,\u5728\u78c1\u76d8\u6216\u8005\u5185\u5b58\u4e2d\u5b58\u50a8\u7684\u7279\u5b9a\u7ed3\u6784\u7ec4\u7ec7\u7684\u6570\u636e--\u5c06\u6765\u5728\u78c1\u76d8\u4e0a\u5b58\u50a8\u7684\u4e00\u5957\u6570\u636e\u5e93\u65b9\u6848 \u6570\u636e\u5e93\u670d\u52a1-mysqld</p> <p>\u4e00\u822c\u6587\u4ef6\u786e\u5b9e\u63d0\u4f9b\u770b\u6570\u636e\u7684\u5b58\u50a8\u529f\u80fd,\u4f46\u662f\u6587\u4ef6\u5e76\u6ca1\u6709\u63d0\u4f9b\u975e\u5e38\u597d\u7684\u6570\u636e\u7ba1\u7406\u80fd\u529b(\u7528\u6237\u89d2\u5ea6) \u6570\u636e\u5e93\u672c\u8d28: \u5bf9\u6570\u636e\u5185\u5bb9\u7684\u4e00\u5957\u89e3\u51b3\u65b9\u6848,\u4f60\u7ed9\u6211\u5b57\u6bb5\u6216\u8005\u8981\u6c42,\u6211\u76f4\u63a5\u7ed9\u4f60\u7ed3\u679c\u5c31\u884c</p> <p>\u6587\u4ef6\u4fdd\u5b58\u6570\u636e\u6709\u4ee5\u4e0b\u51e0\u4e2a\u7f3a\u70b9\uff1a + \u6587\u4ef6\u7684\u5b89\u5168\u6027\u95ee\u9898 + \u6587\u4ef6\u4e0d\u5229\u4e8e\u6570\u636e\u67e5\u8be2\u548c\u7ba1\u7406 + \u6587\u4ef6\u4e0d\u5229\u4e8e\u5b58\u50a8\u6d77\u91cf\u6570\u636e + \u6587\u4ef6\u5728\u7a0b\u5e8f\u4e2d\u63a7\u5236\u4e0d\u65b9\u4fbf</p> <p>\u6570\u636e\u5e93\u5b58\u50a8\u4ecb\u8d28\uff1a + \u78c1\u76d8 + \u5185\u5b58</p>"},{"location":"mysqldatabase/mysql%20Database%20Basics/#_4","title":"\u89c1\u4e00\u89c1\u6570\u636e\u5e93","text":"<p>\u6837\u4f8b:\u4f7f\u7528mysql\u5efa\u7acb\u4e00\u4e2a\u6570\u636e\u5e93 \u5efa\u7acb\u4e00\u5f20\u8868\u7ed3\u6784, \u63d2\u5165\u4e00\u4e9b\u6570\u636e -- \u5bf9\u6bd4\u4e00\u4e0bmysql\u5728Linux\u4e2d\u662f\u5982\u4f55\u8868\u73b0\u7684</p> <p>1.\u5efa\u7acb\u6570\u636e\u5e93,\u672c\u8d28\u5c31\u662f\u5728Linux\u4e0b\u7684\u4e00\u4e2a\u76ee\u5f55</p> <pre><code>create database helloworld;\n</code></pre> <p>2.\u5728\u6570\u636e\u5e93\u5efa\u7acb\u8868,\u672c\u8d28\u5c31\u662f\u5728Linux\u4e0b\u521b\u5efa\u5bf9\u5e94\u7684\u6587\u4ef6\u5373\u53ef\uff01 use helloworld;</p> <pre><code>create table student (\n    name varchar(32),\n    age int,\n    gender char(2)\n);\n</code></pre> <p>3.\u63d2\u5165\u6570\u636e</p> <pre><code>insert into student (name, age, gender) values ('\u5f20\u4e09', 20, '\u7537');\n</code></pre> <p>\u6570\u636e\u5e93\u672c\u8d28\u5176\u5b9e\u4e5f\u662f\u6587\u4f73!!\u53ea\u4e0d\u8fc7\u8fd9\u4e9b\u6587\u4ef6\u5e76\u4e0d\u7531\u7a0b\u5e8f\u5458\u76f4\u63a5\u64cd\u4f5c,\u800c\u662f\u7531\u6570\u636e\u5e93\u5e2e\u6211\u4eec\u8fdb\u884c\u64cd\u4f5c</p>"},{"location":"mysqldatabase/mysql%20Database%20Basics/#_5","title":"\u4e3b\u6d41\u6570\u636e\u5e93","text":"<ul> <li>SQL Sever\uff1a \u5fae\u8f6f\u7684\u4ea7\u54c1\uff0c.Net\u7a0b\u5e8f\u5458\u7684\u6700\u7231\uff0c\u4e2d\u5927\u578b\u9879\u76ee\u3002</li> <li>Oracle\uff1a \u7532\u9aa8\u6587\u4ea7\u54c1\uff0c\u9002\u5408\u5927\u578b\u9879\u76ee\uff0c\u590d\u6742\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u5e76\u53d1\u4e00\u822c\u6765\u8bf4\u4e0d\u5982MySQL\u3002</li> <li>MySQL\uff1a\u4e16\u754c\u4e0a\u6700\u53d7\u6b22\u8fce\u7684\u6570\u636e\u5e93\uff0c\u5c5e\u4e8e\u7532\u9aa8\u6587\uff0c\u5e76\u53d1\u6027\u597d\uff0c\u4e0d\u9002\u5408\u505a\u590d\u6742\u7684\u4e1a\u52a1\u3002\u4e3b\u8981\u7528\u5728\u7535\u5546\uff0cSNS\uff0c\u8bba \u575b\u3002\u5bf9\u7b80\u5355\u7684SQL\u5904\u7406\u6548\u679c\u597d\u3002</li> <li>PostgreSQL :\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u5206\u6821\u8ba1\u7b97\u673a\u7cfb\u5f00\u53d1\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u4e0d\u7ba1\u662f\u79c1\u7528\uff0c\u5546\u7528\uff0c\u8fd8\u662f\u5b66\u672f\u7814\u7a76\u4f7f\u7528\uff0c\u53ef \u4ee5\u514d\u8d39\u4f7f\u7528\uff0c\u4fee\u6539\u548c\u5206\u53d1\u3002</li> <li>SQLite\uff1a \u662f\u4e00\u6b3e\u8f7b\u578b\u7684\u6570\u636e\u5e93\uff0c\u662f\u9075\u5b88ACID\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff0c\u5b83\u5305\u542b\u5728\u4e00\u4e2a\u76f8\u5bf9\u5c0f\u7684C\u5e93\u4e2d\u3002\u5b83\u7684\u8bbe \u8ba1\u76ee\u6807\u662f\u5d4c\u5165\u5f0f\u7684\uff0c\u800c\u4e14\u76ee\u524d\u5df2\u7ecf\u5728\u5f88\u591a\u5d4c\u5165\u5f0f\u4ea7\u54c1\u4e2d\u4f7f\u7528\u4e86\u5b83\uff0c\u5b83\u5360\u7528\u8d44\u6e90\u975e\u5e38\u7684\u4f4e\uff0c\u5728\u5d4c\u5165\u5f0f\u8bbe\u5907\u4e2d\uff0c\u53ef \u80fd\u53ea\u9700\u8981\u51e0\u767eK\u7684\u5185\u5b58\u5c31\u591f\u4e86\u3002</li> <li>H2\uff1a \u662f\u4e00\u4e2a\u7528Java\u5f00\u53d1\u7684\u5d4c\u5165\u5f0f\u6570\u636e\u5e93\uff0c\u5b83\u672c\u8eab\u53ea\u662f\u4e00\u4e2a\u7c7b\u5e93\uff0c\u53ef\u4ee5\u76f4\u63a5\u5d4c\u5165\u5230\u5e94\u7528\u9879\u76ee\u4e2d\u3002</li> </ul>"},{"location":"mysqldatabase/mysql%20Database%20Basics/#_6","title":"\u670d\u52a1\u5668\u7ba1\u7406","text":"<p>\u6267\u884c win+r \u8f93\u5165 services.msc \u6253\u5f00\u670d\u52a1\u7ba1\u7406\u5668 \u627e\u5230MySQL\u4e5f\u53ef\u4ee5\u7ba1\u7406MySQL</p>"},{"location":"mysqldatabase/mysql%20Database%20Basics/#mysql","title":"MySQL\u67b6\u6784","text":"<p>MySQL \u662f\u4e00\u4e2a\u53ef\u79fb\u690d\u7684\u6570\u636e\u5e93\uff0c\u51e0\u4e4e\u80fd\u5728\u5f53\u524d\u6240\u6709\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u5982 Unix/Linux\u3001Windows\u3001Mac \u548c Solaris\u3002\u5404\u79cd\u7cfb\u7edf\u5728\u5e95\u5c42\u5b9e\u73b0\u65b9\u9762\u5404\u6709\u4e0d\u540c\uff0c\u4f46\u662f MySQL \u57fa\u672c\u4e0a\u80fd\u4fdd\u8bc1\u5728\u5404\u4e2a\u5e73\u53f0\u4e0a\u7684\u7269\u7406\u4f53\u7cfb\u7ed3\u6784\u7684\u4e00\u81f4\u6027\u3002</p> <p>\u4e0a\u5c42:\u89e3\u51b3\u5b89\u5168\u548c\u94fe\u63a5\u7ba1\u7406</p> <p>\u4e2d\u5c42:\u8bcd\u6cd5\u3001\u8bed\u6cd5\u5206\u6790\u3001sql\u7684\u4f18\u5316</p> <p>\u5e95\u5c42:\u5177\u4f53\u6570\u636e\u7684\u5b58\u50a8\u65b9\u6848</p> <p>\u6700\u5e95\u4e0b:\u4f9d\u8d56\u5bf9\u5e94\u7684\u6587\u4ef6\u7cfb\u7edf,\u7136\u540e\u628a\u6570\u636e\u4ee5\u4e8c\u8fdb\u5236\u5b58\u50a8\u5230\u7279\u5b9a\u76ee\u5f55\u4e0b,\u6784\u5efa\u7279\u5b9a\u7684\u666e\u901a\u6587\u4ef6,\u628a\u6570\u636e\u5e2e\u6211\u4eec\u5b58\u50a8\u597d\u3002</p>"},{"location":"mysqldatabase/mysql%20Database%20Basics/#sql","title":"sql\u8bed\u53e5\u7684\u5206\u7c7b","text":"<ul> <li>DDL\u3010data definition language\u3011 \u6570\u636e\u5b9a\u4e49\u8bed\u8a00\uff0c\u7528\u6765\u7ef4\u62a4\u5b58\u50a8\u6570\u636e\u7684\u7ed3\u6784 \u4ee3\u8868\u6307\u4ee4: create, drop, alter</li> <li>DML\u3010data manipulation language\u3011 \u6570\u636e\u64cd\u7eb5\u8bed\u8a00\uff0c\u7528\u6765\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c \u4ee3\u8868\u6307\u4ee4\uff1a insert\uff0cdelete\uff0cupdate</li> <li>DML\u4e2d\u53c8\u5355\u72ec\u5206\u4e86\u4e00\u4e2aDQL\uff0c\u6570\u636e\u67e5\u8be2\u8bed\u8a00\uff0c\u4ee3\u8868\u6307\u4ee4\uff1a select DCL\u3010Data Control Language\u3011 \u6570\u636e\u63a7\u5236\u8bed\u8a00\uff0c\u4e3b\u8981\u8d1f\u8d23\u6743\u9650\u7ba1\u7406\u548c\u4e8b\u52a1 \u4ee3\u8868\u6307\u4ee4\uff1a grant\uff0crevoke\uff0ccommit</li> </ul>"},{"location":"mysqldatabase/mysql%20Database%20Basics/#mysql_1","title":"\u67e5\u770bMySQL\u7684\u5b58\u50a8\u5f15\u64ce","text":"<p>\u5b58\u50a8\u5f15\u64ce\u662f\uff1a\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u5982\u4f55\u5b58\u50a8\u6570\u636e\u3001\u5982\u4f55\u4e3a\u5b58\u50a8\u7684\u6570\u636e\u5efa\u7acb\u7d22\u5f15\u548c\u5982\u4f55\u66f4\u65b0\u3001\u67e5\u8be2\u6570\u636e\u7b49\u6280\u672f\u7684\u5b9e\u73b0\u65b9\u6cd5\u3002</p> <p>show engines \\G \u67e5\u770b\u5f15\u64ce</p> <p>\u6700\u5e38\u7528\u7684\u5f15\u64ce:MyIsan\u3001innodb</p>"},{"location":"mysqldatabase/mysql%20Operational%20library/","title":"MySQL\u64cd\u4f5c\u5e93","text":""},{"location":"mysqldatabase/mysql%20Operational%20library/#_1","title":"\u589e\u5220\u6570\u636e\u5e93","text":"<p>\u521b\u5efa\u6570\u636e\u5e93:crete database db_name; </p> <p>\u5220\u9664\u6570\u636e\u5e93:drop database db_name;</p> <p>\u672c\u8d28\u5c31\u662f\u5728/var/lib/mysql \u521b\u5efa/\u5220\u9664 \u4e00\u4e2a\u76ee\u5f55, \u521b\u5efa\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u5199crete database if not exists db_name;</p> <p>\u521b\u5efa\u6570\u636e\u5e93\u7684\u65f6\u5019,\u6709\u4e24\u4e2a\u7f16\u7801\u96c6:</p> <ol> <li>\u6570\u636e\u5e93\u7f16\u7801\u96c6 -- \u6570\u636e\u5e93\u672a\u6765\u5b58\u50a8\u6570\u636e</li> <li>\u6570\u636e\u5e93\u6821\u9a8c\u96c6 -- \u652f\u6301\u6570\u636e\u5e93,\u8fdb\u884c\u5b57\u6bb5\u6bd4\u8f83\u4f7f\u7528\u7684\u7f16\u7801,\u672c\u8d28\u4e5f\u662f\u4e00\u79cd\u8bfb\u53d6\u6570\u636e\u5e93\u4e2d\u6570\u636e\u7684\u91c7\u7528\u7f16\u7801\u683c\u5f0f</li> <li>\u6570\u636e\u5e93\u65e0\u8bba\u5bf9\u6570\u636e\u5e93\u4efb\u4f55\u64cd\u4f5c,\u90fd\u5fc5\u987b\u4fdd\u8bc1\u64cd\u4f5c\u548c\u7f16\u7801\u662f\u4e00\u81f4\u7684.</li> </ol>"},{"location":"mysqldatabase/mysql%20Operational%20library/#_2","title":"\u8ba4\u8bc6\u7cfb\u7edf\u7f16\u7801","text":"<p>\u67e5\u770b\u7cfb\u7edf\u9ed8\u8ba4\u5b57\u7b26\u96c6\u4ee5\u53ca\u6821\u9a8c\u89c4\u5219</p> <p>show variables like 'character_set_database';(\u7cfb\u7edf\u9ed8\u8ba4\u5b57\u7b26\u96c6)</p> <p>show variables like 'collation_database';(\u6821\u9a8c\u89c4\u5219)</p> <p>\u67e5\u770b\u6570\u636e\u5e93\u652f\u6301\u7684\u5b57\u7b26\u96c6</p> <p>show charset; </p>"},{"location":"mysqldatabase/mysql%20Operational%20library/#_3","title":"\u6307\u5b9a\u7f16\u7801\u521b\u5efa\u6570\u636e\u5e93","text":"<p>create database d1 charset=utf8 collate utf8_general_ci;</p> <p>\u81ea\u5df1\u5199\u4e86\u6821\u9a8c\u7801,/etc/my.cnf\u91cc\u9762\u914d\u7f6e\u7684\u6211\u4eec\u5c31\u4e0d\u4f1a\u7528\u4e86</p>"},{"location":"mysqldatabase/mysql%20Operational%20library/#_4","title":"\u9a8c\u8bc1\u4e0d\u540c\u6821\u9a8c\u7801\u7f16\u7801\u7684\u5f71\u54cd","text":"<p>1.\u6837\u4f8b\u4e00</p> <pre><code>1. create database test1 collate utf8_general_ci;\n2.use test1;\n3.create table if not exists person(name varchar(20));\n4.insert into person (name) values ('a);\n5.insert into person (name) values ('A);\n6.select * from person where name='a';\n</code></pre> <p>\u8fd9\u6bb5\u8fd0\u884c\u7ed3\u679c\u662fa\u548cA\u90fd\u663e\u793a\u51fa\u6765,\u8bf4\u660e\u4e0d\u533a\u5206\u5927\u5c0f\u5199 2.\u6837\u4f8b\u4e8c</p> <pre><code>1. create database test2 collate utf8_bin;\n2.use test1;\n3.create table if not exists person(name varchar(20));\n4.insert into person (name) values ('a);\n5.insert into person (name) values ('A);\n6.select * from person where name='a';\n</code></pre> <p>\u8fd9\u6bb5\u8fd0\u884c\u53ea\u770b\u5230\u4e86a,\u8bf4\u660e\u533a\u5206\u5927\u5c0f\u5199</p> <p>order by\u4e5f\u662f\u4e00\u6837,\u4f1a\u88ab\u6821\u9a8c\u96c6\u5f71\u54cd</p>"},{"location":"mysqldatabase/mysql%20Operational%20library/#_5","title":"\u5e93\u7684\u5220\u6539\u67e5","text":"<p>\u5220:drop database db_name;</p> <p>\u67e5\u770b\u5f53\u524d\u5728\u90a3\u4e2a\u6570\u636e\u5e93:select database();</p> <p>\u6539:alter database db_name;</p> <p>\u67e5: show create database db_name;</p> <pre><code>+----------+----------------------------------------------------------------+\n| Database | Create Database |\n+----------+----------------------------------------------------------------+\n| mytest | CREATE DATABASE `db_name` /*!40100 DEFAULT CHARACTER SET utf */ |  (\u4e0d\u662f\u6ce8\u91ca,\u8868\u793a\u5f53\u524dmysql\u7248\u672c\u5927\u4e8e4.01\u7248\u672c\uff0c\u5c31\u6267\u884c\u8fd9\u53e5\u8bdd)\n+----------+----------------------------------------------------------------+\n</code></pre>"},{"location":"mysqldatabase/mysql%20Operational%20library/#_6","title":"\u5e93\u7684\u5907\u4efd\u4e0e\u6062\u590d","text":"<p>\u5907\u4efd\u8bed\u6cd5:</p> <p>mysqldump -P3306 -u root -p \u5bc6\u7801 -B \u6570\u636e\u5e93\u540d &gt; \u6587\u4ef6\u540d.sql</p> <p>\u8fd8\u539f\u8bed\u6cd5:</p> <p>source \u6570\u636e\u5e93\u5907\u4efd\u5b58\u50a8\u7684\u6587\u4ef6\u8def\u5f84/\u6587\u4ef6\u540d.sql</p> <p>\u67e5\u770b\u94fe\u63a5\u60c5\u51b5:show processlist</p> <p>\u53ef\u4ee5\u544a\u8bc9\u6211\u4eec\u5f53\u524d\u6709\u54ea\u4e9b\u7528\u6237\u8fde\u63a5\u5230\u6211\u4eec\u7684MySQL\uff0c\u5982\u679c\u67e5\u51fa\u67d0\u4e2a\u7528\u6237\u4e0d\u662f\u4f60\u6b63\u5e38\u767b\u9646\u7684\uff0c\u5f88\u6709\u53ef\u80fd\u4f60\u7684\u6570\u636e\u5e93\u88ab \u4eba\u5165\u4fb5\u4e86\u3002\u4ee5\u540e\u5927\u5bb6\u53d1\u73b0\u81ea\u5df1\u6570\u636e\u5e93\u6bd4\u8f83\u6162\u65f6\uff0c\u53ef\u4ee5\u7528\u8fd9\u4e2a\u6307\u4ee4\u6765\u67e5\u770b\u6570\u636e\u5e93\u8fde\u63a5\u60c5\u51b5\u3002</p>"},{"location":"mysqldatabase/table%20data%20type/","title":"MySQL\u8868\u7684\u6570\u636e\u7c7b\u578b","text":""},{"location":"mysqldatabase/table%20data%20type/#_1","title":"\u6570\u503c\u7c7b\u578b","text":"<p>tinyint/smallint/mediumint/int/bigint</p> <p>\u5982\u679c\u6211\u4eec\u5411MySQL\u7279\u5b9a\u7684\u7c7b\u578b\u4e2d\u63d2\u5165\u4e0d\u5408\u6cd5\u7684\u6570\u636e,MySQL\u4e00\u822c\u90fd\u662f\u76f4\u63a5\u62e6\u622a\u6211\u4eec,\u4e0d\u8ba9\u6211\u4eec\u505a\u5bf9\u5e94\u7684\u64cd\u4f5c.</p> <p>\u53cd\u8fc7\u6765,\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u6709\u6570\u636e\u88ab\u6210\u529f\u63d2\u5165\u5230MySQL\u4e2d\uff0c\u4e00\u5b9a\u63d2\u5165\u7684\u65f6\u5019\u662f\u5408\u6cd5\u7684\uff01</p> <p>\u6240\u4ee5\uff0cMySQL\u4e2d\uff0c\u4e00\u822c\u800c\u8a00\uff0c\u6570\u636e\u7c7b\u578b\u672c\u8eab\u4e5f\u662f\u4e00\u79cd\uff1a\u7ea6\u675f</p> <p>\u7ea6\u675f:\u5012\u903c\u7a0b\u5e8f\u5458,\u8ba9\u7a0b\u5e8f\u5458\u5c3d\u53ef\u80fd\u8fdb\u884c\u6b63\u786e\u7684\u63d2\u5165,\u7ea6\u675f\u4f7f\u7528\u8005.\u53e6\u5916\u5982\u679c\u4f60\u4e0d\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f7f\u7528\u8005,MySQL\u4e5f\u80fd\u4fdd\u8bc1\u6570\u636e\u63d2\u5165\u7684\u5408\u6cd5\u6027. \u5c31\u80fd\u4fdd\u8bc1\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u662f\u53ef\u9884\u671f\u7684,\u5b8c\u6574\u7684</p> <p>MySQL\u8868\u4e2d\u5efa\u7acb\u5c5e\u6027\u5217:\u5217\u540d\u79f0 \u7c7b\u578b\u5728\u540e</p>"},{"location":"mysqldatabase/table%20data%20type/#bit","title":"bit\u7c7b\u578b","text":"<p>\u8bed\u6cd5:</p> <p>bit[(M)] : \u4f4d\u5b57\u6bb5\u7c7b\u578b\u3002M\u8868\u793a\u6bcf\u4e2a\u503c\u7684\u4f4d\u6570\uff0c\u8303\u56f4\u4ece1\u523064\u3002\u5982\u679cM\u88ab\u5ffd\u7565\uff0c\u9ed8\u8ba4\u4e3a1\u3002</p> <p>bit\u4f7f\u7528\u7684\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li> <p>bit\u5b57\u6bb5\u5728\u663e\u793a\u65f6\uff0c\u662f\u6309\u7167ASCII\u7801\u5bf9\u5e94\u7684\u503c\u663e\u793a\u3002\u4f8b\u5982:\u5b58\u50a8'a'\u53ef\u4ee5\u5199'a'\uff0c\u4e5f\u53ef\u4ee5\u519997</p> </li> <li> <p>\u5982\u679c\u6211\u4eec\u6709\u8fd9\u6837\u7684\u503c\uff0c\u53ea\u5b58\u653e0\u62161\uff0c\u8fd9\u65f6\u53ef\u4ee5\u5b9a\u4e49bit(1)\u3002\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\u3002</p> </li> </ul>"},{"location":"mysqldatabase/table%20data%20type/#_2","title":"\u5c0f\u6570\u7c7b\u578b","text":"<p>float\u8bed\u6cd5:</p> <p>float[(m, d)] [unsigned] : M\u6307\u5b9a\u663e\u793a\u957f\u5ea6\uff0cd\u6307\u5b9a\u5c0f\u6570\u4f4d\u6570\uff0c\u5360\u7528\u7a7a\u95f44\u4e2a\u5b57\u8282</p> <p>\u4f8b\u5b50:</p> <p>\u5c0f\u6570\uff1afloat(4,2)\u8868\u793a\u7684\u8303\u56f4\u662f-99.99 ~ 99.99\uff0c\u5f53\u5c0f\u6570\u90e8\u5206\u8d85\u8fc72\u65f6MySQL\u5728\u4fdd\u5b58\u503c\u65f6\u4f1a\u8fdb\u884c\u56db\u820d\u4e94\u5165,\u4f46\u662f\u4e94\u5165\u540e\u4e00\u5b9a\u8981\u5728\u89c4\u5b9a\u8303\u56f4\uff0c\u5426\u5219\u8fd8\u662f\u9519\u8bef\u3002\u63d2\u516510.0\uff0c\u4ed6\u4f1a\u81ea\u52a8\u8865\u5168,\u53d8\u621010.00,\u5c0f\u6570\u90e8\u5206\u5fc5\u987b\u662f2\u4f4d,\u5982\u679c\u52a0\u4e0aunsigned\u76f4\u63a5\u628a\u8d1f\u6570\u53d6\u6d88\u6389.</p> <p>decimal\u8bed\u6cd5:</p> <p>decimal(m, d) [unsigned] : \u5b9a\u70b9\u6570m\u6307\u5b9a\u957f\u5ea6\uff0cd\u8868\u793a\u5c0f\u6570\u70b9\u7684\u4f4d\u6570</p> <ul> <li>decimal(5,2) \u8868\u793a\u7684\u8303\u56f4\u662f -999.99 ~ 999.99</li> <li>decimal(5,2) unsigned \u8868\u793a\u7684\u8303\u56f4 0 ~ 999.99,decimal\u548cfloat\u5f88\u50cf\uff0c\u4f46\u662f\u6709\u533a\u522b:float\u548cdecimal\u8868\u793a\u7684\u7cbe\u5ea6\u4e0d\u4e00\u6837 \u8bf4\u660e\uff1afloat\u8868\u793a\u7684\u7cbe\u5ea6\u5927\u7ea6\u662f7\u4f4d\u3002decimal\u6574\u6570\u6700\u5927\u4f4d\u6570m\u4e3a65\u3002\u652f\u6301\u5c0f\u6570\u6700\u5927\u4f4d\u6570d\u662f30\u3002\u5982\u679cd\u88ab\u7701\u7565\uff0c\u9ed8\u8ba4\u4e3a0.\u5982\u679cm\u88ab\u7701\u7565\uff0c\u9ed8\u8ba4\u662f10\u3002 \u5efa\u8bae\uff1a\u5982\u679c\u5e0c\u671b\u5c0f\u6570\u7684\u7cbe\u5ea6\u9ad8\uff0c\u63a8\u8350\u4f7f\u7528decimal\u3002</li> </ul>"},{"location":"mysqldatabase/table%20data%20type/#_3","title":"\u5b57\u7b26\u4e32\u7c7b\u578b","text":"<p>char\u8bed\u6cd5:</p> <p>char(L): \u56fa\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\uff0cL\u662f\u53ef\u4ee5\u5b58\u50a8\u7684\u957f\u5ea6\uff0c\u5355\u4f4d\u4e3a\u5b57\u7b26\uff0c\u6700\u5927\u957f\u5ea6\u503c\u53ef\u4ee5\u4e3a255</p> <p>\u6ce8:</p> <ul> <li>\u6b64\u5b57\u7b26\u5e76\u4e0d\u662f\u4ee5\u524d\u6240\u5b66\u7684\u5b57\u8282\u6570\u3001\u5c31\u662f\u4e00\u4e2a\u5bf9\u5e94\u4e00\u4e2a(\u5373\u4e00\u4e2a\u4e2d\u6587\u548c\u4e00\u4e2a\u5b57\u6bcd\u90fd\u4ee3\u8868\u5b57\u7b26).</li> <li>char(2) \u8868\u793a\u53ef\u4ee5\u5b58\u653e\u4e24\u4e2a\u5b57\u7b26\uff0c\u53ef\u4ee5\u662f\u5b57\u6bcd\u6216\u6c49\u5b57\uff0c\u4f46\u662f\u4e0d\u80fd\u8d85\u8fc72\u4e2a\uff0c \u6700\u591a\u53ea\u80fd\u662f255.</li> </ul> <p>varchar\u8bed\u6cd5:</p> <p>varchar(L): \u53ef\u53d8\u957f\u5ea6\u5b57\u7b26\u4e32\uff0cL\u8868\u793a\u5b57\u7b26\u957f\u5ea6\uff0c\u6700\u5927\u957f\u5ea665535\u4e2a\u5b57\u8282(65535\u4e2a\u5b57\u8282 == 21845\u4e2a\u5b57\u7b26(65535 / 3))</p> <p>\u5173\u4e8evarchar(len),len\u5230\u5e95\u662f\u591a\u5927\uff0c\u8fd9\u4e2alen\u503c\uff0c\u548c\u8868\u7684\u7f16\u7801\u5bc6\u5207\u76f8\u5173\uff1a</p> <ul> <li>varchar\u957f\u5ea6\u53ef\u4ee5\u6307\u5b9a\u4e3a0\u523065535\u4e4b\u95f4\u7684\u503c\uff0c\u4f46\u662f\u67091 - 3 \u4e2a\u5b57\u8282\u7528\u4e8e\u8bb0\u5f55\u6570\u636e\u5927\u5c0f\uff0c\u6240\u4ee5\u8bf4\u6709\u6548\u5b57\u8282\u6570\u662f 65532\u3002</li> <li>\u5f53\u6211\u4eec\u7684\u8868\u7684\u7f16\u7801\u662futf8\u65f6\uff0cvarchar(n)\u7684\u53c2\u6570n\u6700\u5927\u503c\u662f65532/3=21844[\u56e0\u4e3autf\u4e2d\uff0c\u4e00\u4e2a\u5b57\u7b26\u5360\u75283\u4e2a\u5b57 \u8282]\uff0c\u5982\u679c\u7f16\u7801\u662fgbk\uff0cvarchar(n)\u7684\u53c2\u6570n\u6700\u5927\u662f65532/2=32766\uff08\u56e0\u4e3agbk\u4e2d\uff0c\u4e00\u4e2a\u5b57\u7b26\u5360\u75282\u5b57\u8282\uff09\u3002</li> </ul> <p>\u5982\u4f55\u9009\u62e9\u5b9a\u957f\u6216\u53d8\u957f\u5b57\u7b26\u4e32\uff1f</p> <ul> <li>\u5982\u679c\u6570\u636e\u786e\u5b9a\u957f\u5ea6\u90fd\u4e00\u6837\uff0c\u5c31\u4f7f\u7528\u5b9a\u957f\uff08char\uff09\uff0c\u6bd4\u5982\uff1a\u8eab\u4efd\u8bc1\uff0c\u624b\u673a\u53f7\uff0cmd5</li> <li>\u5982\u679c\u6570\u636e\u957f\u5ea6\u6709\u53d8\u5316,\u5c31\u4f7f\u7528\u53d8\u957f(varchar), \u6bd4\u5982\uff1a\u540d\u5b57\uff0c\u5730\u5740\uff0c\u4f46\u662f\u4f60\u8981\u4fdd\u8bc1\u6700\u957f\u7684\u80fd\u5b58\u7684\u8fdb\u53bb\u3002</li> <li>\u5b9a\u957f\u7684\u78c1\u76d8\u7a7a\u95f4\u6bd4\u8f83\u6d6a\u8d39\uff0c\u4f46\u662f\u6548\u7387\u9ad8\u3002</li> <li>\u53d8\u957f\u7684\u78c1\u76d8\u7a7a\u95f4\u6bd4\u8f83\u8282\u7701\uff0c\u4f46\u662f\u6548\u7387\u4f4e\u3002</li> <li>\u5b9a\u957f\u7684\u610f\u4e49\u662f\uff0c\u76f4\u63a5\u5f00\u8f9f\u597d\u5bf9\u5e94\u7684\u7a7a\u95f4</li> <li>\u53d8\u957f\u7684\u610f\u4e49\u662f\uff0c\u5728\u4e0d\u8d85\u8fc7\u81ea\u5b9a\u4e49\u8303\u56f4\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u591a\u5c11\uff0c\u5f00\u8f9f\u591a\u5c11\u3002</li> </ul>"},{"location":"mysqldatabase/table%20data%20type/#_4","title":"\u65e5\u671f\u7c7b\u578b\u548c\u65f6\u95f4\u7c7b\u578b","text":"<ul> <li>date :\u65e5\u671f 'yyyy-mm-dd' \uff0c\u5360\u7528\u4e09\u5b57\u8282</li> <li>datetime \u65f6\u95f4\u65e5\u671f\u683c\u5f0f 'yyyy-mm-dd HH:ii:ss' \u8868\u793a\u8303\u56f4\u4ece 1000 \u5230 9999 \uff0c\u5360\u7528\u516b\u5b57\u8282</li> <li>timestamp \uff1a\u65f6\u95f4\u6233\uff0c\u4ece1970\u5e74\u5f00\u59cb\u7684 yyyy-mm-dd HH:ii:ss \u683c\u5f0f\u548c datetime \u5b8c\u5168\u4e00\u81f4\uff0c\u5360\u7528\u56db\u5b57\u8282.\u6bcf\u6b21\u66f4\u65b0\u8868\u7684\u65f6\u5019\uff0c\u5b83\u4e5f\u4f1a\u81ea\u52a8\u66f4\u65b0.</li> </ul>"},{"location":"mysqldatabase/table%20data%20type/#enumset","title":"enum\u548cset","text":"<p>enum\u8bed\u6cd5:</p> <p>enum\uff1a\u679a\u4e3e\uff0c\u201c\u5355\u9009\u201d\u7c7b\u578b\uff1b</p> <p>enum('\u9009\u98791','\u9009\u98792','\u9009\u98793',...);</p> <p>\u4e0b\u6807\u4ece1\u5f00\u59cb\u6765\u9009.</p> <p>set\u8bed\u6cd5</p> <p>set\uff1a\u96c6\u5408\uff0c\u201c\u591a\u9009\u201d\u7c7b\u578b\uff1b</p> <p>set('\u9009\u9879\u503c1','\u9009\u9879\u503c2','\u9009\u9879\u503c3', ...);</p> <p>\u662f\u6570\u5b57\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u6765\u9009.</p>"},{"location":"mysqldatabase/table%20data%20type/#enumset_1","title":"enum\u548cset\u7c7b\u578b\u67e5\u627e","text":"<p>find_in_set(sub,str_list) \uff1a\u5982\u679c sub \u5728 str_list \u4e2d\uff0c\u5219\u8fd4\u56de\u4e0b\u6807\uff1b\u5982\u679c\u4e0d\u5728\uff0c\u8fd4\u56de0\uff1b str_list \u7528\u9017\u53f7\u5206 \u9694\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u5982\u679c\u8981\u9009\u62e9\u591a\u4e2a\u5305\u542b\u5185\u5bb9\u7684,\u7528and\uff0c\u800c\u4e0d\u662f\u5728sub\u91cc\u9762\u52a0\u5165',name';</p>"}]}