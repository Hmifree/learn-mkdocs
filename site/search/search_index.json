{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Home","text":"<p>\u81ea\u6211\u4ecb\u7ecd \u672c\u4eba\u662fSWPU\u7684\u4e00\u540d\u5b66\u751f\uff0c2022\u7ea7\uff0c\u5e0c\u671b\u81ea\u5df1\u4ee5\u540e\u53ef\u4ee5\u6210\u4e3a\u4e00\u540d\u5408\u683c\u7684\u540e\u7aef\u5f00\u53d1\u7a0b\u5e8f\u5458\u3002</p> <p>\u6211\u7684\u7f16\u7a0b\u8ba1\u5212\uff1a</p> <p>1.\u5173\u4e8eC\u8bed\u8a00\uff1aC/C++\u5728\u51e0\u5341\u5e74\u90fd\u4e00\u76f4\u4f4d\u4e8e\u524d\u4e09\u540d\uff0c\u6240\u4ee5\u8db3\u4ee5\u8bc1\u660e\u4ed6\u7684\u7ecf\u5178\u6027\u548c\u91cd\u8981\u6027\u3002C\u8bed\u8a00\u672c\u8eab\u662f\u8f83\u4e3a\u57fa\u7840\u7684\u8bed\u8a00\uff0c\u6240\u4ee5\u5f88\u5bf9\u4e8e\u65b0\u751f\u5165\u95e8\u975e\u5e38\u53cb\u597d\uff0c\u53ea\u9700\u8ba4\u771f\u542c\u5b66\u6821\u8001\u5e08\u8bb2\u8bfe+\u8bfe\u540e\u7ec3\u4e60\u5373\u53ef\u3002</p> <p>2.\u5173\u4e8e\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\uff1a\u8fd1\u5e74\u6765\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u6210\u4e3a\u4e86\u8fdb\u5165\u5927\u5382\u7684\u7b2c\u4e00\u5173\u7b14\u8bd5\uff0c\u60f3\u8981\u8fdb\u5165\u5927\u5382\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0c\u800c\u8fd9\u4e00\u5757\u7684\u77e5\u8bc6\u53c8\u662f\u6709\u4e00\u5b9a\u96be\u5ea6\u7684\uff0c\u6240\u4ee5\u9700\u8981\u6ce8\u91cd\u5b9e\u8df5\uff0c\u591a\u753b\u56fe\uff0c\u591a\u7ec3\u4e60\u3002</p> <p>3.\u5173\u4e8eLinux\u64cd\u4f5c\u7cfb\u7edf\u548c\u7f51\u7edc\u7f16\u7a0b\uff1a\u8fd9\u4e00\u5757\u7684\u77e5\u8bc6\u5728\u9ad8\u6821\u4e00\u822c\u5f88\u5c11\u6559\uff0c\u4f46\u662f\u53c8\u975e\u5e38\u7684\u91cd\u8981\uff0c\u5728\u6821\u62db\u7684\u9898\u76ee\u4e2d\u968f\u5904\u53ef\u89c1\uff0c\u6240\u4ee5\u5b66\u597d\u8fd9\u4e00\u90e8\u5206\u8981\u591a\u4e70\u4e66\u6765\u770b\uff0c\u6ce8\u91cd\u5b9e\u8df5\uff0c\u8fd8\u53ef\u4ee5\u5728MOOC\u4e0a\u5bfb\u627e\u89c6\u9891\u6765\u770b\u3002\u6ce8\u91cd\u7406\u8bba+\u5b9e\u8df5\u3002</p> <p>4.\u5b66\u4e60MYSQL\u6570\u636e\u5e93\uff0c\u4e5f\u662f\u5fc5\u5907\u7684\u6280\u80fd\u4e4b\u4e00\u3002</p> <p>5.\u5f00\u53d1\u505a\u9879\u76ee\u3002</p> <p>6.\u52aa\u529b\u5b66\u4e60\u82f1\u8bed,\u8fbe\u5230\u53ef\u4ee5\u9605\u8bfb\u6587\u732e\u7684\u80fd\u529b\uff0c\u4e0d\u7136\u5728\u5de5\u4f5c\u4e2d\u62d3\u5c55\u7684\u65f6\u5019\u5f88\u5403\u529b\u3002</p> <p>7.\u575a\u6301\u6572\u4ee3\u7801,\u4fd7\u8bdd\u8bf4\u719f\u80fd\u751f\u5de7\u3002</p> <p>\u76ee\u524d\u83b7\u5f97\u7684\u5956\u9879: </p>"},{"location":"C%2B%2B-senior/AVL/","title":"AVL\u6811","text":""},{"location":"C%2B%2B-senior/AVL/#avl_1","title":"\u4e00\u3001AVL\u6811","text":""},{"location":"C%2B%2B-senior/AVL/#_1","title":"\uff08\u4e00\uff09\u6982\u5ff5","text":"<p>\u4e8c\u53c9\u641c\u7d22\u6811\u867d\u53ef\u4ee5\u7f29\u77ed\u67e5\u627e\u7684\u6548\u7387\uff0c\u4f46\u5982\u679c\u6570\u636e\u6709\u5e8f\u6216\u63a5\u8fd1\u6709\u5e8f\u4e8c\u53c9\u641c\u7d22\u6811\u5c06\u9000\u5316\u4e3a\u5355\u652f\u6811\uff0c\u67e5</p> <p>\u627e\u5143\u7d20\u76f8\u5f53\u4e8e\u5728\u987a\u5e8f\u8868\u4e2d\u641c\u7d22\u5143\u7d20\uff0c\u6548\u7387\u4f4e\u4e0b\u3002\u56e0\u6b64\uff0c\u4e24\u4f4d\u4fc4\u7f57\u65af\u7684\u6570\u5b66\u5bb6G.M.Adelson-Velskii \u548cE.M.Landis\u57281962\u5e74\u53d1\u660e\u4e86\u4e00\u79cd\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u7684\u65b9\u6cd5\uff1a\u5f53\u5411\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u63d2\u5165\u65b0\u7ed3\u70b9\u540e\uff0c\u5982\u679c\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de6\u53f3 \u5b50\u6811\u9ad8\u5ea6\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71(\u9700\u8981\u5bf9\u6811\u4e2d\u7684\u7ed3\u70b9\u8fdb\u884c\u8c03\u6574)\uff0c\u5373\u53ef\u964d\u4f4e\u6811\u7684\u9ad8\u5ea6\uff0c\u4ece\u800c\u51cf\u5c11\u5e73\u5747\u641c\u7d22\u957f\u5ea6\u3002</p> <p>\u4e00\u68f5AVL\u6811\u6216\u8005\u662f\u7a7a\u6811\uff0c\u6216\u8005\u662f\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff1a</p> <p>1.\u5b83\u7684\u5de6\u53f3\u5b50\u6811\u90fd\u662fAVL\u6811</p> <p>2.\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u4e4b\u5dee(\u7b80\u79f0\u5e73\u8861\u56e0\u5b50, \u5047\u5b9a\u53f3\u51cf\u5de6)\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71(-1/0/1)</p> <p>\u95ee: \u4e3a\u4ec0\u4e48\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u4e0d\u80fd\u53ea\u8bbe\u7f6e\u62100?</p> <p>\u7b54: \u5728\u53ea\u6709\u4e24\u4e2a\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u65e0\u6cd5\u4f7f\u5f97\u4e24\u68f5\u6811\u7684\u5b50\u6811\u5e73\u8861\u56e0\u5b50\u90fd\u4e3a0.</p> <p>\u8865: \u6811\u7684\u5e73\u8861\u56e0\u5b50\u4e0d\u662f\u5fc5\u987b\u8981\u7684\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\u6211\u4eec\u7528\u5e73\u8861\u56e0\u5b50\u6765\u63a7\u5236\u6811.</p>"},{"location":"C%2B%2B-senior/AVL/#_2","title":"\uff08\u4e8c\uff09\u5b9a\u4e49","text":"<p>\u5982\u4e0b\u5b9a\u4e49\u4e00\u4e2aAVL\u6811\u8282\u70b9\u7684\u5b9a\u4e49\uff0c\u8fd9\u91cc\u6211\u4eec\u662f\u7528\u7684\u4e00\u4e2a\u4e09\u53c9\u6811\u3002</p> <pre><code>template&lt;class K, class V&gt;\nstruct AVLTreeNode {\n    AVLTreeNode&lt;K, V&gt;* _left;\n    AVLTreeNode&lt;K, V&gt;* _right;\n    AVLTreeNode&lt;K, V&gt;* _parent;\n    int bf;\n    pair&lt;K, V&gt; _kv;\n    AVLTreeNode(const pair&lt;K, V&gt; kv)\n        :_left(nullptr)\n        , _right(nullptr)\n        , _parent(nullptr)\n        , _bf(0)\n        , _kv(kv)\n    {}\n};\n</code></pre>"},{"location":"C%2B%2B-senior/AVL/#avl_2","title":"\u4e8c\u3001AVL\u6811\u7684\u63d2\u5165","text":"<p>AVL\u6811\u5c31\u662f\u5728\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u57fa\u7840\u4e0a\u5f15\u5165\u4e86\u5e73\u8861\u56e0\u5b50\uff0c\u56e0\u6b64AVL\u6811\u4e5f\u53ef\u4ee5\u770b\u6210\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002\u90a3\u4e48 AVL\u6811\u7684\u63d2\u5165\u8fc7\u7a0b\u53ef\u4ee5\u5206\u4e3a\u4e24\u6b65\uff1a 1. \u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u5f0f\u63d2\u5165\u65b0\u8282\u70b9 2. \u8c03\u6574\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50</p> <pre><code>template&lt;class K, class V&gt; \nstruct AVLTree {\n    typedef AVLTreeNode&lt;K, V&gt; Node;\npublic:\n    bool Insert(const pair&lt;K, V&gt;&amp; kv) {\n        //1. \u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u5f0f\u63d2\u5165\u65b0\u8282\u70b9\n        //2. \u8c03\u6574\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\n\n    }\nprivate:\n    Node* _root = nullptr;\n};\n</code></pre>"},{"location":"C%2B%2B-senior/AVL/#avl_3","title":"\uff08\u4e00\uff09\u5148\u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u89c4\u5219\u5c06\u8282\u70b9\u63d2\u5165\u5230AVL\u6811\u4e2d","text":"<pre><code>bool Insert(const pair&lt;K, V&gt;&amp; kv) {\n    //1. \u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u5f0f\u63d2\u5165\u65b0\u8282\u70b9\n    //2. \u8c03\u6574\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\n    if (_root == nullptr) {\n        _root = new Node(kv);\n        return true;\n    }\n    Node* parent = nullptr;\n    Node* cur = _root;\n    while (cur) {\n        if (cur-&gt;_kv.first &gt; kv.first) {\n            parent = cur;\n            cur = cur-&gt;_left;\n        }\n        else if (cur-&gt;_kv.first &lt; kv.first) {\n            parent = cur;\n            cur = cur-&gt;_right;\n        }\n        else {\n            return false;\n        }\n    }\n    cur = new Node(kv);\n    if (parent-&gt;_kv.first &gt; kv.first)\n        parent-&gt;_left = cur;\n    else\n        parent-&gt;_right = cur;\n    cur-&gt;_parent = parent;\n}\n</code></pre>"},{"location":"C%2B%2B-senior/AVL/#_3","title":"\uff08\u4e8c\uff09\u8c03\u8282\u5e73\u8861\u56e0\u5b50","text":"<p>\u95ee: \u63d2\u5165\u8282\u70b9\u56de\u5f71\u54cd\u90a3\u4e9b\u5e73\u8861\u56e0\u5b50\u5462\uff1f</p> <p>\u7b54: \u65b0\u589e\u8282\u70b9\u7684\u90e8\u5206\u7956\u5148</p> <p>\u66f4\u65b0\u539f\u5219: cur\u66f4\u65b0\u5230root\u4f4d\u7f6e, \u7ed3\u675f\u3002</p> <p>cur\u662fp\u7684\u5de6\u8fb9,p-&gt;_bf--</p> <p>cur\u662fp\u7684\u53f3\u8fb9,p-&gt;_bf++</p> <p>1.\u66f4\u65b0\u540e,p-&gt;_bf == 0,p\u6240\u5728\u7684\u5b50\u6811\u9ad8\u5ea6\u4e0d\u53d8,\u4e0d\u4f1a\u5f71\u54cd\u7237\u7237\uff0c\u8bf4\u660e\u66f4\u65b0\u524d,p\u7684_bf\u662f1\u6216\u8005-1</p> <p>p\u5728\u77ee\u7684\u8282\u70b9\u90a3\u8fb9\u63d2\u5165\u4e86\u8282\u70b9,\u5de6\u53f3\u5747\u8861\u4e86,p\u7684\u9ad8\u5ea6\u4e0d\u53d8,\u4e0d\u4f1a\u5f71\u54cd\u7237\u7237.</p> <p>2.\u66f4\u65b0\u540e,p-&gt;_bf == 1 / -1,p\u6240\u5728\u7684\u5b50\u6811\u7684\u9ad8\u5ea6\u53d8\u4e86,\u4f1a\u5f71\u54cd\u7237\u7237,\u8bf4\u660e\u66f4\u65b0\u524d,p\u7684_bf\u662f0</p> <p>p\u7684\u6709\u4e00\u8fb9\u63d2\u5165,p\u53d8\u7684\u4e0d\u5747\u8861,\u4f46\u662f\u4e0d\u8fdd\u53cd\u89c4\u5219,p\u7684\u9ad8\u5ea6\u53d8\u4e86,\u4f1a\u5f71\u54cd\u7237\u7237.</p> <p>3.\u66f4\u65b0\u540ep-&gt;_bf == 2 / -2,\u8bf4\u660ep\u6240\u5728\u7684\u5b50\u6811\u8fdd\u53cd\u4e86\u5e73\u8861\u89c4\u5219,\u9700\u8981\u8fdb\u884c\u5904\u7406-&gt;\u65cb\u8f6c</p> <p>(\u8ba9p\u6240\u5728\u5b50\u6811\u9ad8\u5ea6\u56de\u5230\u63d2\u5165\u4e4b\u524d,\u4e0d\u4f1a\u5bf9\u4e0a\u5c42\u7684bf\u6709\u5f71\u54cd)</p> <pre><code>while (parent) {\n    if (cur == parent-&gt;_left)\n        parent-&gt;_bf--;\n    else\n        parent-&gt;_bf++;\n    if (parent-&gt;_bf == 0)\n        break;\n    else if (parent-&gt;_bf == 1 || parent-&gt;_bf == -1) {\n        cur = cur-&gt;_parent;\n        parent = parent-&gt;_parent;\n    }\n    else if (parent-&gt;_bf == 2 || parent-&gt;_bf == -2) {\n        // \u65cb\u8f6c\n\n    }\n    else\n        assert(false);\n}\n</code></pre>"},{"location":"C%2B%2B-senior/AVL/#_4","title":"\uff08\u4e09\uff09\u65cb\u8f6c","text":"<p>1.\u5de6\u65cb\u8f6c\uff08\u5f53\u53f3\u8fb9\u4e00\u6761\u76f4\u7ebf\u4e14bf == 2\uff09</p> <pre><code>void RotateL(Node* parent) {\n    Node* subR = parent-&gt;_right; // parent\u7684\u53f3\u8282\u70b9\n    Node* subRL = subR-&gt;_left;   // parent\u7684\u53f3\u8282\u70b9\u7684\u5de6\u8282\u70b9\n    parent-&gt;_right = subRL;      \n    if (subRL) // \u5224\u65adsubRL\u4e0d\u4e3a\u7a7a\n        subRL-&gt;_parent = parent;\n    subR-&gt;_left = parent;\n    Node ppnode = parent-&gt;_parent; // parent\u7684\u7236\u4eb2\u8282\u70b9\u6765\u5224\u65adsubR\u7684\u7236\u4eb2\u8282\u70b9\n    parent-&gt;_parent = subR;\n    if (parent == _root) {\n        _root = subR;\n        subR-&gt;_parent = nullptr;\n    }\n    else {\n        if (parent == ppnode-&gt;_left)\n            ppnode-&gt;_left = subR;\n        else\n            ppnode-&gt;_right = subR;\n        subR-&gt;_parent = ppnode;\n    }\n    parent-&gt;_bf = 0;\n    subR-&gt;_bf = 0;\n}\n</code></pre> <p>2.\u53f3\u65cb\u8f6c\uff08\u7c7b\u4f3c\u5de6\u65cb\u8f6c,\u5de6\u8fb9\u4e00\u6761\u76f4\u7ebf\u4e14bf=-2\uff09</p> <pre><code>void RotateR(Node* parent) {\n    Node* subL = parent-&gt;_left;//parent\u7684\u5de6\u8282\u70b9\n    Node* subLR = subL-&gt;_right;//parent\u7684\u5de6\u8282\u70b9\u7684\u53f3\u8282\u70b9\n    parent-&gt;_left = subLR;\n    if (subLR)\n        subLR-&gt;_parent = parent;\n    subL-&gt;_right = parent;\n    Node* ppnode = parent-&gt;_parent; //parent\u7684\u7236\u4eb2\u8282\u70b9\u6765\u5224\u65adsubL\u7684\u7236\u4eb2\u8282\u70b9 \n    parent-&gt;_parent = subL;\n    if (parent == _root) { // \u5224\u65adsubL\u662f\u5426\u66f4\u65b0\u4e3a\u6839\u8282\u70b9\n        _root = subL;\n        subL-&gt;_parent = nullptr;\n    }\n    else {\n        if (ppnode-&gt;_left == parent)\n            ppnode-&gt;_left = subL;\n        else\n            ppnode-&gt;_right = subL;\n        subL-&gt;_parent = ppnode;\n    }\n    parent-&gt;_bf = 0;\n    subL-&gt;_bf = 0;\n}\n</code></pre> <p>3.\u5de6\u53f3\u65cb\u8f6c\uff08\u5148\u5f80\u5de6\u8d70\uff0c\u518d\u5f80\u53f3\u8d70\u3002\u4e00\u4e2abf\u4e3a-2\uff0c\u4e00\u4e2abf\u4e3a1\u3002\u5148\u5de6\u65cb\uff0c\u518d\u53f3\u65cb\uff0c\u96be\u70b9\u5728\u4e8e\u8c03\u8282\u5e73\u8861\u56e0\u5b50\uff08\u5173\u952e\u5728\u4e8e\u753b\u56fe\uff09\uff09</p> <pre><code>void RotateLR(Node* parent) {\n    Node* subL = parent-&gt;_left;\n    Node* subLR = subL-&gt;_right;\n    int bf = subLR-&gt;_bf;\n    RotateL(parent-&gt;_left);\n    RotateR(parent);\n    if (bf == -1) {\n        subLR-&gt;_bf = 0;\n        subL-&gt;_bf = 0;\n        parent-&gt;_bf = 1;\n    }\n    else if (bf == 1) {\n        subLR-&gt;_bf = 0;\n        subL-&gt;_bf = -1;\n        parent-&gt;_bf = 0;\n    }\n    else if (bf == 0) {\n        subLR-&gt;_bf = 0;\n        subL-&gt;_bf = 0;\n        parent-&gt;_bf = 0;\n    }\n    else\n        assert(false);\n}\n</code></pre> <p>4.\u53f3\u5de6\u65cb\u8f6c\uff08\u5148\u5f80\u53f3\u8d70\uff0c\u518d\u5f80\u5de6\u8d70\u3002\u4e00\u4e2abf\u4e3a2\uff0c\u4e00\u4e2abf\u4e3a-1\u3002\u5148\u53f3\u65cb\uff0c\u518d\u5de6\u65cb\uff0c\u96be\u70b9\u5728\u4e8e\u8c03\u8282\u5e73\u8861\u56e0\u5b50\uff08\u5173\u952e\u5728\u4e8e\u753b\u56fe\uff09\uff09</p> <pre><code>void RotateRL(Node* parent) {\n    Node* subR = parent-&gt;_right;\n    Node* subRL = subR-&gt;_left;\n    int bf = subRL-&gt;_bf;\n    RotateR(parent-&gt;_right);\n    RotateL(parent);\n    if (bf == -1) {\n        subRL-&gt;_bf = 0;\n        subR-&gt;_bf = 1;\n        parent-&gt;_bf = 0;\n    }\n    else if (bf == 1) {\n        subRL-&gt;_bf = 0;\n        subR-&gt;_bf = 0;\n        parent-&gt;_bf = -1;\n    }\n    else if (bf == 0) { // \u53ea\u67093\u4e2a\u8282\u70b9\u7684\u60c5\u51b5\n        subRL-&gt;_bf = 0;\n        subR-&gt;_bf = 0;\n        parent-&gt;_bf = 0;\n    }\n    else\n        assert(false);\n}\n</code></pre> <p>\u65cb\u8f6c\u4ee3\u7801\uff1a</p> <pre><code>if (parent-&gt;_bf == 2 &amp;&amp; cur-&gt;_bf == 1)\n    RotateL(parent);\nelse if (parent-&gt;_bf == -2 &amp;&amp; cur-&gt;_bf == -1)\n    RotateR(parent);\nelse if (parent-&gt;_bf == -2 &amp;&amp; cur-&gt;_bf == 1)\n    RotateLR(parent);\nelse\n    RotateRL(parent);\nbreak;\n</code></pre> <p>5.\u9a8c\u8bc1\u662f\u5426\u4e3aAVL\u6811:</p> <pre><code>bool _IsBalance(Node* root, int&amp; height) {\n    if (root == nullptr) {\n        height = 0;\n        return true;\n    }\n    int LeftHeight = 0, RightHeight = 0;\n    if (!_IsBalance(root-&gt;_left, LeftHeight) ||\n        !_IsBalance(root-&gt;_right, RightHeight)) {\n        return false;\n    }\n    if (abs(LeftHeight - RightHeight) &gt;= 2) {\n        cout &lt;&lt; root-&gt;_kv.first &lt;&lt; \"\u4e0d\u5e73\u8861\" &lt;&lt; endl;\n        return false;\n    }\n    if (RightHeight - LeftHeight != root-&gt;_bf) {\n        cout &lt;&lt; root-&gt;_kv.first &lt;&lt; \"\u5e73\u8861\u82f1\u5b50\u5f02\u5e38\" &lt;&lt; endl;\n        return false;\n    }\n    height = max(LeftHeight, RightHeight) + 1;\n    return true;\n}\n\nbool IsBalance() {\n    int height = 0;\n    return _IsBalance(_root, height);\n}\n</code></pre> <p>\u4ee3\u7801\u6c47\u603b\uff1a</p> <pre><code>#pragma once\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;assert.h&gt;\nusing namespace std;\ntemplate&lt;class K, class V&gt;\nstruct AVLTreeNode {\n    AVLTreeNode&lt;K, V&gt;* _left;\n    AVLTreeNode&lt;K, V&gt;* _right;\n    AVLTreeNode&lt;K, V&gt;* _parent;\n    int _bf;\n    pair&lt;K, V&gt; _kv;\n    AVLTreeNode(const pair&lt;K, V&gt; kv)\n        :_left(nullptr)\n        , _right(nullptr)\n        , _parent(nullptr)\n        , _bf(0)\n        , _kv(kv)\n    {}\n};\n\ntemplate&lt;class K, class V&gt; \nstruct AVLTree {\n    typedef AVLTreeNode&lt;K, V&gt; Node;\npublic:\n    bool Insert(const pair&lt;K, V&gt;&amp; kv) {\n        //1. \u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u5f0f\u63d2\u5165\u65b0\u8282\u70b9\n        //2. \u8c03\u6574\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\n        if (_root == nullptr) {\n            _root = new Node(kv);\n            return true;\n        }\n        Node* parent = nullptr;\n        Node* cur = _root;\n        while (cur) {\n            if (cur-&gt;_kv.first &gt; kv.first) {\n                parent = cur;\n                cur = cur-&gt;_left;\n            }\n            else if (cur-&gt;_kv.first &lt; kv.first) {\n                parent = cur;\n                cur = cur-&gt;_right;\n            }\n            else {\n                return false;\n            }\n        }\n        cur = new Node(kv);\n        if (parent-&gt;_kv.first &gt; kv.first)\n            parent-&gt;_left = cur;\n        else\n            parent-&gt;_right = cur;\n        cur-&gt;_parent = parent;\n        while (parent) {\n            if (cur == parent-&gt;_left)\n                parent-&gt;_bf--;\n            else\n                parent-&gt;_bf++;\n            if (parent-&gt;_bf == 0)\n                break;\n            else if (parent-&gt;_bf == 1 || parent-&gt;_bf == -1) {\n                cur = cur-&gt;_parent;\n                parent = parent-&gt;_parent;\n            }\n            else if (parent-&gt;_bf == 2 || parent-&gt;_bf == -2) {\n                // \u65cb\u8f6c\n                if (parent-&gt;_bf == 2 &amp;&amp; cur-&gt;_bf == 1)\n                    RotateL(parent);\n                else if (parent-&gt;_bf == -2 &amp;&amp; cur-&gt;_bf == -1)\n                    RotateR(parent);\n                else if (parent-&gt;_bf == -2 &amp;&amp; cur-&gt;_bf == 1)\n                    RotateLR(parent);\n                else\n                    RotateRL(parent);\n                break;\n            }\n            else\n                assert(false);\n        }\n    }\n    void RotateL(Node* parent) {\n        Node* subR = parent-&gt;_right; // parent\u7684\u53f3\u8282\u70b9\n        Node* subRL = subR-&gt;_left;   // parent\u7684\u53f3\u8282\u70b9\u7684\u5de6\u8282\u70b9\n        parent-&gt;_right = subRL;      \n        if (subRL) // \u5224\u65adsubRL\u4e0d\u4e3a\u7a7a\n            subRL-&gt;_parent = parent;\n        subR-&gt;_left = parent;\n        Node* ppnode = parent-&gt;_parent; // parent\u7684\u7236\u4eb2\u8282\u70b9\u6765\u5224\u65adsubR\u7684\u7236\u4eb2\u8282\u70b9\n        parent-&gt;_parent = subR;\n        if (parent == _root) {\n            _root = subR;\n            subR-&gt;_parent = nullptr;\n        }\n        else {\n            if (parent == ppnode-&gt;_left)\n                ppnode-&gt;_left = subR;\n            else\n                ppnode-&gt;_right = subR;\n            subR-&gt;_parent = ppnode;\n        }\n        parent-&gt;_bf = 0;\n        subR-&gt;_bf = 0;\n    }\n\n    void RotateR(Node* parent) {\n        Node* subL = parent-&gt;_left;//parent\u7684\u5de6\u8282\u70b9\n        Node* subLR = subL-&gt;_right;//parent\u7684\u5de6\u8282\u70b9\u7684\u53f3\u8282\u70b9\n        parent-&gt;_left = subLR;\n        if (subLR)\n            subLR-&gt;_parent = parent;\n        subL-&gt;_right = parent;\n        Node* ppnode = parent-&gt;_parent; //parent\u7684\u7236\u4eb2\u8282\u70b9\u6765\u5224\u65adsubL\u7684\u7236\u4eb2\u8282\u70b9 \n        parent-&gt;_parent = subL;\n        if (parent == _root) { // \u5224\u65adsubL\u662f\u5426\u66f4\u65b0\u4e3a\u6839\u8282\u70b9\n            _root = subL;\n            subL-&gt;_parent = nullptr;\n        }\n        else {\n            if (ppnode-&gt;_left == parent)\n                ppnode-&gt;_left = subL;\n            else\n                ppnode-&gt;_right = subL;\n            subL-&gt;_parent = ppnode;\n        }\n        parent-&gt;_bf = 0;\n        subL-&gt;_bf = 0;\n    }\n\n    void RotateLR(Node* parent) {\n        Node* subL = parent-&gt;_left;\n        Node* subLR = subL-&gt;_right;\n        int bf = subLR-&gt;_bf;\n        RotateL(parent-&gt;_left);\n        RotateR(parent);\n        if (bf == -1) {\n            subLR-&gt;_bf = 0;\n            subL-&gt;_bf = 0;\n            parent-&gt;_bf = 1;\n        }\n        else if (bf == 1) {\n            subLR-&gt;_bf = 0;\n            subL-&gt;_bf = -1;\n            parent-&gt;_bf = 0;\n        }\n        else if (bf == 0) {\n            subLR-&gt;_bf = 0;\n            subL-&gt;_bf = 0;\n            parent-&gt;_bf = 0;\n        }\n        else\n            assert(false);\n    }\n\n    void RotateRL(Node* parent) {\n        Node* subR = parent-&gt;_right;\n        Node* subRL = subR-&gt;_left;\n        int bf = subRL-&gt;_bf;\n        RotateR(parent-&gt;_right);\n        RotateL(parent);\n        if (bf == -1) {\n            subRL-&gt;_bf = 0;\n            subR-&gt;_bf = 1;\n            parent-&gt;_bf = 0;\n        }\n        else if (bf == 1) {\n            subRL-&gt;_bf = 0;\n            subR-&gt;_bf = 0;\n            parent-&gt;_bf = -1;\n        }\n        else if (bf == 0) { // \u53ea\u67093\u4e2a\u8282\u70b9\u7684\u60c5\u51b5\n            subRL-&gt;_bf = 0;\n            subR-&gt;_bf = 0;\n            parent-&gt;_bf = 0;\n        }\n        else\n            assert(false);\n    }\n\n    bool _IsBalance(Node* root, int&amp; height) {\n        if (root == nullptr) {\n            height = 0;\n            return true;\n        }\n        int LeftHeight = 0, RightHeight = 0;\n        if (!_IsBalance(root-&gt;_left, LeftHeight) ||\n            !_IsBalance(root-&gt;_right, RightHeight)) {\n            return false;\n        }\n        if (abs(LeftHeight - RightHeight) &gt;= 2) {\n            cout &lt;&lt; root-&gt;_kv.first &lt;&lt; \"\u4e0d\u5e73\u8861\" &lt;&lt; endl;\n            return false;\n        }\n        if (RightHeight - LeftHeight != root-&gt;_bf) {\n            cout &lt;&lt; root-&gt;_kv.first &lt;&lt; \"\u5e73\u8861\u82f1\u5b50\u5f02\u5e38\" &lt;&lt; endl;\n            return false;\n        }\n        height = max(LeftHeight, RightHeight) + 1;\n        return true;\n    }\n\n    bool IsBalance() {\n        int height = 0;\n        return _IsBalance(_root, height);\n    }\nprivate:\n    Node* _root = nullptr;\n};\n\nvoid TestAVLTree()\n{\n    const int N = 1000000;\n    vector&lt;int&gt; v;\n    v.reserve(N);\n    srand(time(0));\n\n    for (size_t i = 0; i &lt; N; i++)\n    {\n        v.push_back(rand() + i);\n        //cout &lt;&lt; v.back() &lt;&lt; endl;\n    }\n\n    AVLTree&lt;int, int&gt; t;\n    for (auto e : v)\n    {\n        t.Insert(make_pair(e, e));\n        //cout &lt;&lt; \"Insert:\" &lt;&lt; e &lt;&lt; \"-&gt;\" &lt;&lt; t.IsBalance() &lt;&lt; endl;\n    }\n    cout &lt;&lt; t.IsBalance() &lt;&lt; endl;\n}\n</code></pre>"},{"location":"C%2B%2B-senior/hash/","title":"\u54c8\u5e0c","text":""},{"location":"C%2B%2B-senior/hash/#_2","title":"\u6982\u5ff5","text":"<p>\u5b58\u50a8\u7684\u503c\u548c\u5b58\u50a8\u4f4d\u7f6e\u7684\u6620\u5c04\u7684\u5173\u8054\u5173\u7cfb</p>"},{"location":"C%2B%2B-senior/hash/#_3","title":"\u5e38\u89c1\u7684\u54c8\u5e0c\u51fd\u6570\uff1a","text":"<p>1.\u76f4\u63a5\u5b9a\u5740\u6cd5--(\u5e38\u7528)</p> <p>\u53d6\u5173\u952e\u5b57\u7684\u67d0\u4e2a\u7ebf\u6027\u51fd\u6570\u4e3a\u6563\u5217\u5730\u5740\uff1aHash\uff08Key\uff09= A*Key + B</p> <p>\u4f18\u70b9\uff1a\u7b80\u5355\u3001\u5747\u5300</p> <p>\u7f3a\u70b9\uff1a\u9700\u8981\u4e8b\u5148\u77e5\u9053\u5173\u952e\u5b57\u7684\u5206\u5e03\u60c5\u51b5</p> <p>\u4f7f\u7528\u573a\u666f\uff1a\u9002\u5408\u67e5\u627e\u6bd4\u8f83\u5c0f\u4e14\u8fde\u7eed\u7684\u60c5\u51b5</p> <p>2.\u9664\u7559\u4f59\u6570\u6cd5--(\u5e38\u7528)</p> <p>\u8bbe\u6563\u5217\u8868\u4e2d\u5141\u8bb8\u7684\u5730\u5740\u6570\u4e3am\uff0c\u53d6\u4e00\u4e2a\u4e0d\u5927\u4e8em\uff0c\u4f46\u6700\u63a5\u8fd1\u6216\u8005\u7b49\u4e8em\u7684\u8d28\u6570p\u4f5c\u4e3a\u9664\u6570\uff0c</p> <p>\u6309\u7167\u54c8\u5e0c\u51fd\u6570\uff1aHash(key) = key% p(p&lt;=m),\u5c06\u5173\u952e\u7801\u8f6c\u6362\u6210\u54c8\u5e0c\u5730\u5740</p> <p>3.\u521b\u5efa\u4e00\u4e2a\u54c8\u5e0c\u8868</p> <pre><code>enum State {\n    EMPTY,\n    EXIST,\n    DELETE\n};\n\ntemplate&lt;class K, class V&gt;\nstruct HashData {\n    pair&lt;K, V&gt; _kv;\n    State _state = EMPTY;\n};\n\ntemplate&lt;class K, class V&gt;\nstruct HashTable {\npublic:\nprivate:\n    vector&lt;HashData&lt;K, V&gt;&gt; _tables;\n    size_t n = 0;\n};\n</code></pre>"},{"location":"C%2B%2B-senior/hash/#_4","title":"\u54c8\u5e0c\u51b2\u7a81\u89e3\u51b3","text":"<p>a. \u95ed\u6563\u5217\u5f00\u653e\u5b9a\u5740\u6cd5(\u672c\u8d28\u662f\u5f53\u524d\u4f4d\u7f6e\u51b2\u7a81\u4e86,\u540e\u9762\u627e\u4e00\u4e2a\u5408\u9002\u7684\u4f4d\u7f6e\u7ee7\u7eed\u5b58\u50a8(x: \u7ebf\u6027\u63a2\u6d4b y: \u4e8c\u6b21\u63a2\u6d4b))</p> <p>b. \u5f00\u6563\u5217\u62c9\u94fe\u6cd5/\u54c8\u5e0c\u6876</p>"},{"location":"C%2B%2B-senior/hash/#_5","title":"\u7ebf\u6027\u63a2\u6d4b\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81","text":"<p>\u63d2\u5165\uff1a</p> <p>i = key % \u8868\u7684\u5927\u5c0f</p> <p>\u5982\u679ci\u4f4d\u7f6e\u5df2\u7ecf\u6709\u503c\u4e86,\u5c31\u5f80\u540e\u8d70\u627e\u7a7a\u4f4d\u7f6e,\u653e\u8fdb\u53bb</p> <p>\u67e5\u627e:</p> <p>i = key % \u8868\u7684\u5927\u5c0f</p> <p>\u5982\u679ci\u4f4d\u4e0d\u662f\u8981\u67e5\u627e\u7684key\u5c31\u5f80\u540e\u67e5\u627e,\u76f4\u5230\u627e\u5230\u6216\u8005\u9047\u5230\u7a7a</p> <p>\u5982\u679c\u627e\u5230\u8868\u7ed3\u5c3e\u4f4d\u7f6e,\u8981\u5f80\u5934\u56de\u7ed5</p> <p>\u54c8\u5e0c\u51b2\u7a81\u8d8a\u591a,\u6548\u7387\u5c31\u8d8a\u4f4e</p> <p>\u8d1f\u8f7d\u56e0\u5b50/\u8f7d\u8377\u56e0\u5b50 = \u5b9e\u9645\u5b58\u8fdb\u53bb\u7684\u6570\u636e\u4e2a\u6570/\u8868\u7684\u5927\u5c0f</p> <p>\u95ed\u6563\u5217\uff08\u5f00\u653e\u5b9a\u5740\u6cd5\uff09:\u4e00\u822c\u4f1a\u63a7\u5236\u57280.7\u5de6\u53f3</p>"},{"location":"C%2B%2B-senior/hash/#insert","title":"\u7ebf\u6027\u63a2\u6d4b\u7684\u63d2\u5165Insert","text":"<p>\u5148\u770bFind\u91cc\u9762\u6709\u6ca1\u6709Key,\u6709\u7684\u8bdd\u5c31\u7ed3\u675f\u63d2\u5165\u3002</p> <p>\u4f46\u662f\u5728\u6620\u5c04key\u7684\u54c8\u5e0c\u503c\u65f6\uff0c\u5982\u679c\u662fint\u90a3\u5c31\u597d\u529e,\u5982\u679c\u662fstring\u7c7b\u578b\u600e\u4e48\u529e\u5450\uff1f</p> <p>\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u8981\u5199\u5199\u4e00\u4e2a\u54c8\u5e0c\u4eff\u51fd\u6570, \u56e0\u4e3astring\u6bd4\u8f83\u5e38\u7528\uff0c\u6211\u4eec\u628astring\u7279\u5316\u4e00\u4e0b</p> <pre><code>template &lt;class K&gt; \nstruct HashFunc {\n    size_t operator()(const K&amp; key) {\n        return (size_t)key;\n    }\n};\n\ntemplate&lt;&gt;\nstruct HashFunc &lt;string&gt; {\n    size_t operator ()(const string&amp; s) {\n        size_t hash = 0;\n        for (auto e : s) {\n            hash += e;\n            hash *= 131;\n        }\n        return hash;\n    }\n};\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u5c31\u53ef\u4ee5\u5199Find\u51fd\u6570\u4e86</p> <pre><code>HashData&lt;K, V&gt;* Find(const K&amp; key) {\n    Hash hs;\n    size_t hashi = hs(key) % _tables.size();\n    while (_tables[hashi]._state != EMPTY) {\n        if (_tables[hashi]._kv.first == key\n            &amp;&amp; _tables[hashi]._state == EXIST) {\n            return &amp;_tables[hashi];\n        }\n        hashi++;\n        hashi %= _tables.size();\n    }\n    return nullptr;\n}\n</code></pre> <p>\u518d\u6765\u5199Insert\u63d2\u5165,\u8fd9\u91cc\u8d1f\u8f7d\u56e0\u5b50\u5927\u4e8e0.7\u5c31\u53bb\u6269\u5bb9,\u4fdd\u8bc1\u4e0d\u6ee1,\u4e14\u4e0d\u4f1a\u6b7b\u9012\u5f52</p> <pre><code>bool Insert(const pair&lt;K, V&gt; kv) {\n    if (Find(kv.first))\n        return false;\n    if (_n * 10 / _tables.size() &gt;= 7) { // \u6ce8\u610f\u8fd9\u91cc\u662fsize,\u800c\u4e0d\u662fcapacity\n        HashTable&lt;K, V, Hash&gt; NewHT(_tables.size() * 2);\n        for (auto&amp; e : _tables)\n            if (e._state == EXIST) // \u5b58\u5728\u624d\u52a0\u5165\n                NewHT.Insert(e._kv); // \u63d2\u5165e._kv\n        _tables.swap(NewHT._tables); // \u4ea4\u6362tables\u5373\u53ef\n    }\n    Hash hs;\n    size_t hashi = hs(kv.first) % _tables.size();\n    while (_tables[hashi]._state == EXIST) {\n        hashi++;\n        hashi %= _tables.size();\n    }\n    _tables[hashi]._kv = kv;\n    _tables[hashi]._state = EXIST;\n    ++_n; // \u6700\u540e\u8bb0\u5f97++_n\u4e2a\u6570\n    return true; // \u6700\u540e\u8bb0\u5f97\u8fd4\u56detrue\n}\n</code></pre>"},{"location":"C%2B%2B-senior/hash/#erase","title":"\u7ebf\u6027\u63a2\u6d4b\u7684\u5220\u9664Erase","text":"<p>Erase\u53ea\u9700\u628a\u5b58\u5728\u7684\u72b6\u6001\u8bbe\u7f6e\u6210DELETE</p> <pre><code>bool Erase(const K&amp; key) {\n    HashData&lt;K, V&gt;* ret = Find(key);\n    if (ret) {\n        --_n;\n        ret-&gt;_state = DELETE;\n        return true;\n    }\n    else\n        return false;\n}\n</code></pre>"},{"location":"C%2B%2B-senior/hash/#_6","title":"\u54c8\u5e0c\u6876\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81","text":"<p>\u9996\u5148\u521b\u9020\u4e00\u4e2a\u8282\u70b9,\u4e3a\u94fe\u8868</p> <pre><code>struct HashNode {\n    HashNode&lt;K, V&gt;* _next;\n    pair&lt;K, V&gt; _kv;\n    HashNode(const pair&lt;K, V&gt; kv) //\u8bb0\u5f97\u5217\u8868\u521d\u59cb\u5316\n        :_next(nullptr)\n        ,_kv(kv)\n    {}\n};\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2aHash\u8868\uff0c\u52a0\u4e0a\u9ed8\u8ba4\u6784\u9020\u51fd\u6570</p> <pre><code>template&lt;class K, class V&gt;\nstruct HashTable {\n    typedef HashNode Node;\n    HashTable() {\n        _tables.resize(10, nullptr);\n    }\n\nprivate:\n    vector&lt;Node*&gt; _tables;\n    size_t n = 0;\n};\n</code></pre> <p>\u6dfb\u52a0\u4eff\u51fd\u6570</p> <pre><code>template &lt;class K&gt;\nstruct HashFunc {\n    size_t operator()(const K&amp; key) {\n        return (size_t)key;\n    }\n};\n\ntemplate&lt;&gt;\nstruct HashFunc &lt;string&gt; {\n    size_t operator ()(const string&amp; s) {\n        size_t hash = 0;\n        for (auto e : s) {\n            hash += e;\n            hash *= 131;\n        }\n        return hash;\n    }\n};\ntemplate&lt;class K, class V, class Hash = HashFunc&lt;K&gt;&gt;\n</code></pre> <p>\u5199\u4e00\u4e2aFind\u51fd\u6570\uff0c\u770btables\u91cc\u9762\u6709\u6ca1\u6709\u91cd\u590d\uff0c\u8fd9\u6837\u53ef\u4ee5\u9632\u6b62\u540e\u9762\u518d\u53bb\u67e5\u627e\u662f\u5426\u542b\u6709\u8fd9\u4e2a\u5143\u7d20</p> <pre><code>Node* Find(const K&amp; key) {\n    Hash hs;\n    size_t hashi = hs(key) % _tables.size();\n    Node* cur = _tables[hashi];\n    while (cur) {\n        if (cur-&gt;_kv.first == key)\n            return cur;\n        cur = cur-&gt;_next;\n    }\n    return nullptr;\n}\n</code></pre> <p>\u518d\u5199\u4e00\u4e2a\u6790\u6784\u51fd\u6570,\u4fdd\u8bc1\u53ef\u6790\u6784</p> <pre><code>~HashTable() {\n    for (int i = 0; i &lt; _tables.size(); ++i) {\n        Node* cur = _tables[i];\n        while (cur) {\n            Node* next = cur-&gt;_next;\n            delete cur;\n            cur = next;\n        }\n        _tables[i] = nullptr;\n    }\n}\n</code></pre>"},{"location":"C%2B%2B-senior/hash/#insert_1","title":"\u54c8\u5e0c\u6876\u7684Insert\u63d2\u5165\u51fd\u6570","text":"<pre><code>bool Insert(const pair&lt;K, V&gt; kv) {\n    if (Find(kv.first))\n        return false;\n    Hash hs;\n    if (_n == _tables.size()) {\n        vector&lt;Node*&gt; NewHT(_tables.size() * 2, nullptr);\n        for (int i = 0; i &lt; _tables.size(); ++i) {\n            Node* cur = _tables[i];\n            while (cur) {\n                Node* next = cur-&gt;_next;\n                size_t hashi = hs(cur-&gt;_kv.first) % NewHT.size(); // \u9700\u8981hs\u4e00\u4e0bfirst\n                cur-&gt;_next = NewHT[hashi];//\u76f4\u63a5\u7528cur\u6765\u94fe\u63a5\uff0c\u4e0d\u9700\u8981\u81ea\u5df1newnode\n                NewHT[hashi] = cur;\n                cur = next;\n            }\n            _tables[i] = nullptr;\n        }\n        _tables.swap(NewHT);\n    }\n    size_t hashi = hs(kv.first) % _tables.size();\n    Node* newnode = new Node(kv);\n    newnode-&gt;_next = _tables[hashi];\n    _tables[hashi] = newnode;\n    ++_n; //\u4e0d\u8981\u5fd8\u8bb0++_n\n    return true;\n}\n</code></pre>"},{"location":"C%2B%2B-senior/hash/#erase_1","title":"\u54c8\u5e0c\u6876\u7684Erase\u5220\u9664\u51fd\u6570","text":"<pre><code>bool Erase(const K&amp; key) {\n    Hash hs;\n    size_t hashi = hs(key) % _tables.size();\n    Node* prev = nullptr;\n    Node* cur = _tables[hashi];\n    while (cur) {\n        if (cur-&gt;_kv.first == key) {\n            if (prev)\n                prev-&gt;_next = cur-&gt;_next;\n            else\n                _tables[hashi] = cur-&gt;_next;\n            delete cur; // \u8bb0\u5f97delete cur\u548c--_n\n            --_n;\n            return true;\n        }\n        prev = cur;\n        cur = cur-&gt;_next;\n    }\n    return false;\n}\n</code></pre>"},{"location":"C%2B%2B-senior/hash/#umapset","title":"\u54c8\u5e0c\u5c01\u88c5umap\u3001set","text":"<p>\u6839\u636e\u7ea2\u9ed1\u6811\u5c01\u88c5map\u548cset\u7684\u65f6\u5019\uff0c\u9700\u8981\u7528\u4e00\u4e2a\u7ea2\u9ed1\u6811\u6765\u5c01\u88c5map\u548cset</p> <p>\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u4f9d\u7136\u7528\u4e00\u4e2a\u54c8\u5e0c\u8868\u6765\u5c01\u88c5unordered_map\u3001unordered_set</p>"},{"location":"C%2B%2B-senior/hash/#hashnode","title":"\u521b\u5efa\u4e00\u4e2aHashNode","text":"<pre><code>template&lt;class T&gt;\nstruct HashNode {\n    HashNode&lt;T&gt;* _next;\n    T _data;\n    HashNode(const T data)\n        :_next(nullptr)\n        , _data(data)\n    {}\n};\n</code></pre>"},{"location":"C%2B%2B-senior/hash/#__htiterator","title":"\u521b\u5efa\u4e00\u4e2a__HTIterator","text":"<pre><code>template&lt;class K, class T, class KeyOfT, class Hash&gt;\nstruct __HTIterator {\n    typedef HashNode&lt;T&gt; Node;\n    typedef HashTable&lt;K, T, KeyOfT, Hash&gt; HT;\n    typedef __HTIterator&lt;K, T, KeyOfT, Hash&gt; Self;\n\n    Node* _node;\n    HT* _ht;//HT*\n\n    __HTIterator(Node* node, HT* ht) \n        :_node(node)\n        ,_ht(ht)\n    {}\n    T&amp; operator*() {//T&amp;\n        return _node-&gt;_data;\n    }\n    Self&amp; operator++() {\n        if (_node-&gt;_next) {\n            _node =  _node-&gt;_next;\n        }\n        else {\n            Hash hs;\n            KeyOfT kot;\n            size_t hashi = hs(kot(cur-&gt;_data)) % _ht-&gt;_tables.size();//-&gt;\n            hashi++;\n            while (hashi &lt; _ht-&gt;_tables.size()) {\n                if (_ht-&gt;_tables[hashi]) {\n                    _node = _ht-&gt;_tables[hashi];\n                    break;\n                }\n                hashi++;\n            }\n\n            if (hashi == _ht-&gt;_tables.size())\n                _node = nullptr;\n        }\n        return *this;\n    }\n\n    bool operator!=(const Self&amp; s) {\n        return _node != s._node;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B-senior/hash/#hashtablekeyoft","title":"\u628aHashTable\u7528KeyOfT\u6539\u4e00\u4e0b","text":"<pre><code>template&lt;class K, class T, class KeyOfT, class Hash&gt;\nstruct HashTable {\n    typedef HashNode&lt;T&gt; Node;\n    public:\n    typedef __HTIterator&lt;K, T, KeyOfT, Hash&gt; iterator;\n\n    iterator begin() {\n        for (int i = 0; i &lt; _tables.size(); ++i) {\n            if (_tables[i]) {\n                return iterator(_tables[i], this);\n            }\n        }\n        return end();\n    }\n\n    iterator end() {\n        return iterator(nullptr, this);\n    }\n\n    HashTable() {\n        _tables.resize(10, nullptr);\n        _n = 0; // _n = 0 \u4e0d\u8981\u5fd8\u8bb0\n    }\n\n    ~HashTable() {\n        for (int i = 0; i &lt; _tables.size(); ++i) {\n            Node* cur = _tables[i];\n            while (cur) {\n                Node* next = cur-&gt;_next;\n                delete cur;\n                cur = next;\n            }\n            _tables[i] = nullptr;\n        }\n    }\n\n    bool Insert(const T&amp; data) { //T&amp;\n        KeyOfT kot;\n        if (Find(kot(data)))\n            return false;\n        Hash hs;\n        if (_n == _tables.size()) {\n            vector&lt;Node*&gt; NewHT(_tables.size() * 2, nullptr);\n            for (int i = 0; i &lt; _tables.size(); ++i) {\n                Node* cur = _tables[i];\n                while (cur) {\n                    Node* next = cur-&gt;_next;\n                    size_t hashi = hs(kot(cur-&gt;_data)) % NewHT.size(); // \u9700\u8981hs\u4e00\u4e0bfirst\n                    cur-&gt;_next = NewHT[hashi];//\u76f4\u63a5\u7528cur\u6765\u94fe\u63a5\uff0c\u4e0d\u9700\u8981\u81ea\u5df1newnode\n                    NewHT[hashi] = cur;\n                    cur = next;\n                }\n                _tables[i] = nullptr;\n            }\n            _tables.swap(NewHT);\n        }\n        size_t hashi = hs(kot(data)) % _tables.size();\n        Node* newnode = new Node(data);\n        newnode-&gt;_next = _tables[hashi];\n        _tables[hashi] = newnode;\n        ++_n;\n        return true;\n    }\n\n    Node* Find(const K&amp; key) {\n        KeyOfT kot;\n        Hash hs;\n        size_t hashi = hs(key) % _tables.size();\n        Node* cur = _tables[hashi];\n        while (cur) {\n            if (kot(cur-&gt;_data) == key)\n                return cur;\n            cur = cur-&gt;_next;\n        }\n        return nullptr;\n    }\n\n    bool Erase(const K&amp; key) {\n        KeyOfT kot;\n        Hash hs;\n        size_t hashi = hs(key) % _tables.size();\n        Node* prev = nullptr;\n        Node* cur = _tables[hashi];\n        while (cur) {\n            if (kot(cur-&gt;_data) == key) {\n                if (prev)\n                    prev-&gt;_next = cur-&gt;_next;\n                else\n                    _tables[hashi] = cur-&gt;_next;\n                delete cur; // \u8bb0\u5f97delete cur\u548c--_n\n                --_n;\n                return true;\n            }\n            prev = cur;\n            cur = cur-&gt;_next;\n        }\n        return false;\n    }\nprivate:\n    vector&lt;Node*&gt; _tables;\n    size_t _n;\n};\n</code></pre>"},{"location":"C%2B%2B-senior/hash/#myordered_seth","title":"\u6dfb\u52a0\u4e00\u4e2aMyOrdered_set.h","text":"<pre><code>#include \"HashTable.h\"\n\nnamespace lkt {\n    template &lt;class K, class Hash = HashFunc&lt;K&gt;&gt; \n    class unordered_set {\n        struct SetKeyOfT\n        {\n            const K&amp; operator()(const K&amp; key) {\n                return key;\n            }\n        };\n        typedef typename lkt2::HashTable&lt;K, const K, SetKeyOfT, Hash&gt;::iterator iterator;\n        iterator begin() {\n            return  _ht.begin();\n        }\n\n        iterator end() {\n            return _ht.end();\n        }\n\n        bool Insert(const K&amp; key) {\n            return _ht.Insert(key);\n        }\n    private:\n        lkt2::HashTable&lt;K, V, SetKeyOfT, Hash&gt; _ht;\n    };\n}\n\n</code></pre> <p>\u5728__HTIterator\u524d\u6dfb\u52a0\uff0c\u524d\u7f6e\u58f0\u660e</p> <pre><code>template&lt;class K, class T, class KeyOfT, class Hash&gt;\nstruct HashTable;\n</code></pre> <p>\u5728HashTab\u91cc\u9762\u53cb\u5143\u4e00\u4e2a</p> <pre><code>template&lt;class K, class T, class KeyOfT, class Hash&gt;\nfriend struct __HTIterator;\n</code></pre>"},{"location":"C%2B%2B-senior/hash/#myordered_maph","title":"\u6dfb\u52a0\u4e00\u4e2aMyOrdered_map.h","text":"<pre><code>#include \"HashTable.h\"\nnamespace lkt {\n    template &lt;class K, class V, class Hash = HashFunc&lt;K&gt;&gt;\n    class unordered_map {\n        struct MapKeyOfT {\n            const K&amp; operator()(const pair&lt;K, V&gt;&amp; kv) {\n                return kv.first;\n            }\n        };\n    public:\n        typedef typename lkt2::HashTable&lt;K, pair&lt;const K, V&gt;, MapKeyOfT, Hash&gt;::iterator iterator;\n        iterator begin() {\n            return _ht.begin();\n        }\n\n        iterator end() {\n            return _ht.end();\n        }\n\n        bool Insert(const pair&lt;K, V&gt; kv) {\n            return _ht.Insert(kv);\n        }\n\n    private:\n        lkt2::HashTable&lt;K, pair&lt;const K, V&gt;, MapKeyOfT, Hash&gt; _ht;\n    };\n}\n</code></pre>"},{"location":"C%2B%2B-senior/hash/#hashtable","title":"HashTable\u6c47\u603b\u4ee3\u7801","text":"<pre><code>#pragma once\n\n#include &lt;iostream&gt;\nusing namespace std;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\ntemplate &lt;class K&gt;\nstruct HashFunc {\n    size_t operator()(const K&amp; key) {\n        return (size_t)key;\n    }\n};\n\ntemplate&lt;&gt;\nstruct HashFunc &lt;string&gt; {\n    size_t operator ()(const string&amp; s) {\n        size_t hash = 0;\n        for (auto e : s) {\n            hash += e;\n            hash *= 131;\n        }\n        return hash;\n    }\n};\n\nnamespace lkt2 {\n\n    template&lt;class T&gt;\n    struct HashNode {\n        HashNode&lt;T&gt;* _next;\n        T _data;\n        HashNode(const T data)\n            :_next(nullptr)\n            , _data(data)\n        {}\n    };\n\n    template&lt;class K, class T, class KeyOfT, class Hash&gt;\n    struct HashTable;\n\n\n\n    template&lt;class K, class T, class KeyOfT, class Hash&gt;\n    struct __HTIterator {\n        typedef HashNode&lt;T&gt; Node;\n        typedef HashTable&lt;K, T, KeyOfT, Hash&gt; HT;\n        typedef __HTIterator&lt;K, T, KeyOfT, Hash&gt; Self;\n        __HTIterator(Node* node, HT* ht) \n            :_node(node)\n            ,_ht(ht)\n        {}\n        T&amp; operator*() {//T&amp;\n            return _node-&gt;_data;\n        }\n        Self&amp; operator++() {\n            if (_node-&gt;_next) {\n                _node =  _node-&gt;_next;\n            }\n            else {\n                Hash hs;\n                KeyOfT kot;\n                size_t hashi = hs(kot(_node-&gt;_data)) % _ht-&gt;_tables.size();//-&gt;\n                hashi++;\n                while (hashi &lt; _ht-&gt;_tables.size()) {\n                    if (_ht-&gt;_tables[hashi]) {\n                        _node = _ht-&gt;_tables[hashi];\n                        break;\n                    }\n                    hashi++;\n                }\n\n                if (hashi == _ht-&gt;_tables.size())\n                    _node = nullptr;\n            }\n            return *this;\n        }\n\n        bool operator!=(const Self&amp; s) {\n            return _node != s._node;\n        }\n    private:\n        Node* _node;\n        HT* _ht;//HT*\n    };\n\n    template&lt;class K, class T, class KeyOfT, class Hash&gt;\n    struct HashTable {\n        template&lt;class K, class T, class KeyOfT, class Hash&gt;\n        friend struct __HTIterator;\n        typedef HashNode&lt;T&gt; Node;\n    public:\n        typedef __HTIterator&lt;K, T, KeyOfT, Hash&gt; iterator;\n\n        iterator begin() {\n            for (int i = 0; i &lt; _tables.size(); ++i) {\n                if (_tables[i]) {\n                    return iterator(_tables[i], this);\n                }\n            }\n            return end();\n        }\n\n        iterator end() {\n            return iterator(nullptr, this);\n        }\n\n        HashTable() {\n            _tables.resize(10, nullptr);\n            _n = 0; // _n = 0 \u4e0d\u8981\u5fd8\u8bb0\n        }\n\n        ~HashTable() {\n            for (int i = 0; i &lt; _tables.size(); ++i) {\n                Node* cur = _tables[i];\n                while (cur) {\n                    Node* next = cur-&gt;_next;\n                    delete cur;\n                    cur = next;\n                }\n                _tables[i] = nullptr;\n            }\n        }\n\n        bool Insert(const T&amp; data) { //T&amp;\n            KeyOfT kot;\n            if (Find(kot(data)))\n                return false;\n            Hash hs;\n            if (_n == _tables.size()) {\n                vector&lt;Node*&gt; NewHT(_tables.size() * 2, nullptr);\n                for (int i = 0; i &lt; _tables.size(); ++i) {\n                    Node* cur = _tables[i];\n                    while (cur) {\n                        Node* next = cur-&gt;_next;\n                        size_t hashi = hs(kot(cur-&gt;_data)) % NewHT.size(); // \u9700\u8981hs\u4e00\u4e0bfirst\n                        cur-&gt;_next = NewHT[hashi];//\u76f4\u63a5\u7528cur\u6765\u94fe\u63a5\uff0c\u4e0d\u9700\u8981\u81ea\u5df1newnode\n                        NewHT[hashi] = cur;\n                        cur = next;\n                    }\n                    _tables[i] = nullptr;\n                }\n                _tables.swap(NewHT);\n            }\n            size_t hashi = hs(kot(data)) % _tables.size();\n            Node* newnode = new Node(data);\n            newnode-&gt;_next = _tables[hashi];\n            _tables[hashi] = newnode;\n            ++_n;\n            return true;\n        }\n\n        Node* Find(const K&amp; key) {\n            KeyOfT kot;\n            Hash hs;\n            size_t hashi = hs(key) % _tables.size();\n            Node* cur = _tables[hashi];\n            while (cur) {\n                if (kot(cur-&gt;_data) == key)\n                    return cur;\n                cur = cur-&gt;_next;\n            }\n            return nullptr;\n        }\n\n        bool Erase(const K&amp; key) {\n            KeyOfT kot;\n            Hash hs;\n            size_t hashi = hs(key) % _tables.size();\n            Node* prev = nullptr;\n            Node* cur = _tables[hashi];\n            while (cur) {\n                if (kot(cur-&gt;_data) == key) {\n                    if (prev)\n                        prev-&gt;_next = cur-&gt;_next;\n                    else\n                        _tables[hashi] = cur-&gt;_next;\n                    delete cur; // \u8bb0\u5f97delete cur\u548c--_n\n                    --_n;\n                    return true;\n                }\n                prev = cur;\n                cur = cur-&gt;_next;\n            }\n            return false;\n        }\n    private:\n        vector&lt;Node*&gt; _tables;\n        size_t _n;\n    };\n}\n</code></pre>"},{"location":"C%2B%2B-senior/%E7%BA%A2%E9%BB%91%E6%A0%91/","title":"\u7ea2\u9ed1\u6811","text":""},{"location":"C%2B%2B-senior/%E7%BA%A2%E9%BB%91%E6%A0%91/#_2","title":"\u4e00\u3001\u7ea2\u9ed1\u6811","text":""},{"location":"C%2B%2B-senior/%E7%BA%A2%E9%BB%91%E6%A0%91/#_3","title":"\uff08\u4e00\uff09\u7ea2\u9ed1\u6811\u7684\u6982\u5ff5","text":"<p>\u7ea2\u9ed1\u6811\uff0c\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4f46\u5728\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u589e\u52a0\u4e00\u4e2a\u5b58\u50a8\u4f4d\u8868\u793a\u7ed3\u70b9\u7684\u989c\u8272\uff0c\u53ef\u4ee5\u662fRed\u6216 Black\u3002 \u901a\u8fc7\u5bf9\u4efb\u4f55\u4e00\u6761\u4ece\u6839\u5230\u53f6\u5b50\u7684\u8def\u5f84\u4e0a\u5404\u4e2a\u7ed3\u70b9\u7740\u8272\u65b9\u5f0f\u7684\u9650\u5236\uff0c\u7ea2\u9ed1\u6811\u786e\u4fdd\u6ca1\u6709\u4e00\u6761\u8def \u5f84\u4f1a\u6bd4\u5176\u4ed6\u8def\u5f84\u957f\u51fa\u4fe9\u500d\uff0c\u56e0\u800c\u662f\u63a5\u8fd1\u5e73\u8861\u7684\u3002</p>"},{"location":"C%2B%2B-senior/%E7%BA%A2%E9%BB%91%E6%A0%91/#_4","title":"\uff08\u4e8c\uff09 \u7ea2\u9ed1\u6811\u7684\u6027\u8d28","text":"<ol> <li>\u6bcf\u4e2a\u7ed3\u70b9\u4e0d\u662f\u7ea2\u8272\u5c31\u662f\u9ed1\u8272</li> <li>\u6839\u8282\u70b9\u662f\u9ed1\u8272\u7684</li> <li>\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u5219\u5b83\u7684\u4e24\u4e2a\u5b69\u5b50\u7ed3\u70b9\u662f\u9ed1\u8272\u7684</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u4ece\u8be5\u7ed3\u70b9\u5230\u5176\u6240\u6709\u540e\u4ee3\u53f6\u7ed3\u70b9\u7684\u7b80\u5355\u8def\u5f84\u4e0a\uff0c\u5747 \u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u7ed3\u70b9</li> <li>\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u90fd\u662f\u9ed1\u8272\u7684(\u6b64\u5904\u7684\u53f6\u5b50\u7ed3\u70b9\u6307\u7684\u662f\u7a7a\u7ed3\u70b9)</li> </ol> <p>\u95ee\uff1a\u4e3a\u4ec0\u4e48\u6ee1\u8db3\u4e0a\u9762\u7684\u6027\u8d28\uff0c\u7ea2\u9ed1\u6811\u5c31\u80fd\u4fdd\u8bc1\uff1a\u5176\u6700\u957f\u8def\u5f84\u4e2d\u8282\u70b9\u4e2a\u6570\u4e0d\u4f1a\u8d85\u8fc7\u6700\u77ed\u8def\u5f84\u8282\u70b9 \u4e2a\u6570\u7684\u4e24\u500d\uff1f</p> <p>\u7b54\uff1a</p> <p>\u6700\u77ed\u8def\u5f84\uff1a\u5168\u90e8\u4e3a\u9ed1\u8272\u7684</p> <p>\u6700\u957f\u8def\u5f84\uff1a\u4e00\u9ed1\u4e00\u7ea2</p> <p>\u6240\u4ee5\u6ee1\u8db3\u6700\u77ed\u8def\u5f84\u6070\u597d\u7b49\u4e8e\u6700\u957f\u8def\u5f84\u7684\u4e8c\u500d\u3002</p>"},{"location":"C%2B%2B-senior/%E7%BA%A2%E9%BB%91%E6%A0%91/#_5","title":"\uff08\u4e09\uff09\u7ea2\u9ed1\u6811\u8282\u70b9\u7684\u5b9a\u4e49","text":"<p>\u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\uff0c\u6765\u533a\u5206\u7ea2\u8272\u548c\u9ed1\u8272</p> <pre><code>enum color {\n    RED,\n    BLACK\n};\n</code></pre> <p>\u601d\u8003\uff1a\u9ed8\u8ba4\u7684\u8282\u70b9\u5b9a\u4e49\u4e3a\u7ea2\u8272\u8fd8\u662f\u9ed1\u8272\uff1f</p> <p>\u7b54\uff1a\u7ea2\u8272\uff0c\u56e0\u4e3a\u9ed1\u8272\u4e00\u589e\u52a0\uff0c\u5176\u4f59\u6240\u6709\u7684\u8282\u70b9\u90fd\u8981\u589e\u52a0\u4e00\u4e2a\u9ed1\u8272\u7ed3\u70b9\uff0c\u5f00\u9500\u5f88\u5927\u3002</p> <pre><code>template&lt;class K, class V&gt; \nstruct RBTreeNode {\n    RBTreeNode&lt;K, V&gt;* _left;\n    RBTreeNode&lt;K, V&gt;* _right;\n    RBTreeNode&lt;K, V&gt;* _parent;\n    pair&lt;K, V&gt; _kv;\n    color _col;\n    RBTreeNode(const pair&lt;K, V&gt;&amp; kv)\n        :_left(nullptr)\n        ,_right(nullptr)\n        ,_parent(nullptr)\n        ,_kv(kv)\n        ,_col(RED)\n    {}\n};\n</code></pre>"},{"location":"C%2B%2B-senior/%E7%BA%A2%E9%BB%91%E6%A0%91/#_6","title":"\u4e8c\u3001\u7ea2\u9ed1\u6811\u7684\u63d2\u5165","text":"<p>\u9996\u5148\u627e\u5230cur\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u548cAVL\u6811\u7684\u63d2\u5165\u662f\u4e00\u6837\u7684\uff0c\u552f\u4e00\u4e0d\u4e00\u6837\u7684\u5c31\u662f\u4ee5\u524d\u662f\u5e73\u8861\u56e0\u5b50\u6539\u53d8\uff0c\u53d8\u6210\u4e86\u989c\u8272\u6539\u53d8\uff0c\u6240\u4ee5\u5c31\u4e0d\u518d\u4ecb\u7ecd\u3002\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>template&lt;class K, class V&gt; \nstruct RBTree {\npublic:\n    typedef RBTreeNode&lt;K, V&gt; Node;\n    bool Insert(const pair&lt;K, V&gt;&amp; kv) {\n        if (_root == nullptr) {\n            _root = new Node(kv);\n            _root-&gt;_col = BLACK;\n            return true;\n        }\n        Node* cur = _root;\n        Node* parent = nullptr;\n        while (cur) {\n            if (cur-&gt;_kv.first &gt; kv.first) {\n                parent = cur;\n                cur = cur-&gt;_left;\n            }\n            else if (cur-&gt;_kv.first &lt; kv.first) {\n                parent = cur;\n                cur = cur-&gt;right;\n            }\n            else\n                return false;\n        }\n        cur = new Node(kv);\n        if (parent-&gt;_kv.first &lt; kv.first)\n            parent-&gt;_right = cur;\n        else\n            parent-&gt;_left = cur;\n        cur-&gt;_parent = parent;      \n    }\nprivate:\n    Node* _root;\n};\n</code></pre> <p>\u6b63\u5f0f\u8fdb\u5165\u63d2\u5165\u73af\u8282\uff1a</p> <p>\u63d2\u5165\u65b0\u8282\u70b9\u7684\u989c\u8272\uff1a\u7ea2\u8272</p> <p>1.\u63d2\u5165\u4f4d\u7f6e\u7236\u4eb2\u7684\u989c\u8272\u662f\u9ed1\u8272\uff0c\u4e0d\u9700\u8981\u5904\u7406\uff0c\u63d2\u5165\u7ed3\u675f</p> <p>2.\u63d2\u5165\u4f4d\u7f6e\u7684\u7236\u4eb2\u989c\u8272\u662f\u7ea2\u8272\uff0c\u51fa\u73b0\u4e86\u8fde\u7eed\u7684\u7ea2\u8272\u8282\u70b9\uff0c\u9700\u8981\u5904\u7406</p> <p>\u8fd9\u91cc\u5b9a\u4e49\u7237\u7237(g)\u7684\u53e6\u5916\u4e00\u4e2a\u7ed3\u70b9\u4e3a\u53d4\u53d4\u8282\u70b9\uff0c\u7b80\u79f0uncle/u</p> <p>\u60c5\u51b5\u4e00\uff1au\u5b58\u5728\u4e14\u4e3a\u7ea2</p> <p>p/u\u53d8\u9ed1\u3001g\u53d8\u7ea2\uff08\u5982\u679cg\u662froot\uff0c\u518d\u628ag\u53d8\u6210\u9ed1\uff09=&gt; c\u53d8\u6210g\uff0cp\u53d8\u6210c\u7684\u7236\u4eb2\uff08\u4f20\u9012\u4e0a\u53bb\uff09</p> <p>\u6ce8\uff1a</p> <p>p/u\u662fg\u7684\u5de6\u53f3\u90fd\u4e0d\u5f71\u54cd</p> <p>cur\u662fp\u7684\u5de6\u53f3\u4e5f\u4e0d\u5f71\u54cd</p> <p>\u7531\u4e8e\u6839\u8282\u70b9\u6c38\u8fdc\u662f\u9ed1\u8272\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u5916\u9762\u5b9a\u4e49\u4e00\u4e0b_root-&gt;_col = BLACK</p> <p>\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>while (parent &amp;&amp; parent-&gt;_col == RED) {\n    Node* grandfather = parent-&gt;_parent;\n    if (parent == grandfather-&gt;_left) {\n        Node* uncle = grandfather-&gt;_right;\n        if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n            // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n            parent-&gt;_col = uncle-&gt;_col = BLACK;\n            grandfather-&gt;_col = RED;\n            cur = grandfather;\n            parent = cur-&gt;_parent;\n        }\n        else {\n            //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n        }\n    }\n    else {\n        Node* uncle = grandfather-&gt;_left;\n        if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n            // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n            parent-&gt;_col = uncle-&gt;_col = BLACK;\n            grandfather-&gt;_col = RED;\n            cur = grandfather;\n            parent = cur-&gt;_parent;\n        }\n        else {\n            //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n\n        }\n    }\n}\n        _root-&gt;_col = BLACK;\n</code></pre> <p>\u60c5\u51b5\u4e8c: uncle\u4e0d\u5b58\u5728\uff0c\u6216\u8005uncle\u4e3a\u9ed1\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u65cb\u8f6c+\u53d8\u8272(\u5173\u952e\u5728\u4e8e\u753b\u56fe)\uff0c\u65cb\u8f6c\u4ee3\u7801\u548cAVL\u6811\u4e00\u6837\u4e0d\u518d\u8bb2\u89e3\u3002</p> <pre><code>while (parent &amp;&amp; parent-&gt;_col == RED) {\n    Node* grandfather = parent-&gt;_parent;\n    if (parent == grandfather-&gt;_left) {\n        Node* uncle = grandfather-&gt;_right;\n        if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n            // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n            parent-&gt;_col = uncle-&gt;_col = BLACK;\n            grandfather-&gt;_col = RED;\n            cur = grandfather;\n            parent = cur-&gt;_parent;\n        }\n        else {\n            //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n            if (parent-&gt;_left == cur) {\n                //     g\n                //   p   u\n                // c\n                RotateR(grandfather);\n                parent-&gt;_col = BLACK;\n                grandfather-&gt;_col = RED;\n            }\n            else {\n                //   g\n                // p   u\n                //   c\n                RotateL(parent);\n                RotateR(grandfather);\n                cur-&gt;_col = BLACK;\n                grandfather-&gt;_col = RED;\n            }\n            break;\n        }\n    }\n    else {\n        Node* uncle = grandfather-&gt;_left;\n        if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n            // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n            parent-&gt;_col = uncle-&gt;_col = BLACK;\n            grandfather-&gt;_col = RED;\n            cur = grandfather;\n            parent = cur-&gt;_parent;\n        }\n        else {\n            //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n            if (parent-&gt;_right == cur) {\n                //   g\n                // u   p\n                //       c\n                RotateL(grandfather);\n                parent-&gt;_col = BLACK;\n                grandfather-&gt;_col = RED;\n            }\n            else {\n                //   g\n                // u   p\n                //   c\n                RotateR(parent);\n                RotateL(grandfather);\n                cur-&gt;_col = BLACK;\n                grandfather-&gt;_col = RED;\n            }\n            break;\n        }\n    }\n}\n_root-&gt;_col = BLACK;\n</code></pre>"},{"location":"C%2B%2B-senior/%E7%BA%A2%E9%BB%91%E6%A0%91/#_7","title":"\u4e09\u3001\u7ea2\u9ed1\u6811\u7684\u5e73\u8861\u9a8c\u8bc1","text":"<pre><code>bool Check(Node* root, int BlackNum, int RefBlackNum) {\n    if (root == nullptr) {\n        if (BlackNum != RefBlackNum) {\n            cout &lt;&lt; \"\u9ed1\u8272\u4e2a\u6570\u4e0d\u76f8\u7b49\" &lt;&lt; endl;\n            return false;\n        }\n        return true;\n    }\n\n    if (root-&gt;_col == BLACK)\n        BlackNum++;\n\n    if (root-&gt;_col == RED &amp;&amp; root-&gt;_parent-&gt;_col == RED) {\n        cout &lt;&lt; \"\u51fa\u73b0\u8fde\u7eed\u7ea2\u8272\u8282\u70b9\" &lt;&lt; endl;\n        return false;\n    }\n\n    return Check(root-&gt;_left, BlackNum, RefBlackNum)\n        &amp;&amp; Check(root-&gt;_right, BlackNum, RefBlackNum);\n}\n\nbool IsBalance() {\n    if (_root &amp;&amp; _root-&gt;_col == RED)\n        return false;\n    int RefBlackNum = 0;\n    Node* cur = _root;\n    while (cur) {\n        if (cur-&gt;_col == BLACK)\n            RefBlackNum++;\n        cur = cur-&gt;_left;\n    }\n    return Check(_root, 0, RefBlackNum);\n}\n</code></pre>"},{"location":"C%2B%2B-senior/%E7%BA%A2%E9%BB%91%E6%A0%91/#_8","title":"\u56db\u3001\u4ee3\u7801\u6c47\u603b","text":"<pre><code>#pragma once\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;assert.h&gt;\nusing namespace std;\nenum color {\n    RED,\n    BLACK\n};\n\ntemplate&lt;class K, class V&gt; \nstruct RBTreeNode {\n    RBTreeNode&lt;K, V&gt;* _left;\n    RBTreeNode&lt;K, V&gt;* _right;\n    RBTreeNode&lt;K, V&gt;* _parent;\n    pair&lt;K, V&gt; _kv;\n    color _col;\n    RBTreeNode(const pair&lt;K, V&gt;&amp; kv)\n        :_left(nullptr)\n        ,_right(nullptr)\n        ,_parent(nullptr)\n        ,_kv(kv)\n        ,_col(RED)\n    {}\n};\n\ntemplate&lt;class K, class V&gt; \nstruct RBTree {\npublic:\n    typedef RBTreeNode&lt;K, V&gt; Node;\n    bool Insert(const pair&lt;K, V&gt;&amp; kv) {\n        if (_root == nullptr) {\n            _root = new Node(kv);\n            _root-&gt;_col = BLACK;\n            return true;\n        }\n        Node* cur = _root;\n        Node* parent = nullptr;\n        while (cur) {\n            if (cur-&gt;_kv.first &gt; kv.first) {\n                parent = cur;\n                cur = cur-&gt;_left;\n            }\n            else if (cur-&gt;_kv.first &lt; kv.first) {\n                parent = cur;\n                cur = cur-&gt;_right;\n            }\n            else\n                return false;\n        }\n        cur = new Node(kv);\n        if (parent-&gt;_kv.first &lt; kv.first)\n            parent-&gt;_right = cur;\n        else\n            parent-&gt;_left = cur;\n        cur-&gt;_parent = parent;      \n        while (parent &amp;&amp; parent-&gt;_col == RED) {\n            Node* grandfather = parent-&gt;_parent;\n            if (parent == grandfather-&gt;_left) {\n                Node* uncle = grandfather-&gt;_right;\n                if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n                    // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n                    parent-&gt;_col = uncle-&gt;_col = BLACK;\n                    grandfather-&gt;_col = RED;\n                    cur = grandfather;\n                    parent = cur-&gt;_parent;\n                }\n                else {\n                    //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n                    if (parent-&gt;_left == cur) {\n                        //     g\n                        //   p   u\n                        // c\n                        RotateR(grandfather);\n                        parent-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    else {\n                        //   g\n                        // p   u\n                        //   c\n                        RotateL(parent);\n                        RotateR(grandfather);\n                        cur-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    break;\n                }\n            }\n            else {\n                Node* uncle = grandfather-&gt;_left;\n                if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n                    // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n                    parent-&gt;_col = uncle-&gt;_col = BLACK;\n                    grandfather-&gt;_col = RED;\n                    cur = grandfather;\n                    parent = cur-&gt;_parent;\n                }\n                else {\n                    //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n                    if (parent-&gt;_right == cur) {\n                        //   g\n                        // u   p\n                        //       c\n                        RotateL(grandfather);\n                        parent-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    else {\n                        //   g\n                        // u   p\n                        //   c\n                        RotateR(parent);\n                        RotateL(grandfather);\n                        cur-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    break;\n                }\n            }\n        }\n        _root-&gt;_col = BLACK;\n        return true;\n    }\n\n    void RotateL(Node* parent)\n    {\n\n        Node* subR = parent-&gt;_right;\n        Node* subRL = subR-&gt;_left;\n\n        parent-&gt;_right = subRL;\n        if (subRL)\n            subRL-&gt;_parent = parent;\n\n        subR-&gt;_left = parent;\n        Node* ppnode = parent-&gt;_parent;\n        parent-&gt;_parent = subR;\n\n        if (parent == _root)\n        {\n            _root = subR;\n            subR-&gt;_parent = nullptr;\n        }\n        else\n        {\n            if (ppnode-&gt;_left == parent)\n            {\n                ppnode-&gt;_left = subR;\n            }\n            else\n            {\n                ppnode-&gt;_right = subR;\n            }\n            subR-&gt;_parent = ppnode;\n        }\n    }\n\n    void RotateR(Node* parent)\n    {\n        Node* subL = parent-&gt;_left;\n        Node* subLR = subL-&gt;_right;\n\n        parent-&gt;_left = subLR;\n        if (subLR)\n            subLR-&gt;_parent = parent;\n\n        subL-&gt;_right = parent;\n\n        Node* ppnode = parent-&gt;_parent;\n        parent-&gt;_parent = subL;\n\n        if (parent == _root)\n        {\n            _root = subL;\n            subL-&gt;_parent = nullptr;\n        }\n        else\n        {\n            if (ppnode-&gt;_left == parent)\n            {\n                ppnode-&gt;_left = subL;\n            }\n            else\n            {\n                ppnode-&gt;_right = subL;\n            }\n            subL-&gt;_parent = ppnode;\n        }\n    }\n\n    bool Check(Node* root, int BlackNum, int RefBlackNum) {\n        if (root == nullptr) {\n            if (BlackNum != RefBlackNum) {\n                cout &lt;&lt; \"\u9ed1\u8272\u4e2a\u6570\u4e0d\u76f8\u7b49\" &lt;&lt; endl;\n                return false;\n            }\n            return true;\n        }\n\n        if (root-&gt;_col == BLACK)\n            BlackNum++;\n\n        if (root-&gt;_col == RED &amp;&amp; root-&gt;_parent-&gt;_col == RED) {\n            cout &lt;&lt; \"\u51fa\u73b0\u8fde\u7eed\u7ea2\u8272\u8282\u70b9\" &lt;&lt; endl;\n            return false;\n        }\n\n        return Check(root-&gt;_left, BlackNum, RefBlackNum)\n            &amp;&amp; Check(root-&gt;_right, BlackNum, RefBlackNum);\n    }\n\n    bool IsBalance() {\n        if (_root &amp;&amp; _root-&gt;_col == RED)\n            return false;\n        int RefBlackNum = 0;\n        Node* cur = _root;\n        while (cur) {\n            if (cur-&gt;_col == BLACK)\n                RefBlackNum++;\n            cur = cur-&gt;_left;\n        }\n        return Check(_root, 0, RefBlackNum);\n    }\n\nprivate:\n    Node* _root = nullptr;\n};\n\nvoid TestRBTree()\n{\n    const int N = 1000000;\n    vector&lt;int&gt; v;\n    v.reserve(N);\n    srand(time(0));\n\n    for (size_t i = 0; i &lt; N; i++)\n    {\n        v.push_back(rand() + i);\n    }\n    RBTree&lt;int, int&gt; t;\n    for (auto e : v)\n    {\n        t.Insert(make_pair(e, e));\n    }\n    cout &lt;&lt; t.IsBalance() &lt;&lt; endl;\n}\n</code></pre>"},{"location":"C%2B%2B-senior/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%AE%9E%E7%8E%B0map%E5%92%8Cset/","title":"\u7ea2\u9ed1\u6811\u5b9e\u73b0map\u548cset","text":"<p>\u4e3a\u4e86\u8fd0\u7528\u7ea2\u9ed1\u6811\u7684\u4e00\u5957\u5de5\u5177\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u7ea2\u9ed1\u6811\u8bbe\u7f6e\u4e3a3\u4e2a\u6a21\u7248</p> <p>\u7b2c\u4e00\u4e2a\u8868\u793akey\uff0c\u7b2c\u4e8c\u4e2a\u8868\u793akey/key_value\uff0c\u7b2c\u4e09\u4e2a\u8868\u793a\u4eff\u51fd\u6570\u6765\u89e3\u51b3key\u76f4\u63a5\u7684\u6bd4\u8f83</p> <p>\u540c\u65f6\u6dfb\u52a0\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668iterator\u6765\u4f5c\u4e3a\u8fed\u4ee3\u5668</p> <p>BRTree.h:</p> <pre><code>#pragma once\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;assert.h&gt;\nusing namespace std;\nenum color {\n    RED,\n    BLACK\n};\n\ntemplate&lt;class T&gt;\nstruct RBTreeNode {\n    RBTreeNode&lt;T&gt;* _left;\n    RBTreeNode&lt;T&gt;* _right;\n    RBTreeNode&lt;T&gt;* _parent;\n    T _data;\n    color _col;\n    RBTreeNode(const T&amp; data)\n        :_left(nullptr)\n        , _right(nullptr)\n        , _parent(nullptr)\n        , _data(data)\n        , _col(RED)\n    {}\n};\n\ntemplate&lt;class T, class Ptr, class Ref&gt; \nstruct RBTreeIterator {\n    typedef RBTreeNode&lt;T&gt; Node;\n    typedef RBTreeIterator&lt;T, Ptr, Ref&gt; Self;\n    Node* _node;\n    RBTreeIterator(Node* node)\n        :_node(node)\n    {}\n\n    Ptr operator-&gt;() {\n        return &amp;_node-&gt;_data;\n    }\n\n    Ref operator*() {\n        return _node-&gt;_data;\n    }\n\n    Self&amp; operator++() {\n        if (_node-&gt;_right) {\n            Node* SubLeft = _node-&gt;_right;\n            while (SubLeft-&gt;_left)\n                SubLeft = SubLeft-&gt;_left;\n            _node = SubLeft;\n        }\n        else {\n            Node* cur = _node;\n            Node* parent = cur-&gt;_parent;\n            while (parent &amp;&amp; cur == parent-&gt;_right) {\n                cur = parent;\n                parent = cur-&gt;_parent;\n            }\n            _node = parent;\n        }\n        return *this;\n    }\n\n    Self&amp; operator--() {\n        if (_node-&gt;_left) {\n            Node* SubRight = _node-&gt;_left;\n            while (SubRight-&gt;_right)\n                SubRight = SubRight-&gt;_right;\n            _node = SubRight;\n        }\n        else {\n            Node* cur = _node;\n            Node* parent = _node-&gt;_parent;\n            while (parent &amp;&amp; cur == parent-&gt;_left) {\n                cur = parent;\n                parent = parent-&gt;_parent;\n            }\n            _node = parent;\n        }\n        return *this;\n    }\n\n    bool operator!=(const Self&amp; s) {\n        return _node != s._node;\n    }\n\n    bool operator==(const Self&amp; s) {\n        return _node == s._node;\n    }\n};\n\ntemplate&lt;class K, class T, class KeyOfT&gt;\nstruct RBTree {\npublic:\n    typedef RBTreeNode&lt;T&gt; Node;\n    typedef RBTreeIterator&lt;T, T*, T&amp;&gt; iterator;\n    typedef RBTreeIterator&lt;T, const T*, const T&amp;&gt; const_iterator;\n    const_iterator begin() const {\n        Node* SubLeft = _root;\n        while (SubLeft &amp;&amp; SubLeft-&gt;_left)\n            SubLeft = SubLeft-&gt;_left;\n        return const_iterator(SubLeft);\n    }\n\n    const_iterator end() const {\n        const_iterator(nullptr);\n    }\n\n    iterator begin() {\n        Node* SubLeft = _root;\n        while (SubLeft &amp;&amp; SubLeft-&gt;_left)\n            SubLeft = SubLeft-&gt;_left;\n        return iterator(SubLeft);\n    }\n\n    iterator end() {\n        return iterator(nullptr);\n    }\n\n    iterator Find(const K&amp; key) {\n        KeyOfT kot;\n        Node* cur = _root;\n        while (cur) {\n            if (kot(cur-&gt;_data) &lt; key)\n                cur = cur-&gt;_right;\n            else if (kot(cur-&gt;_data) &gt; key)\n                cur = cur-&gt;_left;\n            else\n                return iterator(cur);\n        }\n        return end();\n    }\n\n    pair&lt;iterator, bool&gt; Insert(const T&amp; data) {\n        if (_root == nullptr) {\n            _root = new Node(data);\n            _root-&gt;_col = BLACK;\n            return make_pair(iterator(_root), true);\n        }\n        KeyOfT kot;\n        Node* cur = _root;\n        Node* parent = nullptr;\n        while (cur) {\n            if (kot(cur-&gt;_data) &gt; kot(data)) {\n                parent = cur;\n                cur = cur-&gt;_left;\n            }\n            else if (kot(cur-&gt;_data) &lt; kot(data)) {\n                parent = cur;\n                cur = cur-&gt;_right;\n            }\n            else\n                return make_pair(iterator(cur), false);\n        }\n        cur = new Node(data);\n        Node* newnode = cur;\n        if (kot(parent-&gt;_data) &lt; kot(data))\n            parent-&gt;_right = cur;\n        else\n            parent-&gt;_left = cur;\n        cur-&gt;_parent = parent;\n        while (parent &amp;&amp; parent-&gt;_col == RED) {\n            Node* grandfather = parent-&gt;_parent;\n            if (parent == grandfather-&gt;_left) {\n                Node* uncle = grandfather-&gt;_right;\n                if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n                    // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n                    parent-&gt;_col = uncle-&gt;_col = BLACK;\n                    grandfather-&gt;_col = RED;\n                    cur = grandfather;\n                    parent = cur-&gt;_parent;\n                }\n                else {\n                    //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n                    if (parent-&gt;_left == cur) {\n                        //     g\n                        //   p   u\n                        // c\n                        RotateR(grandfather);\n                        parent-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    else {\n                        //   g\n                        // p   u\n                        //   c\n                        RotateL(parent);\n                        RotateR(grandfather);\n                        cur-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    break;\n                }\n            }\n            else {\n                Node* uncle = grandfather-&gt;_left;\n                if (uncle &amp;&amp; uncle-&gt;_col == RED) {\n                    // \u60c5\u51b5\u4e00\uff1auncle\u5b58\u5728\u4e14\u4e3a\u7ea2\n                    parent-&gt;_col = uncle-&gt;_col = BLACK;\n                    grandfather-&gt;_col = RED;\n                    cur = grandfather;\n                    parent = cur-&gt;_parent;\n                }\n                else {\n                    //\u60c5\u51b5\u4e8c\uff1au\u4e0d\u5b58\u5728\u6216\u8005u\u4e3a\u9ed1\n                    if (parent-&gt;_right == cur) {\n                        //   g\n                        // u   p\n                        //       c\n                        RotateL(grandfather);\n                        parent-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    else {\n                        //   g\n                        // u   p\n                        //   c\n                        RotateR(parent);\n                        RotateL(grandfather);\n                        cur-&gt;_col = BLACK;\n                        grandfather-&gt;_col = RED;\n                    }\n                    break;\n                }\n            }\n        }\n        _root-&gt;_col = BLACK;\n        return make_pair(iterator(newnode), false);\n    }\n\n    void RotateL(Node* parent)\n    {\n\n        Node* subR = parent-&gt;_right;\n        Node* subRL = subR-&gt;_left;\n\n        parent-&gt;_right = subRL;\n        if (subRL)\n            subRL-&gt;_parent = parent;\n\n        subR-&gt;_left = parent;\n        Node* ppnode = parent-&gt;_parent;\n        parent-&gt;_parent = subR;\n\n        if (parent == _root)\n        {\n            _root = subR;\n            subR-&gt;_parent = nullptr;\n        }\n        else\n        {\n            if (ppnode-&gt;_left == parent)\n            {\n                ppnode-&gt;_left = subR;\n            }\n            else\n            {\n                ppnode-&gt;_right = subR;\n            }\n            subR-&gt;_parent = ppnode;\n        }\n    }\n\n    void RotateR(Node* parent)\n    {\n        Node* subL = parent-&gt;_left;\n        Node* subLR = subL-&gt;_right;\n\n        parent-&gt;_left = subLR;\n        if (subLR)\n            subLR-&gt;_parent = parent;\n\n        subL-&gt;_right = parent;\n\n        Node* ppnode = parent-&gt;_parent;\n        parent-&gt;_parent = subL;\n\n        if (parent == _root)\n        {\n            _root = subL;\n            subL-&gt;_parent = nullptr;\n        }\n        else\n        {\n            if (ppnode-&gt;_left == parent)\n            {\n                ppnode-&gt;_left = subL;\n            }\n            else\n            {\n                ppnode-&gt;_right = subL;\n            }\n            subL-&gt;_parent = ppnode;\n        }\n    }\n\n    bool Check(Node* root, int BlackNum, int RefBlackNum) {\n        if (root == nullptr) {\n            if (BlackNum != RefBlackNum) {\n                cout &lt;&lt; \"\u9ed1\u8272\u4e2a\u6570\u4e0d\u76f8\u7b49\" &lt;&lt; endl;\n                return false;\n            }\n            return true;\n        }\n\n        if (root-&gt;_col == BLACK)\n            BlackNum++;\n\n        if (root-&gt;_col == RED &amp;&amp; root-&gt;_parent-&gt;_col == RED) {\n            cout &lt;&lt; \"\u51fa\u73b0\u8fde\u7eed\u7ea2\u8272\u8282\u70b9\" &lt;&lt; endl;\n            return false;\n        }\n\n        return Check(root-&gt;_left, BlackNum, RefBlackNum)\n            &amp;&amp; Check(root-&gt;_right, BlackNum, RefBlackNum);\n    }\n\n    bool IsBalance() {\n        if (_root &amp;&amp; _root-&gt;_col == RED)\n            return false;\n        int RefBlackNum = 0;\n        Node* cur = _root;\n        while (cur) {\n            if (cur-&gt;_col == BLACK)\n                RefBlackNum++;\n            cur = cur-&gt;_left;\n        }\n        return Check(_root, 0, RefBlackNum);\n    }\n\nprivate:\n    Node* _root = nullptr;\n};\n\n</code></pre> <p>MyMap.h:</p> <pre><code>#pragma once\n#include\"RBTree.h\"\nnamespace lkt {\n    template&lt;class K, class V&gt;\n    class map {\n        struct MapKeyOfT {\n            const K&amp; operator()(const pair&lt;K, V&gt;&amp; kv) {\n                return kv.first;\n            }\n        };\n    public:\n        typedef typename RBTree&lt;K, pair&lt;const K, V&gt;, MapKeyOfT&gt;::iterator iterator;\n        typedef typename RBTree&lt;K, pair&lt;const K, V&gt;, MapKeyOfT&gt;::const_iterator const_iterator;\n        iterator begin() {\n            return _t.begin();\n        }\n\n        iterator end() {\n            return _t.end();\n        }\n\n        pair&lt;iterator, bool&gt; insert(const pair&lt;K, V&gt;&amp; kv) {\n            return _t.Insert(kv);\n        }\n\n        iterator find(const K&amp; key) {\n            return _t.Find(key);\n        }\n\n        V&amp; operator[] (const K&amp; key) {\n            pair&lt;iterator, bool&gt; ret = insert(make_pair(key, V()));\n            return ret.first-&gt;second;\n        }\n    private:\n        RBTree&lt;K, pair&lt;const K, V&gt;, MapKeyOfT&gt; _t;\n    };\n\n    void TestMap() {\n        map&lt;int, int&gt; m;\n        int a[] = { 4, 2, 6, 1, 3, 5, 15, 7, 16, 14 };\n        for (auto e : a)\n        {\n            m.insert(make_pair(e, e));\n        }\n\n        map&lt;int, int&gt;::iterator it = m.begin();\n        while (it != m.end())\n        {\n            //it-&gt;first += 100;\n            it-&gt;second += 100;\n\n            cout &lt;&lt; it-&gt;first &lt;&lt; \":\" &lt;&lt; it-&gt;second &lt;&lt; endl;\n            ++it;\n        }\n        cout &lt;&lt; endl;\n\n    }\n}\n\n</code></pre> <p>MySet.h:</p> <pre><code>#pragma once\n#include \"RBTree.h\"\nnamespace lkt {\n    template&lt;class K&gt;\n    class set {\n        struct SetKeyOfT {\n            const K&amp; operator() (const K&amp; key) {\n                return key;\n            }\n        };\n    public:\n\n        typedef typename RBTree&lt;K, const K, SetKeyOfT&gt;::iterator iterator;\n        typedef typename RBTree&lt;K, const K, SetKeyOfT&gt;::const_iterator const_iterator;\n\n        iterator begin() {\n            return _t.begin();\n        }\n\n        iterator end() {\n            return _t.end();\n        }\n\n        pair&lt;iterator, bool&gt; insert(const K&amp; key) {\n            return _t.Insert(key);\n        }\n\n        iterator find(const K&amp; key) {\n            return _t.Find(key);\n        }\n\n    private:\n        RBTree&lt;K, const K, SetKeyOfT&gt; _t;\n    };\n\n    void TestSet() {\n        set&lt;int&gt; s;\n        int a[] = { 4, 2, 6, 1, 3, 5, 15, 7, 16, 14 };\n        for (auto e : a)\n        {\n            s.insert(e);\n        }\n        set&lt;int&gt;::iterator it = s.begin();\n        while (it != s.end()) {\n            cout &lt;&lt; *it &lt;&lt; \" \";\n            ++it;\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\n</code></pre> <p>test.cpp:</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS 1\n#include\"MySet.h\"\n#include \"MyMap.h\"\nint main() {\n    lkt::TestSet();\n    lkt::TestMap();\n    return 0;\n}\n</code></pre>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/","title":"10.\u5b57\u7b26\u4e32\u548c\u5185\u5b58\u51fd\u6570","text":"<p>\u524d\u8a00\uff1a C\u8bed\u8a00\u4e2d\u5bf9\u5b57\u7b26\u548c\u5b57\u7b26\u4e32\u7684\u5904\u7406\u5f88\u662f\u9891\u7e41\uff0c\u4f46\u662fC\u8bed\u8a00\u672c\u8eab\u662f\u6ca1\u6709\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\uff0c\u5b57\u7b26\u4e32\u901a\u5e38\u653e\u5728\u5e38\u91cf\u5b57\u7b26\u4e32\u4e2d \u6216\u8005\u5b57\u7b26\u6570\u7ec4\u4e2d\u3002 \u5b57\u7b26\u4e32\u5e38\u91cf \u9002\u7528\u4e8e\u90a3\u4e9b\u5bf9\u5b83\u4e0d\u505a\u4fee\u6539\u7684\u5b57\u7b26\u4e32\u51fd\u6570.</p> <p>\u51fd\u6570\u4ecb\u7ecd:</p>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#1-strlen","title":"1. strlen","text":"<pre><code>size_t strlen ( const char * str );\n</code></pre> <ul> <li>\u5b57\u7b26\u4e32\u5df2\u7ecf '\\0'\u4f5c\u4e3a\u7ed3\u675f\u6807\u5fd7\uff0cstrlen\u51fd\u6570\u8fd4\u56de\u7684\u662f\u5728\u5b57\u7b26\u4e32\u4e2d '\\0'\u524d\u9762\u51fa\u73b0\u7684\u5b57\u7b26\u4e2a\u6570\uff08\u4e0d\u5305\u542b  '\\0')\u3002</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#inlcude&lt;string.h&gt;\nint main()\n{\n    //a b c \\0 d e f \\0\n    char arr[] = \"abc\\0def\";\n    return 0;\n}\n</code></pre> <ul> <li>\u53c2\u6570\u6307\u5411\u7684\u5b57\u7b26\u4e32\u5fc5\u987b\u8981\u4ee5 '\\0'\u7ed3\u675f\u3002</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    char arr[] = { 'a', 'b', 'c' };\n    printf(\"%d\\n\", strlen(arr));\n    return 0;\n}\n</code></pre> <ul> <li>\u6ce8\u610f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3asize_t\uff0c\u662f\u65e0\u7b26\u53f7\u7684(\u6613\u9519)</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    const char* str1 = \"abcdef\";\n    const char* str2 = \"bbb\";\n    if (strlen(str2) - strlen(str1) &gt; 0)\n    {\n        printf(\"str2&gt;str1\\n\");\n    }\n    else\n    {\n        printf(\"srt1&gt;str2\\n\");\n    }\n    return 0;\n}\n</code></pre> <ul> <li>\u6a21\u62df\u5b9e\u73b0</li> </ul> <pre><code>//1.\u8ba1\u6570\u5668\u65b9\u5f0f\nint my_strlen(const char* str)\n{\n    int count = 0;\n    while (*str)\n    {\n        count++;\n        str++;\n    }\n    return count;\n}\n\n//2.\u9012\u5f52\uff1a\u4e0d\u80fd\u521b\u5efa\u4e34\u65f6\u53d8\u91cf\u8ba1\u6570\u5668\nint my_strlen(const char* str)\n{\n    if (*str == '\\0')\n        return 0;\n    else\n        return 1 + my_strlen(str + 1);\n}\n\n//3.\u6307\u9488-\u6307\u9488\u7684\u65b9\u5f0f\nint my_strlen(char* s)\n{\n    char* p = s;\n    while (*p != \u2018\\0\u2019)\n        p++;\n    return p - s;\n}\n</code></pre>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#2-strcpy","title":"2. strcpy","text":"<pre><code>char* strcpy(char * destination, const char * source );\n</code></pre> <ul> <li>\u6e90\u5b57\u7b26\u4e32\u5fc5\u987b\u4ee5 '\\0'\u7ed3\u675f\u3002</li> <li>\u5c06\u6e90\u5b57\u7b26\u4e32\u4e2d\u7684 '\\0'\u62f7\u8d1d\u5230\u76ee\u6807\u7a7a\u95f4\u3002</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    char arr[10] = \"xxxxxxxxx\";\n    //const char* p = \"abcdef\";\n    char arr2[] = { 'l', 'k','\\0', 't'};\n\n    //strcpy(arr, p);\n    strcpy(arr, arr2);\n\n    printf(\"%s\\n\", arr);\n\n    return 0;\n}\n</code></pre> <ul> <li>\u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u8db3\u591f\u5927\uff0c\u4ee5\u786e\u4fdd\u80fd\u5b58\u653e\u6e90\u5b57\u7b26\u4e32\u3002</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    char arr[3] = {0};\n    char arr2[] = \"abcdef\";\n\n    strcpy(arr, arr2);\n\n    printf(\"%s\\n\", arr);\n\n    return 0;\n}\n</code></pre> <ul> <li>\u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u53ef\u53d8\u3002</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n//\u9519\u8bef\u7684\u793a\u8303\nint main()\n{\n    char* p = \"hello world\";//\u5e38\u91cf\u5b57\u7b26\u4e32\n    char arr2[] = \"abcdef\";\n\n    strcpy(p, arr2);\n\n    printf(\"%s\\n\", p);\n\n    return 0;\n}\n</code></pre> <ul> <li>\u6a21\u62df\u5b9e\u73b0</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\n//\u9519\u8bef\u7684\u793a\u8303\n//1.\u53c2\u6570\u987a\u5e8f\n//2.\u51fd\u6570\u7684\u529f\u80fd\uff0c\u505c\u6b62\u6761\u4ef6\n//3.assert\n//4.const\u4fee\u9970\u6307\u9488\n//5.\u51fd\u6570\u8fd4\u56de\u503c\n//6.\u9898\u76ee\u51fa\u81ea\u300a\u9ad8\u8d28\u91cfC/C++\u7f16\u7a0b\u300b\u4e66\u7c4d\u6700\u540e\u7684\u8bd5\u9898\u90e8\u5206\nchar* my_strcpy(char* dest, const char* src)\n{\n    char* ret = dest;\n    assert(dest != NULL);\n    assert(src != NULL);\n    while ((*dest++ = *src++))\n    {\n        ;\n    }\n    return ret;\n}\n</code></pre>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#3-strcat","title":"3. strcat","text":"<pre><code>char * strcat ( char * destination, const char * source );\n</code></pre> <ul> <li>\u6e90\u5b57\u7b26\u4e32\u5fc5\u987b\u4ee5 '\\0'\u7ed3\u675f\u3002</li> <li>\u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u6709\u8db3\u591f\u7684\u5927\uff0c\u80fd\u5bb9\u7eb3\u4e0b\u6e90\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u3002</li> <li>\u76ee\u6807\u7a7a\u95f4\u5fc5\u987b\u53ef\u4fee\u6539\u3002</li> <li>\u5b57\u7b26\u4e32\u81ea\u5df1\u7ed9\u81ea\u5df1\u8ffd\u52a0\uff0c\u5982\u4f55\uff1f(\u540e\u7eed\u8bb2)</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\nint main()\n{\n    char arr1[20] = \"lkt\";\n    strcat(arr1, arr1);\n\n    //char arr1[20] = \"hello \";\n    //char arr2[] = \"world\";\n    //printf(\"%s\\n\", strcat(arr1, arr2));\n\n    return 0;\n}\n</code></pre> <ul> <li>\u6a21\u62df\u5b9e\u73b0</li> </ul> <pre><code>char* my_strcat(char* dest, const char*src)\n{\n    //1.\u627e\u76ee\u6807\u7a7a\u95f4\u4e2d\u7684\\0\n    char* cur = dest;\n    while (*cur)\n    {\n        cur++;\n    }\n    //2.\u62f7\u8d1d\u6e90\u5934\u6570\u636e\u5230\\0\u4e4b\u540e\u7684\u7a7a\u95f4\n    while (*cur++ = *src++)\n    {\n        ;\n    }\n\n    return dest;\n}\n</code></pre>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#4-strcmp","title":"4. strcmp","text":"<pre><code>int strcmp ( const char * str1, const char * str2 );\n</code></pre> <ul> <li>\u6807\u51c6\u89c4\u5b9a\uff1a</li> <li>\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5927\u4e8e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u5927\u4e8e0\u7684\u6570\u5b57</li> <li>\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de0</li> <li>\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u5c0f\u4e8e0\u7684\u6570\u5b57</li> <li>\u90a3\u4e48\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\uff1f</li> </ul> <pre><code>int main()\n{\n    /*char arr1[] = \"abcdef\";\n    char arr2[] = \"abq\";*/\n\n    //char arr1[] = \"abcd\";\n    //char arr2[] = \"abc\";\n\n    char arr1[] = \"abc\";\n    char arr2[] = \"abc\";\n\n    //char arr1[] = { 'a', 'b', 'c' };\n    //char arr2[] = { 'a', 'b', 'c' };\n\n    int ret = my_strcmp(arr1, arr2);\n    if (ret &lt; 0)\n        printf(\"arr1&lt;arr2\\n\");\n    else if(ret&gt;0)\n        printf(\"arr1&gt;arr2\\n\");\n    else\n        printf(\"arr1==arr2\\n\");\n\n    printf(\"%d\\n\", ret);\n\n    return 0;\n}\n</code></pre> <ul> <li>\u6a21\u62df\u5b9e\u73b0</li> </ul> <pre><code>int my_strcmp(const char*s1, const char*s2)\n{\n    assert(s1 &amp;&amp; s2);\n    while (*s1 == *s2)\n    {\n        if (*s1 == '\\0')\n        {\n            return 0;\n        }\n        s1++;\n        s2++;\n    }\n    //return *s1 - *s2;\n    if (*s1 &gt; *s2)\n        return 1;\n    else\n        return -1;\n}\n</code></pre>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#5-strncpy","title":"5. strncpy","text":"<pre><code>int strncmp ( const char * str1, const char * str2, size_t num );\n</code></pre> <ul> <li>\u62f7\u8d1dnum\u4e2a\u5b57\u7b26\u4ece\u6e90\u5b57\u7b26\u4e32\u5230\u76ee\u6807\u7a7a\u95f4</li> <li>\u5982\u679c\u6e90\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5c0f\u4e8enum\uff0c\u5219\u62f7\u8d1d\u5b8c\u6e90\u5b57\u7b26\u4e32\u4e4b\u540e\uff0c\u5728\u76ee\u6807\u7684\u540e\u8fb9\u8ffd\u52a00\uff0c\u76f4\u5230num\u4e2a\u3002</li> </ul> <pre><code>int main()\n{\n    char arr1[20] = \"abcdefghi\";\n    char arr2[] = \"xxxx\";\n    strncpy(arr1, arr2, 8);\n    printf(\"%s\\n\", arr1);\n    return 0;\n}\n</code></pre>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#6-strncat","title":"6. strncat","text":"<pre><code>char * strncat ( char * destination, const char * source, size_t num );\n</code></pre> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\nint main()\n{\n    char arr1[20] = \"abcdef\\0qqqqqq\";\n    char arr2[] = \"xyz\";\n    strncat(arr1, arr2, 2);\n    printf(\"%s\\n\", arr1);\n\n    return 0;\n}\n</code></pre> <ul> <li>\u81ea\u5df1\u7ed9\u81ea\u5df1\u6dfb\u52a0</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\nint main()\n{\n    char arr1[20] = \"abc\";\n    strncat(arr1, arr1, 3);\n    printf(\"%s\\n\", arr1);\n\n    return 0;\n}\n</code></pre>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#7-strncmp","title":"7. strncmp","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\nint main()\n{\n    int ret = strncmp(\"abcdef\", \"abc\", 4);\n    printf(\"%d\\n\", ret);\n\n    return 0;\n}\n</code></pre>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#8-strstr-kmp","title":"8. strstr + KMP","text":"<ul> <li>\u793a\u4f8b</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\nint main()\n{\n    char arr1[] = \"abcdefabcdef\";\n    char arr2[] = \"cdq\";\n\n    char* p = strstr(arr1, arr2);\n    if (p == NULL)\n    {\n        printf(\"\u4e0d\u5b58\u5728\\n\");\n    }\n    else\n    {\n        printf(\"%s\\n\", p);\n    }\n    return 0;\n}\n</code></pre> <ul> <li>\u6a21\u62df\u5b9e\u73b0(\u66b4\u529b\u7248\u672c)</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;assert.h&gt;\nchar* my_strstr(const char* str1, const char* str2)\n{\n    const char* s1 = str1;\n    const char* s2 = str2;\n    const char* p = str1;\n    if (*str2 == '\\0')\n    {\n        return str1;\n    }\n    while (*p)\n    {\n        s1 = p;\n        s2 = str2;\n        while (*s1!='\\0' &amp;&amp; *s2!='\\0' &amp;&amp; (*s1 == *s2))\n        {\n            s1++;\n            s2++;\n        }\n        if (*s2 == '\\0')\n        {\n            return (char*)p;//\u627e\u5230\u4e86\n        }\n        p++;\n    }\n    return NULL;//\u627e\u4e0d\u5230\u5b50\u4e32\n}\n</code></pre> <ul> <li>\u6a21\u62df\u5b9e\u73b0(KMP\u7248\u672c)</li> <li>KMP\u6709\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e3b\u4e32\u548c\u5b50\u4e32</li> <li>\u4e3b\u4e32\u7684\u6307\u9488\u4e0d\u56de\u5934\uff0c\u6307\u9488\u672a\u4e3ai</li> <li>\u5b50\u4e32\u7684\u6307\u9488\u56de\u5934\uff0c\u4f46\u662f\u4e0d\u662f\u4e00\u5b9a\u56de\u5230\u4e0b\u6807\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u4e00\u4e2anext\u7684\u6570\u7ec4,\u6307\u9488\u4e3aj</li> <li>KMP</li> </ul> <pre><code>for (int i = 1, j = 0; i &lt;= m; ++i)\n{\n    while (j &amp;&amp; s[i] != p[j + 1]) j = Next[j];\n    if (s[i] == p[j + 1]) j++;\n    if (j &gt;= n)\n    {\n        cout &lt;&lt; i - n &lt;&lt; \" \";\n    }\n}\n</code></pre> <ul> <li>Next\u6570\u7ec4(\u9012\u63a8)</li> <li>1.next[1]=0</li> <li>2.\u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4efb\u7136\u76f8\u540c\u7684\u8bdd\uff0c\u76f4\u63a5\u6784\u6210\u4e86\u4e00\u4e2a\u66f4\u957f\u7684\u524d\u540e\u7f00</li> <li>3.\u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\u7684\u8bdd\uff0c\u76f4\u63a5\u53bb\u5de6\u8fb9\u7684\u7f00\u53bb\u5bfb\u627e\u5171\u540c\u7684\u524d\u540e\u7f00</li> <li>4.\u56de\u5230\u4e4b\u524d\u7684\u6b65\u9aa4</li> </ul> <pre><code>for (int i = 2, j = 0; i &lt;= n; ++i)\n{\n    while (j &amp;&amp; p[i] != p[j + 1]) j = Next[j];\n    if (p[i] == p[j + 1]) j++;\n    Next[i] = j;\n}\n</code></pre> <p>\u6c47\u603b\uff1a</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\nconst int N = 1e6 + 5;\nchar s[N], p[N];//s\u662f\u4e3b\u4e32\uff0cp\u662f\u5b50\u4e32\nint Next[N];\n\nint main()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; p + 1 &gt;&gt; m &gt;&gt; s + 1;\n    //Next\n    for (int i = 2, j = 0; i &lt;= n; ++i)\n    {\n        while (j &amp;&amp; p[i] != p[j + 1]) j = Next[j];\n        if (p[i] == p[j + 1]) j++;\n        Next[i] = j;\n    }\n    int flag = false;\n    //kmp\n    for (int i = 1, j = 0; i &lt;= m; ++i)\n    {\n        while (j &amp;&amp; s[i] != p[j + 1]) j = Next[j];\n        if (s[i] == p[j + 1]) j++;\n        if (j &gt;= n)\n        {\n            flag = true;\n            cout &lt;&lt; i - n &lt;&lt; \" \";\n            j = Next[j];\n        }\n    }\n    if (!flag)\n    {\n        cout &lt;&lt; -1 &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#9-strtok","title":"9. strtok","text":"<pre><code>char * strtok ( char * str, const char * sep );\n</code></pre> <ul> <li>sep\u53c2\u6570\u662f\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b9a\u4e49\u4e86\u7528\u4f5c\u5206\u9694\u7b26\u7684\u5b57\u7b26\u96c6\u5408</li> <li>\u7b2c\u4e00\u4e2a\u53c2\u6570\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u5305\u542b\u4e860\u4e2a\u6216\u8005\u591a\u4e2a\u7531sep\u5b57\u7b26\u4e32\u4e2d\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5206\u9694\u7b26\u5206\u5272\u7684\u6807\u8bb0\u3002</li> <li>strtok\u51fd\u6570\u627e\u5230str\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6807\u8bb0\uff0c\u5e76\u5c06\u5176\u7528 \\0 \u7ed3\u5c3e\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u6807\u8bb0\u7684\u6307\u9488\u3002\uff08\u6ce8\uff1astrtok\u51fd\u6570\u4f1a\u6539\u53d8\u88ab\u64cd\u4f5c\u7684\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u5728\u4f7f\u7528strtok\u51fd\u6570\u5207\u5206\u7684\u5b57\u7b26\u4e32\u4e00\u822c\u90fd\u662f\u4e34\u65f6\u62f7\u8d1d\u7684\u5185\u5bb9\u5e76\u4e14\u53ef\u4fee\u6539\u3002\uff09</li> <li>strtok\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u4e3a NULL \uff0c\u51fd\u6570\u5c06\u627e\u5230str\u4e2d\u7b2c\u4e00\u4e2a\u6807\u8bb0\uff0cstrtok\u51fd\u6570\u5c06\u4fdd\u5b58\u5b83\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e\u3002</li> <li>strtok\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a NULL \uff0c\u51fd\u6570\u5c06\u5728\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u88ab\u4fdd\u5b58\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u4e0b\u4e00\u4e2a\u6807\u8bb0\u3002</li> <li>\u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u4e0d\u5b58\u5728\u66f4\u591a\u7684\u6807\u8bb0\uff0c\u5219\u8fd4\u56de NULL \u6307\u9488\u3002</li> </ul> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    char arr[] = \"liuketing@swpuedu.com\";\n    char buf[200] = { 0 };\n    strcpy(buf, arr);\n    const char* p = \"@.\";\n    char* str = NULL;\n\n    for (str=strtok(buf, p); str!=NULL; str=strtok(NULL, p))\n    {\n        printf(\"%s\\n\", str);\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#10-strerror","title":"10. strerror","text":"<pre><code>char * strerror ( int errnum );\n</code></pre> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n//strerror\n//\u628a\u9519\u8bef\u7801\u8f6c\u6362\u6210\u9519\u8bef\u4fe1\u606f\n\nint main()\n{\n    //printf(\"%s\\n\", strerror(0));\n    //printf(\"%s\\n\", strerror(1));\n    //printf(\"%s\\n\", strerror(2));\n    //printf(\"%s\\n\", strerror(3));\n    //printf(\"%s\\n\", strerror(4));\n\n    //\u9519\u8bef\u7801\u8bb0\u5f55\u5230\u9519\u8bef\u7801\u7684\u53d8\u91cf\u4e2d\n    //errno - C\u8bed\u8a00\u63d0\u4f9b\u7684\u5168\u5c40\u7684\u9519\u8bef\u53d8\u91cf\n    //#include &lt;errno.h&gt;\n\n    FILE* pf = fopen(\"test.txt\", \"r\");\n\n    if (pf == NULL)\n    {\n        //perror(\"\");//\u6253\u5370\u7684\u4f9d\u7136\u662ferrno\u53d8\u91cf\u4e2d\u9519\u8bef\u7801\u5bf9\u5e94\u7684\u9519\u8bef\u4fe1\u606f\n        printf(\"%s\\n\", strerror(errno));\n        return 1;\n    }\n\n    //\u8bfb\u6587\u4ef6\n\n    fclose(pf);\n    pf = NULL;\n    return 0;\n}\n</code></pre> <p>\u5b57\u7b26\u4e32\u5206\u7c7b\u51fd\u6570:</p> \u51fd\u6570 \u5982\u679c\u4ed6\u7684\u53c2\u6570\u7b26\u5408\u4e0b\u5217\u6761\u4ef6\u5c31\u8fd4\u56de\u771f iscntrl \u4efb\u4f55\u63a7\u5236\u5b57\u7b26 isspace \u7a7a\u767d\u5b57\u7b26\uff1a\u7a7a\u683c\u2018 \u2019\uff0c\u6362\u9875\u2018\\f\u2019\uff0c\u6362\u884c'\\n'\uff0c\u56de\u8f66\u2018\\r\u2019\uff0c\u5236\u8868\u7b26'\\t'\u6216\u8005\u5782\u76f4\u5236\u8868\u7b26'\\v' isdigit \u5341\u8fdb\u5236\u6570\u5b57 0~9 isxdigit \u5341\u516d\u8fdb\u5236\u6570\u5b57\uff0c\u5305\u62ec\u6240\u6709\u5341\u8fdb\u5236\u6570\u5b57\uff0c\u5c0f\u5199\u5b57\u6bcda~f\uff0c\u5927\u5199\u5b57\u6bcdA~F islower \u5c0f\u5199\u5b57\u6bcda~z isupper \u5927\u5199\u5b57\u6bcdA~Z isalpha \u5b57\u6bcda~z\u6216A~Z isalnum \u5b57\u6bcd\u6216\u8005\u6570\u5b57\uff0ca~z,A~Z,0~9 ispunct \u6807\u70b9\u7b26\u53f7\uff0c\u4efb\u4f55\u4e0d\u5c5e\u4e8e\u6570\u5b57\u6216\u8005\u5b57\u6bcd\u7684\u56fe\u5f62\u5b57\u7b26\uff08\u53ef\u6253\u5370\uff09 isgraph \u4efb\u4f55\u56fe\u5f62\u5b57\u7b26 isprint \u4efb\u4f55\u53ef\u6253\u5370\u5b57\u7b26\uff0c\u5305\u62ec\u56fe\u5f62\u5b57\u7b26\u548c\u7a7a\u767d\u5b57\u7b26 <p>\u5b57\u7b26\u8f6c\u6362:</p> \u51fd\u6570 \u529f\u80fd toupper \u5c0f\u5199\u8f6c\u5927\u5199 tolower \u5927\u5199\u8f6c\u5c0f\u5199 <pre><code>#include&lt;stdio.h&gt;\n#include &lt;ctype.h&gt;\nint main()\n{\n    char arr[] = \"Are you ok?\";\n    char* p = arr;\n    while (*p)\n    {\n        if (islower(*p))\n        {\n            *p = toupper(*p);\n        }\n        p++;\n    }\n    printf(\"%s\\n\", arr);\n\n    return 0;\n}\n</code></pre>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#11-memcpy","title":"11. memcpy","text":"<pre><code>void * memcpy ( void * destination, const void * source, size_t num );\n</code></pre> <ul> <li>\u51fd\u6570memcpy\u4ecesource\u7684\u4f4d\u7f6e\u5f00\u59cb\u5411\u540e\u590d\u5236num\u4e2a\u5b57\u8282\u7684\u6570\u636e\u5230destination\u7684\u5185\u5b58\u4f4d\u7f6e\u3002</li> <li>\u8fd9\u4e2a\u51fd\u6570\u5728\u9047\u5230 '\\0' \u7684\u65f6\u5019\u5e76\u4e0d\u4f1a\u505c\u4e0b\u6765\u3002</li> <li>\u5982\u679csource\u548cdestination\u6709\u4efb\u4f55\u7684\u91cd\u53e0\uff0c\u590d\u5236\u7684\u7ed3\u679c\u90fd\u662f\u672a\u5b9a\u4e49\u7684\u3002</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    //int arr[] = { 1,2,3,4,5,6,7,8,9,10 };\n    //int arr2[10] = { 0 };\n    //memcpy(arr2, arr, 20);\n\n    float arr1[] = { 1.0f,2.0f,3.0f,4.0f };\n    float arr2[5] = { 0.0 };\n    memcpy(arr2, arr1, 8);\n\n    return 0;\n}\n</code></pre> <p>\u6a21\u62df\u5b9e\u73b0:</p> <pre><code>void* my_memcpy(void* dest, void* src, size_t num)\n{\n    void* ret = dest;\n    assert(dest);\n    assert(src);\n\n    while(num--)\n    {\n        *(char*)dest = *(char*)src;\n        dest = (char*)dest + 1;\n        src = (char*)src + 1;\n    }\n\n    return ret;\n}\n</code></pre>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#12-memmove","title":"12. memmove","text":"<ul> <li>\u548cmemcpy\u7684\u5dee\u522b\u5c31\u662fmemmove\u51fd\u6570\u5904\u7406\u7684\u6e90\u5185\u5b58\u5757\u548c\u76ee\u6807\u5185\u5b58\u5757\u662f\u53ef\u4ee5\u91cd\u53e0\u7684\u3002</li> <li>\u5982\u679c\u6e90\u7a7a\u95f4\u548c\u76ee\u6807\u7a7a\u95f4\u51fa\u73b0\u91cd\u53e0\uff0c\u5c31\u5f97\u4f7f\u7528memmove\u51fd\u6570\u5904\u7406\u3002</li> </ul> <pre><code>void* my_memmove(void* dest, void* src, size_t num)\n{\n    void* ret = dest;\n    assert(dest);\n    assert(src);\n\n    if (dest &lt; src)//1 \u524d-&gt;\u540e\n    {\n        while(num--)\n        {\n            *(char*)dest = *(char*)src;\n            dest = (char*)dest + 1;\n            src = (char*)src + 1;\n        }\n    }\n    else //2 3 \u540e-&gt;\u524d\n    {\n        while (num--)\n        {\n            *((char*)dest + num) = *((char*)src + num);\n        }\n    }\n    return ret;\n}\n</code></pre>"},{"location":"C%E8%AF%AD%E8%A8%80/10.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/#13-memcpy","title":"13. memcpy","text":"<pre><code>int memcmp ( const void * ptr1, const void * ptr2, size_t num );\n</code></pre> <p>\u793a\u4f8b:</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n    int arr1[] = { 1,2,3,0,5 };//01 00 00 00 02 00 00 00 03 00 00 00 00 00 00 00 ..\n    int arr2[] = { 1,2,3,4,0 };//01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 ..\n    int ret = memcmp(arr1, arr2, 13);\n    printf(\"%d\\n\", ret);\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%89%8D%E8%A8%80/","title":"1.\u524d\u8a00","text":""},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%89%8D%E8%A8%80/#1","title":"1.\u4ec0\u4e48\u662f\u6570\u636e\u7ed3\u6784","text":"<p>\u6570\u636e\u7ed3\u6784(Data Structure)\u662f\u8ba1\u7b97\u673a\u5b58\u50a8\u3001\u7ec4\u7ec7\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u6307\u76f8\u4e92\u4e4b\u95f4\u5b58\u5728\u4e00\u79cd\u6216\u591a\u79cd\u7279\u5b9a\u5173\u7cfb\u7684 \u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\u3002</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%89%8D%E8%A8%80/#2","title":"2.\u4ec0\u4e48\u662f\u7b97\u6cd5","text":"<p>\u7b97\u6cd5(Algorithm):\u5c31\u662f\u5b9a\u4e49\u826f\u597d\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u4ed6\u53d6\u4e00\u4e2a\u6216\u4e00\u7ec4\u7684\u503c\u4e3a\u8f93\u5165\uff0c\u5e76\u4ea7\u751f\u51fa\u4e00\u4e2a\u6216\u4e00\u7ec4\u503c\u4f5c\u4e3a \u8f93\u51fa\u3002\u7b80\u5355\u6765\u8bf4\u7b97\u6cd5\u5c31\u662f\u4e00\u7cfb\u5217\u7684\u8ba1\u7b97\u6b65\u9aa4\uff0c\u7528\u6765\u5c06\u8f93\u5165\u6570\u636e\u8f6c\u5316\u6210\u8f93\u51fa\u7ed3\u679c\u3002</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%89%8D%E8%A8%80/#3","title":"3.\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u91cd\u8981\u6027","text":""},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%89%8D%E8%A8%80/#31","title":"3.1\u5728\u6821\u56ed\u62db\u8058\u7684\u7b14\u8bd5\u4e2d\uff1a","text":"<p>1.\u817e\u8baf\u79cb\u62db\u6280\u672f\u5c97\u7f16\u7a0b\u5408\u96c6</p> <p>2.\u5b57\u8282\u8df3\u52a82019\u6625\u62db\u7814\u53d1\u90e8\u5206\u7f16\u7a0b\u9898\u6c47\u603b</p> <p>3.\u7f8e\u56e22021\u6821\u62db\u7b14\u8bd5-\u7f16\u7a0b\u9898(\u901a\u7528\u7f16\u7a0b\u8bd5\u9898,\u7b2c10\u573a) </p> <p>\u53ef\u4ee5\u770b\u51fa\uff0c\u73b0\u5728\u516c\u53f8\u5bf9\u5b66\u751f\u4ee3\u7801\u80fd\u529b\u7684\u8981\u6c42\u662f\u8d8a\u6765\u8d8a\u9ad8\u4e86\uff0c\u5927\u5382\u7b14\u8bd5\u4e2d\u51e0\u4e4e\u5168\u662f\u7b97\u6cd5\u9898\u800c\u4e14\u96be\u5ea6 \u5927\uff0c\u4e2d\u5c0f\u957f\u7684\u7b14\u8bd5\u4e2d\u624d\u4f1a\u6709\u7b97\u6cd5\u9898\u3002\u7b97\u6cd5\u4e0d\u4ec5\u7b14\u8bd5\u4e2d\u8003\u5bdf\uff0c\u9762\u8bd5\u4e2d\u9762\u8bd5\u5b98\u57fa\u672c\u90fd\u4f1a\u8ba9\u73b0\u573a\u5199\u4ee3 \u7801\u3002\u800c\u7b97\u6cd5\u80fd\u529b\u77ed\u671f\u5185\u65e0\u6cd5\u5feb\u901f\u63d0\u9ad8\u4e86\uff0c\u81f3\u5c11\u9700\u8981\u6301\u7eed\u534a\u5e74\u4ee5\u4e0a\u7b97\u6cd5\u8bad\u7ec3\u79ef\u7d2f\uff0c\u5426\u5219\u771f\u6b63\u6821\u62db\u65f6 \u7b14\u8bd5\u4f1a\u5f88\u8270\u96be\uff0c\u56e0\u6b64\u7b97\u6cd5\u8981\u65e9\u65e9\u51c6\u5907\u3002</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%89%8D%E8%A8%80/#32","title":"3.2\u5728\u6821\u56ed\u62db\u8058\u7684\u9762\u8bd5\u4e2d:","text":"<p>\u67d0CVTE\u9762\u8bd5\uff1a</p> <p>1.\u600e\u4e48\u8ba1\u7b97\u4e00\u4e2a\u7c7b\u5230\u5e95\u5b9e\u4f8b\u5316\u4e86\u591a\u5c11\u5bf9\u8c61\uff1f</p> <p>2.\u5982\u679c\u8fd8\u6709\u4e00\u4e2a\u6d3e\u751f\u7c7b\u7ee7\u627f\u4e86\u8fd9\u4e2a\u7c7b\uff0c\u90a3\u4e48\u5982\u4f55\u8ba1\u7b97\u8fd9\u4e24\u4e2a\u7c7b\uff0c\u5404\u81ea\u5b9e\u4f8b\u5316\u4e86\u591a\u5c11\u5bf9\u8c61\uff1f</p> <p>3.\u4f60\u4e86\u89e3\u8054\u5408\u4f53\u548c\u7ed3\u6784\u4f53\u5417\uff1f</p> <p>4.\u5982\u4f55\u6d4b\u8bd5\u4e00\u4e2a\u673a\u5668\u662f\u5927\u7aef\u8fd8\u662f\u5c0f\u7aef\uff1f</p> <p>5.\u4f60\u4e86\u89e3\u961f\u5217\u548c\u6808\u5417\uff1f</p> <p>6.\u600e\u4e48\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\u3002</p> <p>7.\u4f60\u4f7f\u7528\u8fc7\u6a21\u7248\u5417\uff1f</p> <p>8.\u5199\u4e00\u4e2a\u6bd4\u8f83\u4e24\u4e2a\u6570\u5927\u5c0f\u7684\u6a21\u677f\u51fd\u6570\u3002</p> <p>9.\u4f60\u4f7f\u7528\u8fc7\u5bb9\u5668\u5417\uff1f</p> <p>10.\u5224\u65ad\u4e24\u4e2a\u94fe\u8868\u662f\u5426\u76f8\u4ea4\u3002</p> <p>11.Vector\u548c\u6570\u7ec4\u7684\u533a\u522b\u3002</p> <p>12.\u4f60\u5728\u5b66\u6821\u91cc\u505a\u7684\u6700\u6ee1\u610f\u7684\u4e00\u4e2a\u9879\u76ee\u662f\u4ec0\u4e48\uff1f\u7b80\u8ff0\u4e00\u4e0b\u8fd9\u4e2a\u9879\u76ee\u3002</p> <p>\u67d0\u817e\u8baf\u7684\u9762\u8bd5\uff1a 1\u3001\u81ea\u6211\u4ecb\u7ecd</p> <p>2\u3001\u5b66\u4e60STL\u5177\u4f53\u662f\u600e\u4e48\u5f00\u5c55\u7684\uff1f</p> <p>3\u3001\u5982\u679c\u4e00\u6b3e\u4ea7\u54c1\u7ed9\u4f60\u600e\u4e48\u68c0\u6d4b\u5185\u5b58\u6cc4\u9732\uff1f</p> <p>4\u3001\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\uff0c\u5171\u4eab\u5185\u5b58\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff0c\u4f1a\u51fa\u73b0\u4ec0\u4e48\u95ee\u9898\uff0c\u600e\u4e48\u89e3\u51b3\uff1f</p> <p>5\u3001TCP\u4e3a\u4ec0\u4e48\u662f\u53ef\u9760\u7684\uff1f\u53ef\u9760\u662f\u600e\u4e48\u4fdd\u8bc1\u7684\uff1f\u4e3a\u4ec0\u4e48\u8981\u4e09\u6b21\u63e1\u624b\uff1f\u4e3a\u4ec0\u4e48\u4e09\u6b21\u63e1\u624b\u5c31\u53ef\u4ee5\u53ef\u9760\uff1f</p> <p>6\u3001Http\u6570\u636e\u5206\u5305\u95ee\u9898\uff1b</p> <p>7\u3001Vector\u76f8\u5173\uff1b</p> <p>8\u3001Hashmap\u76f8\u5173\uff1b</p> <p>9\u3001\u7ea2\u9ed1\u6811\u7684\u539f\u7406\u3001\u65f6\u95f4\u590d\u6742\u5ea6\u7b49\uff1b</p> <p>10\u3001Memcpy\u548cmemmove\u7684\u533a\u522b\uff1b</p> <p>11\u3001\u5ba2\u6237\u7aef\u7ed9\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\uff0c\u610f\u56fe\u53d1\u9001aaa\uff0c\u7136\u540e\u518d\u53d1bbb\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u51fa\u73b0aaabbb\u8fd9\u79cd\u60c5 \u51b5\uff0c\u5982\u4f55\u5904\u7406\uff1f</p> <p>12\u3001\u6e38\u620f\u7684\u90ae\u4ef6\u670d\u52a1\u5668\u4e2d\u6bcf\u5929\u4f1a\u6709\u73a9\u5bb6\u9891\u7e41\u7684\u521b\u5efa\u90ae\u4ef6\u548c\u5220\u9664\u90ae\u4ef6\uff0c\u6d77\u91cf\u6570\u636e\u3001\u5927\u5c0f\u4e0d\u4e00\uff0c\u4f1a\u6709 \u54ea\u4e9b\u573a\u666f\uff0c\u600e\u4e48\u5b58\u50a8\uff0c\u90ae\u4ef6\u662f\u600e\u4e48\u5230\u5185\u5b58\u7684\uff1f</p> <p>13\u3001\u5199\u4e00\u9053\u7b97\u6cd5\u9898</p> <p>\u67d0\u767e\u5ea6\u7684\u9762\u8bd5\uff1a</p> <p>1.\u624b\u5199\u4e94\u9053\u9898\uff0c\u4e09\u9053\u7f16\u7a0b\u9898\uff0c\u4e00\u9053\u6570\u636e\u5e93\uff0c\u4e00\u9053linux</p> <p>2.\u6570\u636e\u5e93\u7684\u9898\u4e24\u95ee</p> <p>3.\u7b97\u6cd5\u4e86\u89e3\u7684\u5982\u4f55\uff0c\u63d2\u5165\u6392\u5e8f\u7f16\u7a0b</p> <p>4.\u8bf4\u4e00\u4e0bIP,TCP,ARP</p> <p>5.\u5185\u6838\u662f\u4ec0\u4e48</p> <p>6.IP\u5c42\u4e3b\u8981\u529f\u80fd</p> <p>7.map\u548cset\u5e95\u5c42</p> <p>8.bootstrap\u7684\u7528\u6cd5,html,html\u7684\u5168\u79f0</p> <p>9.\u4f60\u89c9\u5f97\u6846\u67b6\u548c\u5e93\u6709\u5565\u533a\u522b</p> <p>10.\u4ee3\u7801\u4f18\u5316</p> <p>11.\u54c8\u5e0c\u8868</p> <p>12.shell\u811a\u672c</p> <p>13.\u5feb\u901f\u6392\u5e8f\u601d\u60f3</p> <p>14.\u9012\u5f52\u662f\u4ec0\u4e48</p> <p>15.\u5206\u6cbb\u662f\u4ec0\u4e48\uff0c\u4e0e\u9012\u5f52\u533a\u522b\u662f\u4ec0\u4e48</p> <p>16.web\u5e73\u53f0\u662f\u600e\u4e48\u505a\u7684</p> <p>17.linux\u547d\u4ee4</p> <p>18.\u4e86\u89e3\u4e9b\u4ec0\u4e48\u524d\u6cbf\u7684\u6280\u672f\uff0c\u82f1\u8bed\u600e\u4e48\u6837\uff0c\u4e86\u89e3\u8fc7\u4ec0\u4e48\u82f1\u8bed\u7684\u6587\u732e</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%89%8D%E8%A8%80/#33","title":"3.3\u5728\u672a\u6765\u7684\u5de5\u4f5c\u4e2d\uff1a","text":"<p>\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5bf9\u4e00\u4e2a\u7a0b\u5e8f\u5458\u6765\u8bf4\u7684\u91cd\u8981\u6027\uff1f</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%89%8D%E8%A8%80/#4","title":"4.\u5982\u4f55\u5b66\u597d\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5","text":"<p>\u2460\u6b7b\u78d5\u4ee3\u7801</p> <p>\u2461\u6ce8\u610f\u753b\u56fe\u548c\u601d\u8003</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/","title":"2.\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6","text":""},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#1","title":"1.\u7b97\u6cd5\u6548\u7387","text":""},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#11","title":"1.1 \u5982\u4f55\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u597d\u574f","text":"<p>\u5982\u4f55\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u597d\u574f\u5462\uff1f\u6bd4\u5982\u5bf9\u4e8e\u4ee5\u4e0b\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1a</p> <pre><code>long long Fib(int N)\n{\n    if (N &lt; 3)\n        return 1;\n    return Fib(N - 1) + Fib(N - 2);\n}\n</code></pre> <p>\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u9012\u5f52\u5b9e\u73b0\u65b9\u5f0f\u975e\u5e38\u7b80\u6d01\uff0c\u4f46\u7b80\u6d01\u4e00\u5b9a\u597d\u5417\uff1f\u90a3\u8be5\u5982\u4f55\u8861\u91cf\u5176\u597d\u4e0e\u574f\u5462\uff1f</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#12","title":"1.2 \u7b97\u6cd5\u7684\u590d\u6742\u5ea6","text":"<p>\u7b97\u6cd5\u5728\u7f16\u5199\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u540e\uff0c\u8fd0\u884c\u65f6\u9700\u8981\u8017\u8d39\u65f6\u95f4\u8d44\u6e90\u548c\u7a7a\u95f4(\u5185\u5b58)\u8d44\u6e90 \u3002\u56e0\u6b64 \u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u597d\u574f,\u4e00\u822c\u662f\u4ece\u65f6\u95f4\u548c\u7a7a\u95f4\u4e24\u4e2a\u7ef4\u5ea6\u6765\u8861\u91cf\u7684\uff0c\u5373\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u8fd0\u884c\u5feb\u6162\uff0c\u800c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u8fd0\u884c\u6240\u9700\u8981\u7684\u989d\u5916\u7a7a\u95f4\u3002\u5728\u8ba1\u7b97 \u673a\u53d1\u5c55\u7684\u65e9\u671f\uff0c\u8ba1\u7b97\u673a\u7684\u5b58\u50a8\u5bb9\u91cf\u5f88\u5c0f\u3002\u6240\u4ee5\u5bf9\u7a7a\u95f4\u590d\u6742\u5ea6\u5f88\u662f\u5728\u4e4e\u3002\u4f46\u662f\u7ecf\u8fc7\u8ba1\u7b97\u673a\u884c\u4e1a\u7684\u8fc5\u901f\u53d1\u5c55\uff0c\u8ba1 \u7b97\u673a\u7684\u5b58\u50a8\u5bb9\u91cf\u5df2\u7ecf\u8fbe\u5230\u4e86\u5f88\u9ad8\u7684\u7a0b\u5ea6\u3002\u6240\u4ee5\u6211\u4eec\u5982\u4eca\u5df2\u7ecf\u4e0d\u9700\u8981\u518d\u7279\u522b\u5173\u6ce8\u4e00\u4e2a\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#13","title":"1.3 \u590d\u6742\u5ea6\u5728\u6821\u62db\u4e2d\u7684\u8003\u5bdf","text":""},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#2","title":"2.\u65f6\u95f4\u590d\u6742\u5ea6","text":""},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#21","title":"2.1\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u6982\u5ff5","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5b9a\u4e49\uff1a\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u5b9a\u91cf\u63cf\u8ff0\u4e86\u8be5\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u3002\u4e00 \u4e2a\u7b97\u6cd5\u6267\u884c\u6240\u8017\u8d39\u7684\u65f6\u95f4\uff0c\u4ece\u7406\u8bba\u4e0a\u8bf4\uff0c\u662f\u4e0d\u80fd\u7b97\u51fa\u6765\u7684\uff0c\u53ea\u6709\u4f60\u628a\u4f60\u7684\u7a0b\u5e8f\u653e\u5728\u673a\u5668\u4e0a\u8dd1\u8d77\u6765\uff0c\u624d\u80fd\u77e5 \u9053\u3002\u4f46\u662f\u6211\u4eec\u9700\u8981\u6bcf\u4e2a\u7b97\u6cd5\u90fd\u4e0a\u673a\u6d4b\u8bd5\u5417\uff1f\u662f\u53ef\u4ee5\u90fd\u4e0a\u673a\u6d4b\u8bd5\uff0c\u4f46\u662f\u8fd9\u5f88\u9ebb\u70e6\uff0c\u6240\u4ee5\u624d\u6709\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\u8fd9\u4e2a \u5206\u6790\u65b9\u5f0f\u3002\u4e00\u4e2a\u7b97\u6cd5\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u4e0e\u5176\u4e2d\u8bed\u53e5\u7684\u6267\u884c\u6b21\u6570\u6210\u6b63\u6bd4\u4f8b\uff0c\u7b97\u6cd5\u4e2d\u7684\u57fa\u672c\u64cd\u4f5c\u7684\u6267\u884c\u6b21\u6570\uff0c\u4e3a\u7b97\u6cd5 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u5373\uff1a\u627e\u5230\u67d0\u6761\u57fa\u672c\u8bed\u53e5\u4e0e\u95ee\u9898\u89c4\u6a21N\u4e4b\u95f4\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\uff0c\u5c31\u662f\u7b97\u51fa\u4e86\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <pre><code>// \u8bf7\u8ba1\u7b97\u4e00\u4e0bFunc1\u4e2d++count\u8bed\u53e5\u603b\u5171\u6267\u884c\u4e86\u591a\u5c11\u6b21\uff1f\nvoid Func1(int N)\n{\n    int count = 0;\n    for (int i = 0; i &lt; N; ++i)\n    {\n        for (int j = 0; j &lt; N; ++j)\n        {\n            ++count;\n        }\n    }\n    for (int k = 0; k &lt; 2 * N; ++k)\n    {\n        ++count;\n    }\n    int M = 10;\n    while (M--)\n    {\n        ++count;\n    }\n    printf(\"%d\\n\", count);\n}\n</code></pre> <p>Func1 \u6267\u884c\u7684\u57fa\u672c\u64cd\u4f5c\u6b21\u6570 \uff1a</p> <p>$F(N)=N^2+2*N+10$</p> <ul> <li>N=10    F(N)=130</li> <li>N=100   F(N)=10210</li> <li>N=10000 F(N)=1002010</li> </ul> <p>\u5b9e\u9645\u4e2d\u6211\u4eec\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\u65f6\uff0c\u6211\u4eec\u5176\u5b9e\u5e76\u4e0d\u4e00\u5b9a\u8981\u8ba1\u7b97\u7cbe\u786e\u7684\u6267\u884c\u6b21\u6570\uff0c\u800c\u53ea\u9700\u8981 \u5927\u6982\u6267\u884c\u6b21\u6570\uff0c\u90a3\u4e48\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u5927O\u7684\u6e10\u8fdb\u8868\u793a\u6cd5\u3002</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#22-o","title":"2.2 \u5927O\u7684\u6e10\u8fdb\u8868\u793a\u6cd5","text":"<p>\u5927O\u7b26\u53f7\uff08Big O notation\uff09\uff1a\u662f\u7528\u4e8e\u63cf\u8ff0\u51fd\u6570\u6e10\u8fdb\u884c\u4e3a\u7684\u6570\u5b66\u7b26\u53f7\u3002</p> <p>\u63a8\u5bfc\u5927O\u9636\u65b9\u6cd5\uff1a</p> <p>1\u3001\u7528\u5e38\u65701\u53d6\u4ee3\u8fd0\u884c\u65f6\u95f4\u4e2d\u7684\u6240\u6709\u52a0\u6cd5\u5e38\u6570\u3002</p> <p>2\u3001\u5728\u4fee\u6539\u540e\u7684\u8fd0\u884c\u6b21\u6570\u51fd\u6570\u4e2d\uff0c\u53ea\u4fdd\u7559\u6700\u9ad8\u9636\u9879\u3002</p> <p>3\u3001\u5982\u679c\u6700\u9ad8\u9636\u9879\u5b58\u5728\u4e14\u4e0d\u662f1\uff0c\u5219\u53bb\u9664\u4e0e\u8fd9\u4e2a\u9879\u76ee\u76f8\u4e58\u7684\u5e38\u6570\u3002\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f\u5927O\u9636\u3002 \u4f7f\u7528\u5927O\u7684\u6e10\u8fdb\u8868\u793a\u6cd5\u4ee5\u540e\uff0cFunc1\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a</p> <p>$O(N^2)$</p> <ul> <li>N=10   F(N)=100</li> <li>N=100  F(N)=10000</li> <li>N=1000 F(N)=1000000 \u901a\u8fc7\u4e0a\u9762\u6211\u4eec\u4f1a\u53d1\u73b0\u5927O\u7684\u6e10\u8fdb\u8868\u793a\u6cd5\u53bb\u6389\u4e86\u90a3\u4e9b\u5bf9\u7ed3\u679c\u5f71\u54cd\u4e0d\u5927\u7684\u9879\uff0c\u7b80\u6d01\u660e\u4e86\u7684\u8868\u793a\u51fa\u4e86\u6267\u884c\u6b21\u6570\u3002</li> </ul> <p>\u53e6\u5916\u6709\u4e9b\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b58\u5728\u6700\u597d\u3001\u5e73\u5747\u548c\u6700\u574f\u60c5\u51b5\uff1a</p> <p>\u6700\u574f\u60c5\u51b5\uff1a\u4efb\u610f\u8f93\u5165\u89c4\u6a21\u7684\u6700\u5927\u8fd0\u884c\u6b21\u6570(\u4e0a\u754c)</p> <p>\u5e73\u5747\u60c5\u51b5\uff1a\u4efb\u610f\u8f93\u5165\u89c4\u6a21\u7684\u671f\u671b\u8fd0\u884c\u6b21\u6570</p> <p>\u6700\u597d\u60c5\u51b5\uff1a\u4efb\u610f\u8f93\u5165\u89c4\u6a21\u7684\u6700\u5c0f\u8fd0\u884c\u6b21\u6570(\u4e0b\u754c)</p> <p>\u4f8b\u5982\uff1a\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u6570\u7ec4\u4e2d\u641c\u7d22\u4e00\u4e2a\u6570\u636ex</p> <p>\u6700\u597d\u60c5\u51b5\uff1a1\u6b21\u627e\u5230</p> <p>\u6700\u574f\u60c5\u51b5\uff1aN\u6b21\u627e\u5230</p> <p>\u5e73\u5747\u60c5\u51b5\uff1aN/2\u6b21\u627e\u5230</p> <p>\u5728\u5b9e\u9645\u4e2d\u4e00\u822c\u60c5\u51b5\u5173\u6ce8\u7684\u662f\u7b97\u6cd5\u7684\u6700\u574f\u8fd0\u884c\u60c5\u51b5\uff0c\u6240\u4ee5\u6570\u7ec4\u4e2d\u641c\u7d22\u6570\u636e\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#23","title":"2.3\u5e38\u89c1\u65f6\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97\u4e3e\u4f8b","text":"<p>\u5b9e\u4f8b\u4e00:</p> <pre><code>// \u8ba1\u7b97Func2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(N))\nvoid Func2(int N)\n{\n    int count = 0;\n    for (int k = 0; k &lt; 2 * N; ++k)\n    {\n        ++count;\n    }\n    int M = 10;\n    while (M--)\n    {\n        ++count;\n    }\n    printf(\"%d\\n\", count);\n}\n</code></pre> <p>\u5b9e\u4f8b2\uff1a</p> <pre><code>// \u8ba1\u7b97Func3\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(M+N))\nvoid Func3(int N, int M)\n{\n    int count = 0;\n    for (int k = 0; k &lt; M; ++k)\n    {\n        ++count;\n    }\n    for (int k = 0; k &lt; N; ++k)\n    {\n        ++count;\n    }\n    printf(\"%d\\n\", count);\n}\n</code></pre> <p>\u5b9e\u4f8b3:</p> <pre><code>// \u8ba1\u7b97Func4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(1))\nvoid Func4(int N)\n{\n    int count = 0;\n    for (int k = 0; k &lt; 100; ++k)\n    {\n        ++count;\n    }\n    printf(\"%d\\n\", count);\n}\n</code></pre> <p>\u5b9e\u4f8b4:</p> <pre><code>// \u8ba1\u7b97strchr\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(N))\nconst char * strchr ( const char * str, int character );\n</code></pre> <p>\u5b9e\u4f8b5\uff1a</p> <pre><code>// \u8ba1\u7b97BubbleSort\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(N^2))\nvoid BubbleSort(int* a, int n)\n{\n    assert(a);\n    for (size_t end = n; end &gt; 0; --end)\n    {\n        int exchange = 0;\n        for (size_t i = 1; i &lt; end; ++i)\n        {\n            if (a[i - 1] &gt; a[i])\n            {\n                Swap(&amp;a[i - 1], &amp;a[i]);\n                exchange = 1;\n            }\n        }\n        if (exchange == 0)\n            break;\n    }\n}\n</code></pre> <p>\u5b9e\u4f8b6:</p> <pre><code>// \u8ba1\u7b97BinarySearch\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(logN))(\u6ce8:log\u9ed8\u8ba4\u662f\u4ee52\u4e3a\u5e95\u6570)\nint BinarySearch(int* a, int n, int x)\n{\n    assert(a);\n    int begin = 0;\n    int end = n - 1;\n    // [begin, end]\uff1abegin\u548cend\u662f\u5de6\u95ed\u53f3\u95ed\u533a\u95f4\uff0c\u56e0\u6b64\u6709=\u53f7\n    while (begin &lt;= end)\n    {\n        int mid = begin + ((end - begin) &gt;&gt; 1);\n        if (a[mid] &lt; x)\n            begin = mid + 1;\n        else if (a[mid] &gt; x)\n            end = mid - 1;\n        else\n            return mid;\n    }\n    return -1;\n}\n</code></pre> <p></p> <p>\u5bf9\u6bd4\u8868</p> N \u66b4\u529b\u67e5\u627e \u4e8c\u5206\u67e5\u627e 1000 1000(2^10) 10 100W 100W(2^20) 20 10\u4ebf 10\u4ebf(2^30) 30 <p>\u5b9e\u4f8b7\uff1a</p> <pre><code>// \u8ba1\u7b97\u9636\u4e58\u9012\u5f52Fac\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(N))\nlong long Fac(size_t N)\n{\n    if (0 == N)\n        return 1;\n    return Fac(N - 1) * N;\n}\n</code></pre> <p>\u5b9e\u4f8b8:</p> <pre><code>// \u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u9012\u5f52Fib\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f(O(2^N))\nlong long Fib(size_t N)\n{\n    if (N &lt; 3)\n        return 1;\n    return Fib(N - 1) + Fib(N - 2);\n}\n</code></pre> <p>\u8fd9\u4e2a\u5b9e\u4f8b\u6bd4\u8f83\u96be\uff0c\u7c7b\u4f3c\u7ec6\u80de\u5206\u88c2,\u4e0a\u56fe\uff1a</p> <p></p> <p>\u7591\u95ee\uff1a\u6808\u7684\u7a7a\u95f4\u5982\u6b64\u7684\u5c0f\uff0c\u4e3a\u4ec0\u4e48\u5f53N=50\u7684\u65f6\u5019\uff0c2^50\u7684size_t\u7684\u7a7a\u95f4\u4e0d\u4f1a\u5d29\u6e83</p> <p>\u89e3\u7b54\uff1a\u4e0a\u56fe\u5df2\u7ecf\u89e3\u91ca\u8fc7\u4e86\uff0c\u65f6\u95f4\u7684\u5229\u7528\u662f\u4e00\u53bb\u4e0d\u590d\u8fd4\uff0c\u7a7a\u95f4\u53ef\u4ee5\u91cd\u590d\u5229\u7528\uff0c\u518d\u4e0a\u4e00\u4e2a\u56fe\u5427!</p> <p></p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#3","title":"3.\u7a7a\u95f4\u590d\u6742\u5ea6","text":"<p>\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u662f\u4e00\u4e2a\u6570\u5b66\u8868\u8fbe\u5f0f\uff0c \u662f\u5bf9\u4e00\u4e2a\u7b97\u6cd5\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4e34\u65f6\u5360\u7528\u5b58\u50a8\u7a7a\u95f4\u5927\u5c0f\u7684\u91cf\u5ea6 \u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0d\u662f\u7a0b\u5e8f\u5360\u7528\u4e86\u591a\u5c11bytes\u7684\u7a7a\u95f4\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4e5f\u6ca1\u592a\u5927\u610f\u4e49\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u7b97\u7684\u662f\u53d8\u91cf\u7684\u4e2a\u6570\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97\u89c4\u5219\u57fa\u672c\u8ddf\u5b9e\u8df5\u590d\u6742\u5ea6\u7c7b\u4f3c\uff0c\u4e5f\u4f7f\u7528 \u5927O\u6e10\u8fdb\u8868\u793a\u6cd5\u3002</p> <p>\u6ce8\u610f\uff1a\u51fd\u6570\u8fd0\u884c\u65f6\u6240\u9700\u8981\u7684\u6808\u7a7a\u95f4(\u5b58\u50a8\u53c2\u6570\u3001\u5c40\u90e8\u53d8\u91cf\u3001\u4e00\u4e9b\u5bc4\u5b58\u5668\u4fe1\u606f\u7b49)\u5728\u7f16\u8bd1\u671f\u95f4\u5df2\u7ecf\u786e\u5b9a\u597d\u4e86\uff0c\u56e0 \u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u901a\u8fc7\u51fd\u6570\u5728\u8fd0\u884c\u65f6\u5019\u663e\u5f0f\u7533\u8bf7\u7684\u989d\u5916\u7a7a\u95f4\u6765\u786e\u5b9a</p> <p>\u5b9e\u4f8b\u4e00\uff1a</p> <pre><code>// \u8ba1\u7b97BubbleSort\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff1f(O(1))\nvoid BubbleSort(int* a, int n)\n{\n    assert(a);\n    for (size_t end = n; end &gt; 0; --end)\n    {\n        int exchange = 0;\n        for (size_t i = 1; i &lt; end; ++i)\n        {\n            if (a[i - 1] &gt; a[i])\n            {\n                Swap(&amp;a[i - 1], &amp;a[i]);\n                exchange = 1;\n            }\n        }\n        if (exchange == 0)\n            break;\n    }\n}\n</code></pre> <p>\u5b9e\u4f8b2:</p> <pre><code>// \u8ba1\u7b97Fibonacci\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff1f(O(N))\n// \u8fd4\u56de\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u524dn\u9879\nlong long* Fibonacci(size_t n)\n{\n    if (n == 0)\n        return NULL;\n    long long* fibArray = (long long*)malloc((n + 1) * sizeof(long long));\n    fibArray[0] = 0;\n    fibArray[1] = 1;\n    for (int i = 2; i &lt;= n; ++i)\n    {\n        fibArray[i] = fibArray[i - 1] + fibArray[i - 2];\n    }\n    return fibArray;\n}\n</code></pre> <p>\u5b9e\u4f8b3:</p> <pre><code>// \u8ba1\u7b97\u9636\u4e58\u9012\u5f52Fac\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff1f(O(N))\nlong long Fac(size_t N)\n{\n    if (N == 0)\n        return 1;\n    return Fac(N - 1) * N;\n}\n</code></pre>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#4","title":"4.\u5e38\u89c1\u590d\u6742\u5ea6\u5bf9\u6bd4","text":""},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#5-oj","title":"5. \u590d\u6742\u5ea6\u7684oj\u7ec3\u4e60","text":"<p>5.1\u6d88\u5931\u7684\u6570\u5b57OJ</p> <pre><code>//\u601d\u8def\u4e00\uff1a\u6c42\u603b\u548c-\u6bcf\u4e00\u4e2a\u6570\u5b57\n//\u65f6\u95f4\u590d\u6742\u5ea6O(N),\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nint missingNumber(int* nums, int numsSize) {\n    int N = numsSize;\n    int ret = N * (N + 1) / 2;\n    for (int i = 0; i &lt; numsSize; ++i)\n    {\n        ret -= nums[i];\n    }\n    return ret;\n}\n//\u601d\u8def\u4e8c\uff1aqsort\u6392\u5e8f(\u6392\u9664)\n//\u65f6\u95f4\u590d\u6742\u5ea6O(N*logN),\u7a7a\u95f4\u590d\u6742\u5ea6(logN)(\u540e\u9762\u6392\u5e8f\u4f1a\u8bf4\uff0c\u6682\u4e14\u8bb0\u4f4f)\n\n//\u601d\u8def\u4e09\uff1a\u5f02\u6216-&gt;\u627e\u5355\u8eab\u72d7\u95ee\u9898\n//\u65f6\u95f4\u590d\u6742\u5ea6O(N),\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nint missingNumber(int* nums, int numsSize) {\n    int N = numsSize;\n    int x = 0;\n    for (int i = 0; i &lt; numsSize; ++i)\n    {\n        x ^= nums[i];\n    }\n    for (size_t j = 0; j &lt; N + 1; ++j)\n    {\n        x ^= j;\n    }\n    return x;\n}\n\n//\n</code></pre> <p>5.2 \u65cb\u8f6c\u6570\u7ec4OJ \u5f85\u66f4\u65b0\uff01\uff01\uff01\uff01</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/","title":"3.\u987a\u5e8f\u8868 \u94fe\u8868","text":""},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#1","title":"1. \u7ebf\u6027\u8868","text":"<p>\u7ebf\u6027\u8868\uff08linear list\uff09\u662fn\u4e2a\u5177\u6709\u76f8\u540c\u7279\u6027\u7684\u6570\u636e\u5143\u7d20\u7684\u6709\u9650\u5e8f\u5217\u3002 \u7ebf\u6027\u8868\u662f\u4e00\u79cd\u5728\u5b9e\u9645\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u6570\u636e\u7ed3 \u6784\uff0c\u5e38\u89c1\u7684\u7ebf\u6027\u8868\uff1a\u987a\u5e8f\u8868\u3001\u94fe\u8868\u3001\u6808\u3001\u961f\u5217\u3001\u5b57\u7b26\u4e32...</p> <p>\u7ebf\u6027\u8868\u5728\u903b\u8f91\u4e0a\u662f\u7ebf\u6027\u7ed3\u6784\uff0c\u4e5f\u5c31\u8bf4\u662f\u8fde\u7eed\u7684\u4e00\u6761\u76f4\u7ebf\u3002\u4f46\u662f\u5728\u7269\u7406\u7ed3\u6784\u4e0a\u5e76\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\uff0c\u7ebf\u6027\u8868\u5728\u7269 \u7406\u4e0a\u5b58\u50a8\u65f6\uff0c\u901a\u5e38\u4ee5\u6570\u7ec4\u548c\u94fe\u5f0f\u7ed3\u6784\u7684\u5f62\u5f0f\u5b58\u50a8\u3002</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#2","title":"2. \u987a\u5e8f\u8868","text":""},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#21","title":"2.1 \u6982\u5ff5\u4ee5\u53ca\u7ed3\u6784","text":"<p>\u987a\u5e8f\u8868\u662f\u7528\u4e00\u6bb5\u7269\u7406\u5730\u5740\u8fde\u7eed\u7684\u5b58\u50a8\u5355\u5143\u4f9d\u6b21\u5b58\u50a8\u6570\u636e\u5143\u7d20\u7684\u7ebf\u6027\u7ed3\u6784\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u91c7\u7528\u6570\u7ec4\u5b58\u50a8\u3002\u5728\u6570\u7ec4 \u4e0a\u5b8c\u6210\u6570\u636e\u7684\u589e\u5220\u67e5\u6539\u3002 \u987a\u5e8f\u8868\u4e00\u822c\u53ef\u4ee5\u5206\u4e3a\uff1a</p> <p>1.\u9759\u6001\u987a\u5e8f\u8868\uff1a\u4f7f\u7528\u5b9a\u957f\u6570\u7ec4\u5b58\u50a8\u3002</p> <p>2.\u52a8\u6001\u987a\u5e8f\u8868\uff1a\u4f7f\u7528\u52a8\u6001\u5f00\u8f9f\u7684\u6570\u7ec4\u5b58\u50a8\u3002</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#22","title":"2.2 \u63a5\u53e3\u5b9e\u73b0","text":"<pre><code>typedef int SLTDateType;\ntypedef struct SListNode\n{\n    SLTDateType data;\n    struct SListNode* next;\n}SListNode;\n\n// \u52a8\u6001\u7533\u8bf7\u4e00\u4e2a\u8282\u70b9\nSListNode* BuySListNode(SLTDateType x);\n// \u5355\u94fe\u8868\u6253\u5370\nvoid SListPrint(SListNode* plist);\n// \u5355\u94fe\u8868\u5c3e\u63d2\nvoid SListPushBack(SListNode** pplist, SLTDateType x);\n// \u5355\u94fe\u8868\u7684\u5934\u63d2\nvoid SListPushFront(SListNode** pplist, SLTDateType x);\n// \u5355\u94fe\u8868\u7684\u5c3e\u5220\nvoid SListPopBack(SListNode** pplist);\n// \u5355\u94fe\u8868\u5934\u5220\nvoid SListPopFront(SListNode** pplist);\n// \u5355\u94fe\u8868\u67e5\u627e\nSListNode* SListFind(SListNode* plist, SLTDateType x);\n// \u5355\u94fe\u8868\u5728pos\u4f4d\u7f6e\u4e4b\u540e\u63d2\u5165x\n// \u5206\u6790\u601d\u8003\u4e3a\u4ec0\u4e48\u4e0d\u5728pos\u4f4d\u7f6e\u4e4b\u524d\u63d2\u5165\uff1f\nvoid SListInsertAfter(SListNode* pos, SLTDateType x);\n// \u5355\u94fe\u8868\u5220\u9664pos\u4f4d\u7f6e\u4e4b\u540e\u7684\u503c\n// \u5206\u6790\u601d\u8003\u4e3a\u4ec0\u4e48\u4e0d\u5220\u9664pos\u4f4d\u7f6e\uff1f\nvoid SListEraseAfter(SListNode* pos);\n// \u5355\u94fe\u8868\u7684\u9500\u6bc1\nvoid SListDestroy(SListNode** pplist);\n</code></pre>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#23","title":"2.3 \u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include\"SListNode.h\"\nSListNode* BuySListNode(SLTDateType x) {\n    SListNode* newnode = (SListNode*)malloc(sizeof(SListNode));\n    if (newnode == nullptr) {\n        printf(\"molloc fail\\n\");\n        exit(-1);\n    }\n    newnode-&gt;data = x;\n    newnode-&gt;next = nullptr;\n    return newnode;\n}\n\nvoid SListPrint(SListNode* plist) {\n    SListNode* cur = plist;\n    while (cur != nullptr) {\n        printf(\"%d-&gt;\", cur-&gt;data);\n        cur = cur-&gt;next;\n    }\n    printf(\"NULL\\n\");\n}\n\n\nvoid SListPushBack(SListNode** pplist, SLTDateType x) {\n    SListNode* newnode = BuySListNode(x);\n    if (*pplist == nullptr) *pplist = newnode;\n    else {\n        SListNode* tail = *pplist;\n        while (tail-&gt;next) tail = tail-&gt;next;\n        tail-&gt;next = newnode;\n    }\n}\n\nvoid SListPushFront(SListNode** pplist, SLTDateType x) {\n    SListNode* newnode = BuySListNode(x);\n    newnode-&gt;next = *pplist;\n    *pplist = newnode;\n}\n\nvoid SListPopBack(SListNode** pplist) {\n    assert(*pplist);\n    if ((*pplist)-&gt;next == nullptr) {\n        free(*pplist);\n        *pplist = nullptr;\n    }\n    else {\n        SListNode* tail = *pplist;\n        while (tail-&gt;next-&gt;next) tail = tail-&gt;next;\n        free(tail-&gt;next);\n        tail-&gt;next = nullptr;\n    }\n}\n\nvoid SListPopFront(SListNode** pplist) {\n    assert(*pplist);\n    SListNode* next = (*pplist)-&gt;next;\n    free(*pplist);\n    *pplist = next;\n}\n\nSListNode* SListFind(SListNode* plist, SLTDateType x) {\n    SListNode* cur = plist;\n    while (cur &amp;&amp; cur-&gt;data != x) cur = cur-&gt;next;\n    if (cur &amp;&amp; cur-&gt;data == x)return cur;\n    return nullptr;\n}\n\n\nvoid SListInsertAfter(SListNode* pos, SLTDateType x) {\n    assert(pos);\n    SListNode* newnode = BuySListNode(x);\n    newnode-&gt;next = pos-&gt;next;\n    pos-&gt;next = newnode;\n}\n\n\nvoid SListEraseAfter(SListNode* pos) {\n    assert(pos &amp;&amp; pos-&gt;next);\n    SListNode* nextNode = pos-&gt;next;\n    pos-&gt;next = nextNode-&gt;next;\n    free(nextNode);\n}\n\nvoid SListDestroy(SListNode** pplist) {\n    SListNode* cur = *pplist;\n    while (cur) {\n        SListNode* next = cur-&gt;next;\n        free(cur);\n        cur = next;\n    }\n    *pplist=nullptr;\n}\n</code></pre>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#24","title":"2.4 \u6570\u7ec4\u76f8\u5173\u9762\u8bd5\u9898","text":"<ol> <li>\u539f\u5730\u79fb\u9664\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u5143\u7d20val\uff0c\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\u3002OJ\u94fe\u63a5</li> </ol> <pre><code>int removeElement(int* nums, int numsSize, int val){\n    int left = 0;\n    for (int right = 0; right &lt; numsSize; ++right)\n    {\n        if (nums[right] != val)\n        {\n            nums[left] = nums[right];\n            left++;\n        }\n    }\n    return left;\n}\n</code></pre> <ol> <li>\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879\u3002OJ\u94fe\u63a5</li> </ol> <pre><code>class Solution {\npublic:\n    int removeDuplicates(vector&lt;int&gt;&amp; nums) {\n        int dst = 1, src = 1;\n        while(dst &lt; nums.size()){\n           if(nums[dst] == nums[dst-1]){\n               while(dst &lt; nums.size() &amp;&amp; nums[dst] == nums[dst-1]){\n                   dst++;\n               }\n            }\n            if(dst == nums.size()) ;\n            else nums[src++]=nums[dst++];\n        }\n        return src;\n    }\n};\n</code></pre> <ol> <li>\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002OJ\u94fe\u63a5</li> </ol> <pre><code>class Solution {\npublic:\n    void merge(vector&lt;int&gt;&amp; nums1, int m, vector&lt;int&gt;&amp; nums2, int n) {\n        int a[m + n];\n        int index1 = 0,index2 = 0, k = 0;\n        while(index1 &lt; m &amp;&amp; index2 &lt; n){\n            if(nums1[index1] &lt; nums2[index2]){\n                a[k++] = nums1[index1++];\n            }\n            else{\n                a[k++] = nums2[index2++];\n            }\n        }\n        while(index1 &lt; m) a[k++] = nums1[index1++];\n        while(index2 &lt; n) a[k++] = nums2[index2++];\n        for(int i = 0;i &lt; m + n; ++i) nums1[i] = a[i]; \n    }\n};\n</code></pre> <ol> <li>\u65cb\u8f6c\u6570\u7ec4\u3002OJ\u94fe\u63a5</li> </ol> <pre><code>class Solution {\npublic:\n    void rotate(vector&lt;int&gt;&amp; nums, int k) {\n       int n=nums.size();\n        vector&lt;int&gt; newarr(n);\n        for(int i=0;i&lt;n;++i)\n        {\n            newarr[(i+k)%n]=nums[i];\n        }\n        nums.assign(newarr.begin(),newarr.end());\n    }\n};\n</code></pre> <ol> <li>\u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5\u3002OJ\u94fe\u63a5</li> </ol> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; addToArrayForm(vector&lt;int&gt;&amp; num, int k) {\n        size_t index = 0;\n        vector&lt;int&gt; v;\n        while (k) {\n            v.push_back(k % 10);\n            k /= 10;\n            index++;\n        }\n        reverse(num.begin(), num.end());\n        int Max = max(index, num.size()) + 1;\n        while (num.size() &lt; Max)num.push_back(0);\n        while (v.size() &lt; Max)v.push_back(0);\n        vector&lt;int&gt; ans(Max + 1);\n        for (int i = 0; i &lt; Max; ++i) {\n            ans[i] += num[i] + v[i];\n            ans[i + 1] = ans[i] / 10;\n            ans[i] %= 10;\n        }\n        while (ans[ans.size() - 1] == 0 &amp;&amp; ans.size() != 1) ans.pop_back();\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n</code></pre>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#25","title":"2.5 \u987a\u5e8f\u8868\u7684\u95ee\u9898\u53ca\u601d\u8003","text":"<p>\u95ee\u9898\uff1a</p> <ol> <li> <p>\u4e2d\u95f4/\u5934\u90e8\u7684\u63d2\u5165\u5220\u9664\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)</p> </li> <li> <p>\u589e\u5bb9\u9700\u8981\u7533\u8bf7\u65b0\u7a7a\u95f4\uff0c\u62f7\u8d1d\u6570\u636e\uff0c\u91ca\u653e\u65e7\u7a7a\u95f4\u3002\u4f1a\u6709\u4e0d\u5c0f\u7684\u6d88\u8017\u3002</p> </li> <li> <p>\u589e\u5bb9\u4e00\u822c\u662f\u54482\u500d\u7684\u589e\u957f\uff0c\u52bf\u5fc5\u4f1a\u6709\u4e00\u5b9a\u7684\u7a7a\u95f4\u6d6a\u8d39\u3002\u4f8b\u5982\u5f53\u524d\u5bb9\u91cf\u4e3a100\uff0c\u6ee1\u4e86\u4ee5\u540e\u589e\u5bb9\u5230200\uff0c \u6211\u4eec\u518d\u7ee7\u7eed\u63d2\u5165\u4e865\u4e2a\u6570\u636e\uff0c\u540e\u9762\u6ca1\u6709\u6570\u636e\u63d2\u5165\u4e86\uff0c\u90a3\u4e48\u5c31\u6d6a\u8d39\u4e8695\u4e2a\u6570\u636e\u7a7a\u95f4\u3002</p> </li> </ol> <p>\u601d\u8003\uff1a</p> <p>\u5982\u4f55\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898\u5462\uff1f\u4e0b\u9762\u7ed9\u51fa\u4e86\u94fe\u8868\u7684\u7ed3\u6784\u6765\u770b\u770b\u3002</p>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#3","title":"3. \u94fe\u8868","text":""},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#31","title":"3.1 \u94fe\u8868\u7684\u6982\u5ff5\u53ca\u7ed3\u6784","text":"<p>\u6982\u5ff5\uff1a\u94fe\u8868\u662f\u4e00\u79cd\u7269\u7406\u5b58\u50a8\u7ed3\u6784\u4e0a\u975e\u8fde\u7eed\u3001\u975e\u987a\u5e8f\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u6570\u636e\u5143\u7d20\u7684\u903b\u8f91\u987a\u5e8f\u662f\u901a\u8fc7\u94fe\u8868\u4e2d\u7684\u6307\u9488\u94fe \u63a5\u6b21\u5e8f\u5b9e\u73b0\u7684 \u3002</p> <p>\u5b9e\u9645\u4e2d\u94fe\u8868\u7684\u7ed3\u6784\u975e\u5e38\u591a\u6837\uff0c\u4ee5\u4e0b\u60c5\u51b5\u7ec4\u5408\u8d77\u6765\u5c31\u67098\u79cd\u94fe\u8868\u7ed3\u6784\uff1a</p> <ol> <li> <p>\u5355\u5411\u3001\u53cc\u5411</p> </li> <li> <p>\u5e26\u5934\u3001\u4e0d\u5e26\u5934</p> </li> <li> <p>\u5faa\u73af\u3001\u975e\u5faa\u73af </p> </li> <li> <p>\u65e0\u5934\u5355\u5411\u975e\u5faa\u73af\u94fe\u8868\uff1a\u7ed3\u6784\u7b80\u5355\uff0c\u4e00\u822c\u4e0d\u4f1a\u5355\u72ec\u7528\u6765\u5b58\u6570\u636e\u3002\u5b9e\u9645\u4e2d\u66f4\u591a\u662f\u4f5c\u4e3a\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u7684\u5b50\u7ed3 \u6784\uff0c\u5982\u54c8\u5e0c\u6876\u3001\u56fe\u7684\u90bb\u63a5\u8868\u7b49\u7b49\u3002\u53e6\u5916\u8fd9\u79cd\u7ed3\u6784\u5728\u7b14\u8bd5\u9762\u8bd5\u4e2d\u51fa\u73b0\u5f88\u591a\u3002</p> </li> <li> <p>\u5e26\u5934\u53cc\u5411\u5faa\u73af\u94fe\u8868\uff1a\u7ed3\u6784\u6700\u590d\u6742\uff0c\u4e00\u822c\u7528\u5728\u5355\u72ec\u5b58\u50a8\u6570\u636e\u3002\u5b9e\u9645\u4e2d\u4f7f\u7528\u7684\u94fe\u8868\u6570\u636e\u7ed3\u6784\uff0c\u90fd\u662f\u5e26\u5934\u53cc\u5411 \u5faa\u73af\u94fe\u8868\u3002\u53e6\u5916\u8fd9\u4e2a\u7ed3\u6784\u867d\u7136\u7ed3\u6784\u590d\u6742\uff0c\u4f46\u662f\u4f7f\u7528\u4ee3\u7801\u5b9e\u73b0\u4ee5\u540e\u4f1a\u53d1\u73b0\u7ed3\u6784\u4f1a\u5e26\u6765\u5f88\u591a\u4f18\u52bf\uff0c\u5b9e\u73b0\u53cd\u800c \u7b80\u5355\u4e86\uff0c\u540e\u9762\u6211\u4eec\u4ee3\u7801\u5b9e\u73b0\u4e86\u5c31\u77e5\u9053\u4e86\u3002</p> </li> </ol>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#32","title":"3.2 \u94fe\u8868\u7684\u5b9e\u73b0","text":"<pre><code>typedef int SLTDateType;\ntypedef struct SListNode\n{\n    SLTDateType data;\n    struct SListNode* next;\n}SListNode;\n\n// \u52a8\u6001\u7533\u8bf7\u4e00\u4e2a\u8282\u70b9\nSListNode* BuySListNode(SLTDateType x);\n// \u5355\u94fe\u8868\u6253\u5370\nvoid SListPrint(SListNode* plist);\n// \u5355\u94fe\u8868\u5c3e\u63d2\nvoid SListPushBack(SListNode** pplist, SLTDateType x);\n// \u5355\u94fe\u8868\u7684\u5934\u63d2\nvoid SListPushFront(SListNode** pplist, SLTDateType x);\n// \u5355\u94fe\u8868\u7684\u5c3e\u5220\nvoid SListPopBack(SListNode** pplist);\n// \u5355\u94fe\u8868\u5934\u5220\nvoid SListPopFront(SListNode** pplist);\n// \u5355\u94fe\u8868\u67e5\u627e\nSListNode* SListFind(SListNode* plist, SLTDateType x);\n// \u5355\u94fe\u8868\u5728pos\u4f4d\u7f6e\u4e4b\u540e\u63d2\u5165x\n// \u5206\u6790\u601d\u8003\u4e3a\u4ec0\u4e48\u4e0d\u5728pos\u4f4d\u7f6e\u4e4b\u524d\u63d2\u5165\uff1f\nvoid SListInsertAfter(SListNode* pos, SLTDateType x);\n// \u5355\u94fe\u8868\u5220\u9664pos\u4f4d\u7f6e\u4e4b\u540e\u7684\u503c\n// \u5206\u6790\u601d\u8003\u4e3a\u4ec0\u4e48\u4e0d\u5220\u9664pos\u4f4d\u7f6e\uff1f\nvoid SListEraseAfter(SListNode* pos);\n// \u5355\u94fe\u8868\u7684\u9500\u6bc1\nvoid SListDestroy(SList* plist);\n</code></pre>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#33","title":"3.3 \u94fe\u8868\u7684\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include \"SList.h\"\n\nSListNode* BuySListNode(SLTDateType x)\n{\n    SListNode* node = (SListNode*)malloc(sizeof(SListNode));\n    node-&gt;data = x;\n    node-&gt;next = NULL;\n\n    return node;\n}\n\nvoid SListPrint(SListNode* plist)\n{\n    SListNode* cur = plist;\n    while (cur)\n    //while (cur != NULL)\n    {\n        printf(\"%d-&gt;\", cur-&gt;data);\n        cur = cur-&gt;next;\n    }\n    printf(\"NULL\\n\");\n}\n\nvoid SListPushBack(SListNode** pplist, SLTDateType x)\n{\n    SListNode* newnode = BuySListNode(x);\n    if (*pplist == NULL)\n    {\n        *pplist = newnode;\n    }\n    else\n    {\n        SListNode* tail = *pplist;\n        while (tail-&gt;next != NULL)\n        {\n            tail = tail-&gt;next;\n        }\n\n        tail-&gt;next = newnode;\n    }\n}\n\nvoid SListPopBack(SListNode** pplist)\n{\n    SListNode* prev = NULL;\n    SListNode* tail = *pplist;\n    // 1.\u7a7a\u3001\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\n    // 2.\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u8282\u70b9\n    if (tail == NULL || tail-&gt;next == NULL)\n    {\n        free(tail);\n        *pplist = NULL;\n    }\n    else\n    {\n        while (tail-&gt;next)\n        {\n            prev = tail;\n            tail = tail-&gt;next;\n        }\n\n        free(tail);\n        tail = NULL;\n\n        prev-&gt;next = NULL;\n    }\n}\n\n\nvoid SListPushFront(SListNode** pplist, SLTDateType x)\n{\n    assert(pplist);\n\n    // 1.\u7a7a\n    // 2.\u975e\u7a7a\n    SListNode* newnode = BuySListNode(x);\n    if (*pplist == NULL)\n    {\n        *pplist = newnode;\n    }\n    else\n    {\n        newnode-&gt;next = *pplist;\n        *pplist = newnode;\n    }\n}\n\nvoid SListPopFront(SListNode** pplist)\n{\n    // 1.\u7a7a\n    // 2.\u4e00\u4e2a\n    // 3.\u4e24\u4e2a\u53ca\u4ee5\u4e0a\n    SListNode* first = *pplist;\n    if (first == NULL)\n    {\n        return;\n    }\n    else if (first-&gt;next == NULL)\n    {\n        free(first);\n        *pplist = NULL;\n    }\n    else\n    {\n        SListNode* next = first-&gt;next;\n        free(first);\n        *pplist = next;\n    }\n}\n\nSListNode* SListFind(SListNode* plist, SLTDateType x)\n{\n    SListNode* cur = plist;\n    while (cur)\n    {\n        if (cur-&gt;data == x)\n            return cur;\n\n        cur = cur-&gt;next;\n    }\n\n    return NULL;\n}\n\nvoid SListInsertAfter(SListNode* pos, SLTDateType x)\n{\n    assert(pos);\n    SListNode* next = pos-&gt;next;\n    // pos newnode next\n    SListNode* newnode = BuySListNode(x);\n    pos-&gt;next = newnode;\n    newnode-&gt;next = next;\n}\n\nvoid SListEraseAfter(SListNode* pos)\n{\n    assert(pos);\n    // pos next nextnext\n    SListNode* next = pos-&gt;next;\n\n    if (next != NULL)\n    {\n        SListNode* nextnext = next-&gt;next;\n        free(next);\n        pos-&gt;next = nextnext;\n    }\n}\n</code></pre>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#34","title":"3.4 \u94fe\u8868\u9762\u8bd5\u9898","text":"<p>1.\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c\u00a0val\u00a0\u7684\u6240\u6709\u8282\u70b9\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        ListNode* newHead, * newTail;\n        newHead = newTail = (ListNode*)malloc(sizeof(ListNode));\n        ListNode* cur = head;\n        bool flag = true, one = true;\n        while (cur) {\n            if (cur-&gt;val != val) {\n                flag = false;\n                if (!one) {\n                    newTail-&gt;next = cur;\n                    newTail = newTail-&gt;next;\n                }\n                if (one) newHead = newTail = cur, one = false;\n            }\n            cur = cur-&gt;next;\n        }\n        if (newTail) newTail-&gt;next = nullptr;\n        if (flag) return nullptr;\n        return newHead;\n    }\n};\n</code></pre> <p>2.\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if(!head) return nullptr;\n        ListNode* n1, *n2, *n3;\n        n1 = nullptr;\n        n2 = head;\n        n3 = head-&gt;next;  \n        while(n2){\n            n2-&gt;next = n1;\n            n1 = n2;\n            n2 = n3;\n            if(n3) n3 = n3-&gt;next;\n        }\n        return n1;\n    }\n};\n</code></pre> <p>3.\u7ed9\u5b9a\u4e00\u4e2a\u5e26\u6709\u5934\u7ed3\u70b9 head \u7684\u975e\u7a7a\u5355\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\u3002\u5982\u679c\u6709\u4e24\u4e2a\u4e2d\u95f4\u7ed3\u70b9\uff0c\u5219\u8fd4\u56de\u7b2c\u4e8c\u4e2a \u4e2d\u95f4\u7ed3\u70b9\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* middleNode(ListNode* head) {\n        ListNode* slow, *fast;\n        slow = fast = head;\n        while(fast &amp;&amp; fast-&gt;next){\n            slow = slow-&gt;next;\n            fast = fast-&gt;next-&gt;next;\n        }\n        return slow;\n    }\n};\n</code></pre> <p>4.\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) {\n        if(!pListHead) return nullptr;\n        ListNode* slow, *fast;\n        slow = fast = pListHead;\n        for (int i = 1; i &lt;= k; ++i) {\n            if (!fast) return nullptr;\n            fast = fast-&gt;next;\n        }\n        while(fast) slow = slow-&gt;next,fast = fast-&gt;next;\n        return slow;\n    }\n};\n</code></pre> <p>5.\u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210 \u7684\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* guard, *tail;\n        guard = tail = (ListNode*)malloc(sizeof(ListNode));\n        while (list1 &amp;&amp; list2){\n            if (list1-&gt;val &lt; list2-&gt;val){\n                tail-&gt;next = list1;\n                list1 = list1-&gt;next; \n                tail = tail-&gt;next;\n            }else{\n                tail-&gt;next = list2;\n                list2 = list2-&gt;next; \n                tail = tail-&gt;next;\n            }\n        }\n        while (list1){\n            tail-&gt;next = list1;\n            list1 = list1-&gt;next; \n            tail = tail-&gt;next;\n        }\n        while (list2){\n            tail-&gt;next = list2;\n            list2 = list2-&gt;next;\n            tail = tail-&gt;next;\n        }\n        tail-&gt;next = nullptr;\n        ListNode* head = guard-&gt;next;\n        free(guard);\n        return head;\n    }\n};\n</code></pre> <p>6.\u7f16\u5199\u4ee3\u7801\uff0c\u4ee5\u7ed9\u5b9a\u503cx\u4e3a\u57fa\u51c6\u5c06\u94fe\u8868\u5206\u5272\u6210\u4e24\u90e8\u5206\uff0c\u6240\u6709\u5c0f\u4e8ex\u7684\u7ed3\u70b9\u6392\u5728\u5927\u4e8e\u6216\u7b49\u4e8ex\u7684\u7ed3\u70b9\u4e4b\u524d \u3002OJ\u94fe\u63a5</p> <pre><code>class Partition {\npublic:\n    ListNode* partition(ListNode* pHead, int x) {\n        ListNode* guard1, *tail1, *guard2, *tail2;\n        guard1 = tail1 = (ListNode*)malloc(sizeof(ListNode));\n        guard2 = tail2 = (ListNode*)malloc(sizeof(ListNode));\n        while (pHead){\n            if (pHead-&gt;val &lt; x){\n                tail1-&gt;next = pHead;\n                tail1 = tail1-&gt;next;\n            }else{\n                tail2-&gt;next = pHead;\n                tail2 = tail2-&gt;next;\n            }\n            pHead = pHead-&gt;next;\n        }\n        tail1-&gt;next = guard2-&gt;next;\n        tail2-&gt;next = nullptr;\n        pHead = guard1-&gt;next;\n        free(guard1);\n        free(guard2);\n        return pHead;\n    }\n};\n</code></pre> <p>7.\u94fe\u8868\u7684\u56de\u6587\u7ed3\u6784\u3002OJ\u94fe\u63a5</p> <pre><code>ListNode* middleNode(ListNode* head) {\n    ListNode* slow, *fast;\n    slow = fast = head;\n    while (fast &amp;&amp; fast-&gt;next) {\n        slow = slow-&gt;next;\n        fast = fast-&gt;next-&gt;next;\n    }\n    return slow;\n}\n\nListNode* reverseList(ListNode* head) {\n    if (!head) return nullptr;\n    ListNode* n1, *n2, *n3;\n    n1 = nullptr;\n    n2 = head;\n    n3 = head-&gt;next;\n    while (n2) {\n        n2-&gt;next = n1;\n        n1 = n2;\n        n2 = n3;\n        if (n3) n3 = n3-&gt;next;\n    }\n    return n1;\n}\nclass PalindromeList {\npublic:\n    bool chkPalindrome(ListNode* A) {\n        if (!A) return true;\n        ListNode* head1 = A, *mid = middleNode(A), *head2;\n        head2 = reverseList(mid);\n        while (head1-&gt;next &amp;&amp; head2-&gt;next){\n            if(head1-&gt;val != head2-&gt;val) return false;\n            head1 = head1-&gt;next;\n            head2 = head2-&gt;next;\n        }\n        return true;\n    }\n};\n</code></pre> <p>8.\u8f93\u5165\u4e24\u4e2a\u94fe\u8868\uff0c\u627e\u51fa\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode* curA = headA, *curB = headB;\n        int stepA = 0, stepB = 0;\n        while (curA) stepA++, curA = curA-&gt;next;\n        while (curB) stepB++, curB = curB-&gt;next;\n        if (stepA &lt; stepB) for (int i = 1; i &lt;= abs(stepA - stepB); ++i) headB = headB-&gt;next;\n        else for (int i = 1; i &lt;= abs(stepA - stepB); ++i) headA = headA-&gt;next;\n        while (headA){\n            if(headA == headB) return headA;\n            headA = headA-&gt;next;\n            headB = headB-&gt;next;\n        }\n        return nullptr;\n    }\n};\n</code></pre> <p>9.\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode *slow, *fast;\n        slow = fast = head;\n        while(fast  &amp;&amp; fast-&gt;next){\n            slow = slow-&gt;next;\n            fast = fast-&gt;next-&gt;next;\n            if(slow == fast) return true;\n        }\n        return false;\n    }\n};\n</code></pre> <p>10.\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002\u00a0\u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de\u00a0NULLOJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode *slow, *fast;\n        slow = fast = head;\n        while(fast &amp;&amp; fast-&gt;next){\n            slow = slow-&gt;next;\n            fast = fast-&gt;next-&gt;next;\n            if(slow == fast){\n                ListNode *meet = slow; \n                while(true){\n                    if(meet == head) return meet;\n                    meet = meet-&gt;next;\n                    head = head-&gt;next;\n                }\n            }\n        }\n        return nullptr;\n    }\n};\n</code></pre> <p>11.\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u989d\u5916\u589e\u52a0\u7684\u968f\u673a\u6307\u9488\uff0c\u8be5\u6307\u9488\u53ef\u4ee5\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u6216\u7a7a\u8282\u70b9\u3002 \u8981\u6c42\u8fd4\u56de\u8fd9\u4e2a\u94fe\u8868\u7684\u6df1\u5ea6\u62f7\u8d1d\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        Node* cur = head;\n        while (cur){\n            Node* next = cur-&gt;next;\n            Node* copy = (Node*)malloc(sizeof(Node));\n            cur-&gt;next = copy;\n            copy-&gt;val = cur-&gt;val;\n            copy-&gt;next = next;\n            cur = next;\n        }\n        cur = head;\n        while (cur){\n            if (cur-&gt;random) cur-&gt;next-&gt;random = cur-&gt;random-&gt;next;\n            else cur-&gt;next-&gt;random = nullptr;\n            cur = cur-&gt;next-&gt;next;\n        }\n        cur = head;\n        Node* guard ,*copyTail;\n        guard = copyTail = (Node*)malloc(sizeof(Node));\n        while (cur){\n            Node* copy = cur-&gt;next;\n            Node* next = copy-&gt;next;\n            copyTail-&gt;next = copy;\n            copyTail = copyTail-&gt;next;\n            cur-&gt;next = next;\n            cur = next;\n        }\n        copyTail-&gt;next = nullptr;\n        Node* copyHead = guard-&gt;next;\n        free(guard);\n        return copyHead;\n    }\n};\n</code></pre> <p>12.\u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* insertionSortList(ListNode* head) {\n        if (head == nullptr) return head;\n        ListNode* sortHead = head;\n        ListNode* cur = head-&gt;next;\n        head-&gt;next = nullptr;\n        while (cur){\n            ListNode* next = cur-&gt;next;\n            ListNode* prevA = nullptr, *curA = sortHead;\n            while (curA){\n                if (curA-&gt;val &gt; cur-&gt;val) break;\n                else prevA = curA, curA = curA-&gt;next;\n            }\n            if (!prevA) cur-&gt;next = curA, sortHead = cur;\n            else prevA-&gt;next = cur, cur-&gt;next = curA;\n            cur = next;\n        }\n        return sortHead;\n    }\n};\n</code></pre> <p>13.\u5728\u4e00\u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u4e2d\uff0c\u5b58\u5728\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u8bf7\u5220\u9664\u8be5\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u91cd\u590d\u7684\u7ed3\u70b9\u4e0d\u4fdd\u7559\uff0c\u8fd4\u56de\u94fe\u8868\u5934 \u6307\u9488\u3002OJ\u94fe\u63a5</p> <pre><code>class Solution {\npublic:\n    ListNode* deleteDuplication(ListNode* pHead) {\n        if (pHead == nullptr || pHead-&gt;next == nullptr) return pHead;\n        ListNode* cur = pHead, *next = cur-&gt;next;\n        ListNode* guard, *tail;\n        guard = tail = (ListNode*)malloc(sizeof(ListNode));\n        bool flag = false;\n        while(next){\n            if(cur-&gt;val == next-&gt;val){\n                flag = true;\n                cur-&gt;next = next-&gt;next;\n                free(next);\n                next = cur-&gt;next;\n            }\n            else{\n                if (flag) {\n                    ListNode* del = cur;\n                    cur = cur-&gt;next;\n                    next = next-&gt;next;\n                    free(del);\n                }\n                //\u5982\u679cnext\u4e3a\u7a7anext-&gt;val\u5c31\u4e0d\u80fd\u8bbf\u95ee\uff0c\u4e14cur\u53ef\u4ee5\u5b58\u50a8\n                if (next == nullptr || cur-&gt;val != next-&gt;val){\n                    tail-&gt;next = cur;\n                    tail = tail-&gt;next;\n                    cur = next;\n                    if (next) next = next-&gt;next;\n                    if (!next) tail-&gt;next = cur, tail = tail-&gt;next;\n                //\u6392\u96641,2\u7684\u60c5\u51b5\u53ea\u5b58\u50a8\u4e861,2\u6ca1\u5b58\u50a8\u5c31\u9000\u51fa\u4e86\u3002\n                }\n                flag = false;\n            }\n        }\n        if (tail)tail-&gt;next = nullptr;//\u6392\u9664tail==\u7a7a\u7684\u60c5\u51b5(1,1,2)\n        pHead = guard-&gt;next;\n        free(guard);\n        return pHead;\n    }\n};\n</code></pre>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#35","title":"3.5 \u53cc\u5411\u94fe\u8868\u7684\u5b9e\u73b0","text":"<pre><code>#pragma once\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;assert.h&gt;\ntypedef int LTDateType;\ntypedef struct ListNode\n{\n    struct ListNode* next;\n    struct ListNode* prev;\n    LTDateType date;\n}ListNode;\n\nListNode* BuyListNode(LTDateType x);\n\nListNode* InitList();\n\nvoid ListPushBack(ListNode* phead, LTDateType x);\n\nvoid ListPrint(ListNode* phead);\n\nvoid ListPushFront(ListNode* phead, LTDateType x);\n\nvoid ListPopBack(ListNode* phead);\n\nvoid ListPopFront(ListNode* phead);\n\nListNode* ListFind(ListNode* phead, LTDateType x);\n\n//\u524d\u63d2\nvoid ListInert(ListNode* pos, LTDateType x);\n\nvoid ListErase(ListNode* pos);\n\nint ListEmpty(ListNode* phead);\n\nint ListSize(ListNode* phead);\n\nvoid ListDestory(ListNode* phead);\n</code></pre>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#36","title":"3.6 \u53cc\u5411\u94fe\u8868\u7684\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include\"List.h\"\nListNode* BuyListNode(LTDateType x)\n{\n    ListNode* node = (ListNode*)malloc(sizeof(ListNode));\n    node-&gt;prev = NULL;\n    node-&gt;next = NULL;\n    node-&gt;date = x;\n    return node;\n}\n\nListNode* InitList()\n{\n    ListNode* phead = BuyListNode(0);\n    phead-&gt;next = phead;\n    phead-&gt;prev = phead;\n    return phead;\n}\n\nvoid ListPushBack(ListNode* phead, LTDateType x)\n{\n    //ListNode* tail = phead-&gt;prev;\n    //ListNode* newnode = BuyListNode(x);\n    //tail-&gt;next = newnode;\n    //newnode-&gt;prev = tail;\n    //phead-&gt;prev = newnode;\n    //newnode-&gt;next = phead;\n    ListInert(phead, x);\n}\n\nvoid ListPrint(ListNode* phead)\n{\n    ListNode* cur = phead-&gt;next;\n    while (cur != phead)\n    {\n        printf(\"%d \", cur-&gt;date);\n        cur = cur-&gt;next;\n    }\n    printf(\"\\n\");\n}\n\n\nvoid ListPushFront(ListNode* phead, LTDateType x)\n{\n    //ListNode* newnode = BuyListNode(x);\n    //ListNode* first = phead-&gt;next;\n    //phead-&gt;next = newnode;\n    //newnode-&gt;prev = phead;\n    //newnode-&gt;next = first;\n    //first-&gt;prev = newnode;\n    ListInert(phead-&gt;next, x);\n}\n\nvoid ListPopBack(ListNode* phead)\n{\n    //assert(phead != phead-&gt;next);\n    //ListNode* tail = phead-&gt;prev;\n    //ListNode* tailPrev = tail-&gt;prev;\n    //free(tail);\n    //phead-&gt;prev = tailPrev;\n    //tailPrev-&gt;next = phead;\n    ListErase(phead-&gt;prev);\n}\n\nvoid ListPopFront(ListNode* phead)\n{\n    //assert(phead != phead-&gt;next);\n    //ListNode* cur = phead-&gt;next;\n    //ListNode* next = cur-&gt;next;\n    //free(cur);\n    //phead-&gt;next = next;\n    //next-&gt;prev = phead;\n    ListErase(phead-&gt;next);\n}\n\nListNode* ListFind(ListNode* phead, LTDateType x)\n{\n    ListNode* cur = phead-&gt;next;\n    while (cur!=phead)\n    {\n        if (cur-&gt;date == x)\n        {\n            return cur;\n        }\n        cur = cur-&gt;next;\n    }\n    return NULL;\n}\n\n//\u63d2\u5165phead\uff0c\u76f8\u5f53\u4e8e\u5c3e\u63d2\nvoid ListInert(ListNode* pos, LTDateType x)\n{\n    ListNode* prev = pos-&gt;prev;\n    ListNode* newnode = BuyListNode(x);\n    prev-&gt;next = newnode;\n    newnode-&gt;prev = prev;\n    newnode-&gt;next = pos;\n    pos-&gt;prev = newnode;\n}\n\nvoid ListErase(ListNode* pos)\n{\n    ListNode* prev = pos-&gt;prev;\n    ListNode* next = pos-&gt;next;\n    free(pos);\n    prev-&gt;next = next;\n    next-&gt;prev = prev;\n}\n\nint ListEmpty(ListNode* phead)\n{\n    //\u662f\u7a7a\u8fd4\u56de1\uff0c\u4e0d\u662f\u7a7a\u8fd4\u56de0,\u65e0C99\n    return phead-&gt;next == phead ? 1 : 0;\n}\n\nint ListSize(ListNode* phead)\n{\n    ListNode* cur = phead-&gt;next;\n    int size = 0;\n    while (cur != phead)\n    {\n        ++size;\n        cur = cur-&gt;next;\n    }\n    printf(\"%d\\n\",size);\n}\n\nvoid ListDestory(ListNode* phead)\n{\n    ListNode* cur = phead-&gt;next;\n    while (cur != phead)\n    {\n        ListNode* next = cur-&gt;next;\n        free(cur);\n        cur = next;\n    }\n    free(phead);\n    phead = NULL;\n}\n</code></pre>"},{"location":"%E5%88%9D%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E9%A1%BA%E5%BA%8F%E8%A1%A8_%E9%93%BE%E8%A1%A8/#37","title":"3.7 \u987a\u5e8f\u8868\u548c\u94fe\u8868\u7684\u533a\u522b\u548c\u8054\u7cfb","text":"<p>\u987a\u5e8f\u8868\uff1a</p> <p>\u4f18\u70b9\uff1a\u7a7a\u95f4\u8fde\u7eed\u3001\u652f\u6301\u968f\u673a\u8bbf\u95ee</p> <p>\u7f3a\u70b9\uff1a1.\u4e2d\u95f4\u6216\u524d\u9762\u90e8\u5206\u7684\u63d2\u5165\u5220\u9664\u65f6\u95f4\u590d\u6742\u5ea6O(N) 2.\u589e\u5bb9\u7684\u4ee3\u4ef7\u6bd4\u8f83\u5927\u3002</p> <p>\u94fe\u8868\uff1a</p> <p>\u7f3a\u70b9\uff1a\u4ee5\u8282\u70b9\u4e3a\u5355\u4f4d\u5b58\u50a8\uff0c\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee</p> <p>\u4f18\u70b9\uff1a1.\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5220\u9664\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1) 2.\u6ca1\u6709\u589e\u5bb9\u95ee\u9898\uff0c\u63d2\u5165\u4e00\u4e2a\u5f00\u8f9f\u4e00\u4e2a\u7a7a\u95f4\u3002</p>"},{"location":"%E8%8B%B1%E8%AF%AD/%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86%E4%BB%A5%E5%8F%8A%E4%BA%94%E5%A4%A7%E5%8F%A5%E5%9E%8B/","title":"\u53e5\u5b50\u6210\u5206\u4ee5\u53ca\u4e94\u5927\u53e5\u578b","text":""},{"location":"%E8%8B%B1%E8%AF%AD/%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86%E4%BB%A5%E5%8F%8A%E4%BA%94%E5%A4%A7%E5%8F%A5%E5%9E%8B/#1","title":"1.\u4e3b\u8bed","text":"<p>\u5b9a\u4e49:\u4e00\u53e5\u8bdd\u4e3b\u8981\u53d9\u8ff0\u7684\u5bf9\u8c61\u6216\u8005\u8fd9\u53e5\u8bdd\u4e3b\u8981\u8bb2\u7684\u5185\u5bb9\u3002</p> <p>\u5145\u5f53\u4e3b\u8bed\u7684\u8bcd\u8bed\uff1a\u540d\u8bcd\u3001\u4ee3\u8bcd\u3001\u6570\u8bcd\u3001\u52a8\u8bcd\u4e0d\u5b9a\u5f0f\u77ed\u8bed\u3001\u52a8\u540d\u8bcd\u77ed\u8bed\u3001\u53e5\u5b50\u3001\u5176\u4ed6\u3002</p>"},{"location":"%E8%8B%B1%E8%AF%AD/%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86%E4%BB%A5%E5%8F%8A%E4%BA%94%E5%A4%A7%E5%8F%A5%E5%9E%8B/#_1","title":"\u4e00\u3001\u540d\u8bcd","text":"<p>\u540d\u8bcd\u90fd\u53ef\u4ee5\u505a\u4e3b\u8bed\u3002</p> <p>(1)Mr Liu is a student. \u5218\u5148\u751f\u662f\u4e00\u4f4d\u5b66\u751f(\u4eba\u540dMr Liu\u505a\u4e3b\u8bed)</p> <p>(2)Si Chuan is beautiful. \u56db\u5ddd\u5f88\u6f02\u4eae(\u5730\u540dSi chuan\u505a\u4e3b\u8bed)</p> <p>(3)The book is expensive. \u8fd9\u672c\u4e66\u5f88\u8d35(\u666e\u901a\u540d\u8bcdbook\u505a\u4e3b\u8bed)</p> <p>(4)China is very large. \u4e2d\u56fd\u5f88\u5927(\u4e13\u6709\u540d\u8bcdChina\u505a\u4e3b\u8bed) </p>"},{"location":"%E8%8B%B1%E8%AF%AD/%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86%E4%BB%A5%E5%8F%8A%E4%BA%94%E5%A4%A7%E5%8F%A5%E5%9E%8B/#_2","title":"\u4e8c\u3001\u4eba\u79f0\u4ee3\u8bcd/\u6307\u793a\u4ee3\u8bcd","text":"<p>\u5b9a\u4e49\uff1a\u4e3a\u4e86\u907f\u514d\u91cd\u590d\u800c\u66ff\u4ee3\u540d\u8bcd\u7684\u8bcd\u8bed\u3002</p> <p>eg:</p> <p>Mr Liu is a student. Mr Liu is from Si Chuan.----&gt;Mr Liu is a student,He is form Si Chuan.</p> <p>\u4ee3\u66ff\u4eba\u7684\u4ee3\u8bcd\u5c31\u53eb\u4eba\u79f0\u4ee3\u8bcd(\u6709\u4e9b\u4eba\u79f0\u4ee3\u8bcd\u4e5f\u53ef\u4ee5\u6307\u4ee3\u4e8b\u7269)</p> <p>\u4eba\u79f0\u4ee3\u8bcd\u7684\u4e3b\u683c:I(\u6211),we(\u6211\u4eec),you(\u4f60),she(\u5979),he(\u4ed6),it(\u5b83),they(\u4ed6\u4eec\uff0c\u5979\u4eec\uff0c\u5b83\u4eec).</p> <p>(1)I am a student. \u6211\u662f\u5b66\u751f\u3002(\u4eba\u79f0\u4ee3\u8bcd\u4e3b\u683cI\u505a\u4e3b\u8bed\uff0c\u6ce8\u610f\u4e0d\u80fd\u8bf4me is student)</p> <p>(2)She is beautiful. \u4ed6\u5f88\u6f02\u4eae\u3002(\u4eba\u79f0\u4ee3\u8bcd\u4e3b\u683cshe\u505a\u4e3b\u8bed\uff0c\u6ce8\u610f\u4e0d\u80fd\u8bf4her is beautiful)</p> <p>(3)You are rich. \u4f60\u662f\u6709\u94b1\u7684\u3002(\u4eba\u79f0\u4ee3\u8bcd\u4e3b\u683cyou\u505a\u4e3b\u8bed)</p> <p>(4)He is very handsome. \u4ed6\u5f88\u5e05\u3002(\u4eba\u79f0\u4ee3\u8bcd\u4e3b\u683che\u505a\u4e3b\u8bed)</p> <p>(5)It is cheap. \u5b83\u4fbf\u5b9c\u3002(\u4eba\u79f0\u4ee3\u8bcd\u4e3b\u683cIt\u505a\u4e3b\u8bed)</p> <p>(6)We are busy. \u6211\u4eec\u5fd9\u3002(\u4eba\u79f0\u4ee3\u8bcd\u4e3b\u683cwe\u505a\u4e3b\u8bed)</p> <p>(7)They are happy. \u4ed6\u4eec\u662f\u5feb\u4e50\u7684\u3002(\u4eba\u79f0\u4ee3\u8bcdthey\u505a\u4e3b\u8bed)</p> <p>\u6307\u793a\u4ee3\u8bcd\uff1aThis\u3001That\u3001These\u3001Those</p> <p>(1)This is my pen. \u8fd9\u662f\u6211\u7684\u94a2\u7b14\u3002(\u6307\u793a\u4ee3\u8bcdthis\u505a\u4e3b\u8bed)</p> <p>(2)That is her computer \u90a3\u662f\u5979\u7684\u7535\u8111\u3002(\u6307\u793a\u4ee3\u8bcdthat\u505a\u4e3b\u8bed)</p>"},{"location":"%E8%8B%B1%E8%AF%AD/%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86%E4%BB%A5%E5%8F%8A%E4%BA%94%E5%A4%A7%E5%8F%A5%E5%9E%8B/#_3","title":"\u4e09\u3001\u6570\u8bcd","text":"<p>1.\u57fa\u6570\u8bcd\uff1azero one two three four five six seven eight nine ten (0 1 2 3 4 5 6 7 8 9 10)</p> <p>2.\u5e8f\u6570\u8bcd\uff1afirst second third fourth (\u7b2c\u4e00 \u7b2c\u4e8c \u7b2c\u4e09 \u7b2c\u56db)</p>"},{"location":"%E8%8B%B1%E8%AF%AD/%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86%E4%BB%A5%E5%8F%8A%E4%BA%94%E5%A4%A7%E5%8F%A5%E5%9E%8B/#_4","title":"\u56db\u3001\u52a8\u8bcd\u4e0d\u5b9a\u5f0f\u6216\u8005\u77ed\u8bed(\u540e\u7eed\u8bb2\u89e3)","text":""},{"location":"%E8%8B%B1%E8%AF%AD/%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86%E4%BB%A5%E5%8F%8A%E4%BA%94%E5%A4%A7%E5%8F%A5%E5%9E%8B/#_5","title":"\u4e94\u3001\u52a8\u540d\u8bcd\u6216\u8005\u52a8\u540d\u8bcd\u77ed\u8bed(\u540e\u7eed\u8bb2\u89e3)","text":""},{"location":"%E8%8B%B1%E8%AF%AD/%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86%E4%BB%A5%E5%8F%8A%E4%BA%94%E5%A4%A7%E5%8F%A5%E5%9E%8B/#_6","title":"\u516d\u3001\u53e5\u5b50(\u4e3b\u8bed\u4ece\u53e5\uff0c\u540e\u7eed\u8bb2\u89e3)","text":""},{"location":"%E8%8B%B1%E8%AF%AD/%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86%E4%BB%A5%E5%8F%8A%E4%BA%94%E5%A4%A7%E5%8F%A5%E5%9E%8B/#_7","title":"\u4e03\u3001\u5176\u4ed6","text":"<p>(1)old-&gt;the old \u8001\u4eba</p> <p>(2)rich-&gt;the rich \u5bcc\u4eba</p> <p>(3)eat-&gt;\"eat\" \u6307\u5403\u8fd9\u4e2a\u5355\u8bcd</p>"},{"location":"%E8%8B%B1%E8%AF%AD/%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86%E4%BB%A5%E5%8F%8A%E4%BA%94%E5%A4%A7%E5%8F%A5%E5%9E%8B/#2","title":"2.\u8c13\u8bed","text":"<p>\u5b9a\u4e49\uff1a\u8bf4\u660e\u4e3b\u8bed\u52a8\u4f5c\u6216\u8005\u72b6\u6001\u7684\u8bcd\u8bed\u3002</p> <p>\u7c7b\u578b\uff1a1.\u52a8\u4f5c\u6027\u8c13\u8bed\uff1a\u4e3b\u8bed\u505a\u4ec0\u4e48 2.\u72b6\u6001\u6027\u8c13\u8bed\uff1a\u4e3b\u8bed\u662f\u4ec0\u4e48\u6216\u8005\u600e\u4e48\u6837</p>"},{"location":"%E8%8B%B1%E8%AF%AD/%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86%E4%BB%A5%E5%8F%8A%E4%BA%94%E5%A4%A7%E5%8F%A5%E5%9E%8B/#_8","title":"\u4e00\u3001\u52a8\u4f5c\u6027\u8c13\u8bed","text":"<p>\u5b9a\u4e49\uff1a\u8868\u793a\u52a8\u4f5c\u6216\u8005\u5fc3\u7406\u884c\u4e3a\u7684\u8bcd\u8bed\u3002</p> <p>1.\u7b80\u5355\u8c13\u8bed(\u7531\u5b9e\u4e49\u52a8\u8bcd/\u52a8\u8bcd\u77ed\u8bed\u6784\u6210)\uff1a</p> <p>(1)\u52a8\u8bcd\u5206\u7c7b\uff1a\u5b9e\u4e49\u52a8\u8bcd(\u6709\u5b9e\u9645\u610f\u4e49\u7684\u52a8\u8bcd)\u3001\u7cfb\u52a8\u8bcd\u3001\u52a9\u52a8\u8bcd\u3001\u60c5\u6001\u52a8\u8bcd</p> <p>eg:</p> <p>(1)I work every day. \u6211\u6bcf\u5929\u5de5\u4f5c</p> <p>\u6839\u636e\u8c13\u8bed\u5b9a\u4e49\uff1a\"work\"\u5c31\u662f\u8bf4\u660e\u4e3b\u8bed\"I\"\u7684\u52a8\u4f5c,\u6240\u4ee5\u52a8\u8bcd\"work\"\u5c31\u662f\u8c13\u8bed</p> <p>(2)She looks after her brother.\u4ed6\u7167\u987e\u4ed6\u7684\u5f1f\u5f1f(\u4e3b\u8bed\u662f\u7b2c\u4e09\u4eba\u79f0,\u6240\u4ee5\u8c13\u8bed\u52a8\u8bcd\u7528\u4e86\u7b2c\u4e09\u4eba\u79f0\u5355\u6570)</p> <p>\u6839\u636e\u8c13\u8bed\u5b9a\u4e49\uff1a\"looks after\"\u5c31\u662f\u8bf4\u660e\u4e3b\u8bed\"she\"\u7684\u52a8\u4f5c,\u6240\u4ee5\u52a8\u8bcd\u77ed\u8bed\"looks after\"\u5c31\u662f\u8c13\u8bed</p> <p>2.\u590d\u5408\u8c13\u8bed</p> <p>\u5b9a\u4e49\uff1a\u590d\u5408\u8c13\u8bed\u5c31\u662f\u7531\u7b80\u5355\u8c13\u8bed\u518d\u52a0\u4e0a\u5176\u4ed6\u8bcd\u8bed\u5171\u540c\u505a\u8c13\u8bed\u7684\u60c5\u51b5\u3002</p> <p>(1)\u60c5\u6001\u52a8\u8bcd+\u5b9e\u4e49\u52a8\u8bcd\u6216\u8005\u52a8\u8bcd\u77ed\u8bed\u7684\u539f\u578b</p> <p>\u2460I can speak Cantonese/Mardarin \u6211\u4f1a\u8bf4\u5e7f\u4e1c\u8bdd/\u666e\u901a\u8bdd</p> <p>\u2461I can look after her \u6211\u53ef\u4ee5\u7167\u987e\u5979</p> <p>\"can\"\u5c31\u662f\u4e00\u4e2a\u60c5\u6001\u52a8\u8bcd\uff0c\"can speak\"\u548c\"can look after\"\u90fd\u662f\u590d\u5408\u8c13\u8bed\u3002\u8fd9\u91cc\u6d89\u53ca\u5230\u60c5\u6001\u52a8\u8bcd\u7684\u60c5\u51b5\u3002\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u4ee5\u540e\u7ec6\u8bb2\u3002</p> <p>(2)\u52a9\u52a8\u8bcd+\u5b9e\u4e49\u52a8\u8bcd\u6216\u8005\u52a8\u8bcd\u77ed\u8bed\u7684\u539f\u578b</p> <p>\u2460I will buy a new book tomorrow. \u6211\u660e\u5929\u8981\u4e70\u4e00\u672c\u65b0\u4e66\u3002(\u4e00\u822c\u5c06\u6765\u65f6\u6001)</p> <p>\u2461I will get up early tomorrow. \u6211\u660e\u5929\u8981\u65e9\u8d77\u3002(\u4e00\u822c\u5c06\u6765\u65f6\u6001)</p> <p>\"will buy\"\u548c\"will get up\"\u90fd\u662f\u590d\u5408\u8c13\u8bed</p> <p>(3)\u52a9\u52a8\u8bcd+\u5176\u4ed6\u5f62\u5f0f\u7684\u52a8\u8bcd\u5f62\u5f0f(be+doing \u6216\u8005 Have/has+done)</p> <p>\u2460I am working now. \u6211\u73b0\u5728\u5728\u5de5\u4f5c(\u73b0\u5728\u8fdb\u884c\u65f6\u6001)</p> <p>\u2461I have learned english for 10 years.\u6211\u5df2\u7ecf\u5b66\u4e60\u82f1\u8bed10\u5e74\u4e86\u3002(\u73b0\u5728\u5b8c\u6210\u65f6\u6001)</p> <p>\"am working\"\u548c\"have learned\"\u90fd\u662f\u590d\u5408\u8c13\u8bed</p>"},{"location":"%E8%8B%B1%E8%AF%AD/%E5%8F%A5%E5%AD%90%E6%88%90%E5%88%86%E4%BB%A5%E5%8F%8A%E4%BA%94%E5%A4%A7%E5%8F%A5%E5%9E%8B/#_9","title":"\u4e8c\u3001\u72b6\u6001\u6027\u8c13\u8bed","text":"<p>\u6784\u6210\uff1a\u7cfb\u52a8\u8bcd(be(%90)+\u7279\u6b8a\u7684\u7cfb\u52a8\u8bcd)+\u8868\u8bed</p> <p>\"Be\"\u6709\u516b\u79cd\u5f62\u5f0f\uff1abe\u3001am\u3001is\u3001are\u3001was\u3001were\u3001being\u3001been</p> <p>1.I am happy \u6211\u9ad8\u5174\uff0cam\u662f\u7cfb\u52a8\u8bcd\uff0chappy\u662f\u5f62\u5bb9\u8bcd\u505a\u8868\u8bed\uff0c\u6240\u4ee5\u72b6\u6001\u6027\u8c13\u8bed\u5c31\u662f\"am happy\"</p>"}]}